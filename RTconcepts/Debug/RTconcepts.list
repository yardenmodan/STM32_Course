
RTconcepts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c4  080086c4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086cc  080086cc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080086d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b08  200000a0  08008774  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ba8  08008774  00025ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000142e6  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f38  00000000  00000000  000343f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00037338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfe  00000000  00000000  000382b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004589  00000000  00000000  00038eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001371d  00000000  00000000  0003d43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f248b  00000000  00000000  00050b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004940  00000000  00000000  00142fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00147928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e78 	.word	0x08007e78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08007e78 	.word	0x08007e78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#include "stdlib.h"
#include "semphr.h"
#include <stdio.h>
#include "timers.h"
UART_HandleTypeDef huart3;
int __io_putchar(int ch) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY); // Replace huartX with your UART handle
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f002 fb6f 	bl	8002ca0 <HAL_UART_Transmit>
  return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000bc 	.word	0x200000bc

080005d0 <main>:
///**
//  * @brief  The application entry point.
//  * @retval int
//  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af02      	add	r7, sp, #8
	HAL_Init();
 80005d6:	f000 feee 	bl	80013b6 <HAL_Init>
	  /* USER CODE BEGIN Init */

	  /* USER CODE END Init */

	  /* Configure the system clock */
	SystemClock_Config();
 80005da:	f000 fc9b 	bl	8000f14 <SystemClock_Config>
	  /* USER CODE BEGIN SysInit */

	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	MX_USART3_UART_Init();
 80005de:	f000 fcf5 	bl	8000fcc <MX_USART3_UART_Init>

    department_list[POLICE] = police_dep;
 80005e2:	4b7f      	ldr	r3, [pc, #508]	; (80007e0 <main+0x210>)
 80005e4:	4a7f      	ldr	r2, [pc, #508]	; (80007e4 <main+0x214>)
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	4611      	mov	r1, r2
 80005ea:	8019      	strh	r1, [r3, #0]
 80005ec:	3302      	adds	r3, #2
 80005ee:	0c12      	lsrs	r2, r2, #16
 80005f0:	701a      	strb	r2, [r3, #0]
    department_list[FIRE] = fire_dep;
 80005f2:	4b7b      	ldr	r3, [pc, #492]	; (80007e0 <main+0x210>)
 80005f4:	4a7c      	ldr	r2, [pc, #496]	; (80007e8 <main+0x218>)
 80005f6:	3303      	adds	r3, #3
 80005f8:	8811      	ldrh	r1, [r2, #0]
 80005fa:	7892      	ldrb	r2, [r2, #2]
 80005fc:	8019      	strh	r1, [r3, #0]
 80005fe:	709a      	strb	r2, [r3, #2]
    department_list[AMBULANCE] = ambulance_dep;
 8000600:	4b77      	ldr	r3, [pc, #476]	; (80007e0 <main+0x210>)
 8000602:	4a7a      	ldr	r2, [pc, #488]	; (80007ec <main+0x21c>)
 8000604:	3306      	adds	r3, #6
 8000606:	8811      	ldrh	r1, [r2, #0]
 8000608:	7892      	ldrb	r2, [r2, #2]
 800060a:	8019      	strh	r1, [r3, #0]
 800060c:	709a      	strb	r2, [r3, #2]
    department_list[CORONA] = corona_dep;
 800060e:	4b74      	ldr	r3, [pc, #464]	; (80007e0 <main+0x210>)
 8000610:	4a77      	ldr	r2, [pc, #476]	; (80007f0 <main+0x220>)
 8000612:	3309      	adds	r3, #9
 8000614:	8811      	ldrh	r1, [r2, #0]
 8000616:	7892      	ldrb	r2, [r2, #2]
 8000618:	8019      	strh	r1, [r3, #0]
 800061a:	709a      	strb	r2, [r3, #2]

    policeSemaphore = xSemaphoreCreateCounting(
 800061c:	210a      	movs	r1, #10
 800061e:	200a      	movs	r0, #10
 8000620:	f003 fd95 	bl	800414e <xQueueCreateCountingSemaphore>
 8000624:	4603      	mov	r3, r0
 8000626:	4a73      	ldr	r2, [pc, #460]	; (80007f4 <main+0x224>)
 8000628:	6013      	str	r3, [r2, #0]
        MIN(POLICE_CONCURRENT_NUM, INIT_POLICE_NUM),
        MIN(POLICE_CONCURRENT_NUM, INIT_POLICE_NUM)
    );
    printf("police semaphore count: %d\n", uxSemaphoreGetCount(policeSemaphore));
 800062a:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <main+0x224>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f004 f964 	bl	80048fc <uxQueueMessagesWaiting>
 8000634:	4603      	mov	r3, r0
 8000636:	4619      	mov	r1, r3
 8000638:	486f      	ldr	r0, [pc, #444]	; (80007f8 <main+0x228>)
 800063a:	f006 fcbd 	bl	8006fb8 <iprintf>
    fireSemaphore = xSemaphoreCreateCounting(
 800063e:	210a      	movs	r1, #10
 8000640:	200a      	movs	r0, #10
 8000642:	f003 fd84 	bl	800414e <xQueueCreateCountingSemaphore>
 8000646:	4603      	mov	r3, r0
 8000648:	4a6c      	ldr	r2, [pc, #432]	; (80007fc <main+0x22c>)
 800064a:	6013      	str	r3, [r2, #0]
        MIN(FIRE_CONCURRENT_NUM, INIT_FIRE_NUM),
        MIN(FIRE_CONCURRENT_NUM, INIT_FIRE_NUM)
    );
    printf("fire semaphore count: %d\n", uxSemaphoreGetCount(fireSemaphore));
 800064c:	4b6b      	ldr	r3, [pc, #428]	; (80007fc <main+0x22c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f004 f953 	bl	80048fc <uxQueueMessagesWaiting>
 8000656:	4603      	mov	r3, r0
 8000658:	4619      	mov	r1, r3
 800065a:	4869      	ldr	r0, [pc, #420]	; (8000800 <main+0x230>)
 800065c:	f006 fcac 	bl	8006fb8 <iprintf>

    ambulanceSemaphore = xSemaphoreCreateCounting(
 8000660:	210a      	movs	r1, #10
 8000662:	200a      	movs	r0, #10
 8000664:	f003 fd73 	bl	800414e <xQueueCreateCountingSemaphore>
 8000668:	4603      	mov	r3, r0
 800066a:	4a66      	ldr	r2, [pc, #408]	; (8000804 <main+0x234>)
 800066c:	6013      	str	r3, [r2, #0]
        MIN(AMBULANCE_CONCURRENT_NUM, INIT_AMBULANCE_NUM),
        MIN(AMBULANCE_CONCURRENT_NUM, INIT_AMBULANCE_NUM)
    );
    HAL_UART_Transmit(&huart3, "blabla\r\n", strlen("blabla\r\n"), HAL_MAX_DELAY);
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2208      	movs	r2, #8
 8000674:	4964      	ldr	r1, [pc, #400]	; (8000808 <main+0x238>)
 8000676:	4865      	ldr	r0, [pc, #404]	; (800080c <main+0x23c>)
 8000678:	f002 fb12 	bl	8002ca0 <HAL_UART_Transmit>
    printf("ambulance semaphore count: %d\n", uxSemaphoreGetCount(ambulanceSemaphore));
 800067c:	4b61      	ldr	r3, [pc, #388]	; (8000804 <main+0x234>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f004 f93b 	bl	80048fc <uxQueueMessagesWaiting>
 8000686:	4603      	mov	r3, r0
 8000688:	4619      	mov	r1, r3
 800068a:	4861      	ldr	r0, [pc, #388]	; (8000810 <main+0x240>)
 800068c:	f006 fc94 	bl	8006fb8 <iprintf>

    coronaSemaphore = xSemaphoreCreateCounting(
 8000690:	210a      	movs	r1, #10
 8000692:	200a      	movs	r0, #10
 8000694:	f003 fd5b 	bl	800414e <xQueueCreateCountingSemaphore>
 8000698:	4603      	mov	r3, r0
 800069a:	4a5e      	ldr	r2, [pc, #376]	; (8000814 <main+0x244>)
 800069c:	6013      	str	r3, [r2, #0]
        MIN(CORONA_CONCURRENT_NUM, INIT_CORONA_NUM),
        MIN(CORONA_CONCURRENT_NUM, INIT_CORONA_NUM)
    );
    printf("corona semaphore count: %d\n", uxSemaphoreGetCount(coronaSemaphore));
 800069e:	4b5d      	ldr	r3, [pc, #372]	; (8000814 <main+0x244>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 f92a 	bl	80048fc <uxQueueMessagesWaiting>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4619      	mov	r1, r3
 80006ac:	485a      	ldr	r0, [pc, #360]	; (8000818 <main+0x248>)
 80006ae:	f006 fc83 	bl	8006fb8 <iprintf>

    globalSemaphore = xSemaphoreCreateCounting(MAX_NUM_REQUESTED_VEHICLES,
 80006b2:	210a      	movs	r1, #10
 80006b4:	200a      	movs	r0, #10
 80006b6:	f003 fd4a 	bl	800414e <xQueueCreateCountingSemaphore>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a57      	ldr	r2, [pc, #348]	; (800081c <main+0x24c>)
 80006be:	6013      	str	r3, [r2, #0]
        MAX_NUM_REQUESTED_VEHICLES);
    printf("global semaphore count: %d\n", uxSemaphoreGetCount(globalSemaphore));
 80006c0:	4b56      	ldr	r3, [pc, #344]	; (800081c <main+0x24c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 f919 	bl	80048fc <uxQueueMessagesWaiting>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4619      	mov	r1, r3
 80006ce:	4854      	ldr	r0, [pc, #336]	; (8000820 <main+0x250>)
 80006d0:	f006 fc72 	bl	8006fb8 <iprintf>


    semaphoreList[0] = policeSemaphore;
 80006d4:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <main+0x224>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a52      	ldr	r2, [pc, #328]	; (8000824 <main+0x254>)
 80006da:	6013      	str	r3, [r2, #0]
    semaphoreList[1] = fireSemaphore;
 80006dc:	4b47      	ldr	r3, [pc, #284]	; (80007fc <main+0x22c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a50      	ldr	r2, [pc, #320]	; (8000824 <main+0x254>)
 80006e2:	6053      	str	r3, [r2, #4]

    semaphoreList[2] = ambulanceSemaphore;
 80006e4:	4b47      	ldr	r3, [pc, #284]	; (8000804 <main+0x234>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a4e      	ldr	r2, [pc, #312]	; (8000824 <main+0x254>)
 80006ea:	6093      	str	r3, [r2, #8]

    semaphoreList[3] = coronaSemaphore;
 80006ec:	4b49      	ldr	r3, [pc, #292]	; (8000814 <main+0x244>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a4c      	ldr	r2, [pc, #304]	; (8000824 <main+0x254>)
 80006f2:	60d3      	str	r3, [r2, #12]



    /* Create the queue(s) */
    /* creation of DispatchQueue */
    DispatchQueueHandle = xQueueCreate(DISPATCH_INIT_BUFF_SIZE_BYTES, sizeof(request));
 80006f4:	2200      	movs	r2, #0
 80006f6:	2108      	movs	r1, #8
 80006f8:	200a      	movs	r0, #10
 80006fa:	f003 fcc3 	bl	8004084 <xQueueGenericCreate>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a49      	ldr	r2, [pc, #292]	; (8000828 <main+0x258>)
 8000702:	6013      	str	r3, [r2, #0]

    /* creation of AmbulanceQueue */
    AmbulanceQueueHandle = xQueueCreate(AMBULANCE_INIT_BUFF_SIZE_BYTES, sizeof(request));
 8000704:	2200      	movs	r2, #0
 8000706:	2108      	movs	r1, #8
 8000708:	200a      	movs	r0, #10
 800070a:	f003 fcbb 	bl	8004084 <xQueueGenericCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a46      	ldr	r2, [pc, #280]	; (800082c <main+0x25c>)
 8000712:	6013      	str	r3, [r2, #0]

    /* creation of PoliceQueue */
    PoliceQueueHandle = xQueueCreate(POLICE_INIT_BUFF_SIZE_BYTES, sizeof(request));
 8000714:	2200      	movs	r2, #0
 8000716:	2108      	movs	r1, #8
 8000718:	200a      	movs	r0, #10
 800071a:	f003 fcb3 	bl	8004084 <xQueueGenericCreate>
 800071e:	4603      	mov	r3, r0
 8000720:	4a43      	ldr	r2, [pc, #268]	; (8000830 <main+0x260>)
 8000722:	6013      	str	r3, [r2, #0]

    /* creation of FireQueue */
    FireQueueHandle = xQueueCreate(FIRE_INIT_BUFF_SIZE_BYTES, sizeof(request));
 8000724:	2200      	movs	r2, #0
 8000726:	2108      	movs	r1, #8
 8000728:	200a      	movs	r0, #10
 800072a:	f003 fcab 	bl	8004084 <xQueueGenericCreate>
 800072e:	4603      	mov	r3, r0
 8000730:	4a40      	ldr	r2, [pc, #256]	; (8000834 <main+0x264>)
 8000732:	6013      	str	r3, [r2, #0]

    /* creation of CoronaQueue */
    CoronaQueueHandle = xQueueCreate(CORONA_INIT_BUFF_SIZE_BYTES, sizeof(request));
 8000734:	2200      	movs	r2, #0
 8000736:	2108      	movs	r1, #8
 8000738:	200a      	movs	r0, #10
 800073a:	f003 fca3 	bl	8004084 <xQueueGenericCreate>
 800073e:	4603      	mov	r3, r0
 8000740:	4a3d      	ldr	r2, [pc, #244]	; (8000838 <main+0x268>)
 8000742:	6013      	str	r3, [r2, #0]


    /* creation of loggingThread */
    //BaseType_t log_thread = xTaskCreate(loggingStartThread, (const char*)"loggingStartThread", (const void*)LOG_THREAD_BUFFER_SIZE, NULL, LOGGING_THREAD_PRIORITY, (const TaskHandle_t*)&loggingThreadHandle);
    department_id corona_depar = CORONA;
 8000744:	2303      	movs	r3, #3
 8000746:	71fb      	strb	r3, [r7, #7]
    department_id fire_depar = FIRE;
 8000748:	2301      	movs	r3, #1
 800074a:	71bb      	strb	r3, [r7, #6]
    department_id police_depar = POLICE;
 800074c:	2300      	movs	r3, #0
 800074e:	717b      	strb	r3, [r7, #5]
    department_id ambulance_depar = AMBULANCE;
 8000750:	2302      	movs	r3, #2
 8000752:	713b      	strb	r3, [r7, #4]
    /* USER CODE BEGIN RTOS_THREADS */
    BaseType_t generate_thread = xTaskCreate(generateTask, (const char*)"generateThread", (const void*)GENERATE_THREAD_BUFFER_SIZE, NULL, GENERATE_THREAD_PRIORITY, (const TaskHandle_t*)&generateThreadHandle);
 8000754:	4b39      	ldr	r3, [pc, #228]	; (800083c <main+0x26c>)
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2301      	movs	r3, #1
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	4937      	ldr	r1, [pc, #220]	; (8000840 <main+0x270>)
 8000762:	4838      	ldr	r0, [pc, #224]	; (8000844 <main+0x274>)
 8000764:	f004 fad3 	bl	8004d0e <xTaskCreate>
 8000768:	61f8      	str	r0, [r7, #28]
    BaseType_t dispatch_thread = xTaskCreate(dispatchTask, (const char*)"dispatchThread", (const void*)DISPATCH_THREAD_BUFFER_SIZE, NULL, DISPATCH_THREAD_PRIORITY, (const TaskHandle_t*)&dispatchThreadHandle);
 800076a:	4b37      	ldr	r3, [pc, #220]	; (8000848 <main+0x278>)
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2301      	movs	r3, #1
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	4935      	ldr	r1, [pc, #212]	; (800084c <main+0x27c>)
 8000778:	4835      	ldr	r0, [pc, #212]	; (8000850 <main+0x280>)
 800077a:	f004 fac8 	bl	8004d0e <xTaskCreate>
 800077e:	61b8      	str	r0, [r7, #24]

    BaseType_t police_thread = xTaskCreate(departmentTask, (const char*)"policeThread", (const void*)POLICE_THREAD_BUFFER_SIZE, (void*)&police_depar, POLICE_THREAD_PRIORITY, (const TaskHandle_t*)&policeThreadHandle);
 8000780:	1d7b      	adds	r3, r7, #5
 8000782:	4a34      	ldr	r2, [pc, #208]	; (8000854 <main+0x284>)
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	2201      	movs	r2, #1
 8000788:	9200      	str	r2, [sp, #0]
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	4932      	ldr	r1, [pc, #200]	; (8000858 <main+0x288>)
 800078e:	4833      	ldr	r0, [pc, #204]	; (800085c <main+0x28c>)
 8000790:	f004 fabd 	bl	8004d0e <xTaskCreate>
 8000794:	6178      	str	r0, [r7, #20]

    BaseType_t fire_thread = xTaskCreate(departmentTask, (const char*)"fireThread", (const void*)FIRE_THREAD_BUFFER_SIZE, (void*)&fire_depar, FIRE_THREAD_PRIORITY, (const TaskHandle_t*)&fireThreadHandle);
 8000796:	1dbb      	adds	r3, r7, #6
 8000798:	4a31      	ldr	r2, [pc, #196]	; (8000860 <main+0x290>)
 800079a:	9201      	str	r2, [sp, #4]
 800079c:	2201      	movs	r2, #1
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	4930      	ldr	r1, [pc, #192]	; (8000864 <main+0x294>)
 80007a4:	482d      	ldr	r0, [pc, #180]	; (800085c <main+0x28c>)
 80007a6:	f004 fab2 	bl	8004d0e <xTaskCreate>
 80007aa:	6138      	str	r0, [r7, #16]
    BaseType_t ambulnace_thread = xTaskCreate(departmentTask, (const char*)"ambulanceThread", (const void*)AMBULANCE_THREAD_BUFFER_SIZE, (void*)&ambulance_depar, AMBULANCE_THREAD_PRIORITY, (const TaskHandle_t*)&ambulanceThreadHandle);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4a2e      	ldr	r2, [pc, #184]	; (8000868 <main+0x298>)
 80007b0:	9201      	str	r2, [sp, #4]
 80007b2:	2201      	movs	r2, #1
 80007b4:	9200      	str	r2, [sp, #0]
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	492c      	ldr	r1, [pc, #176]	; (800086c <main+0x29c>)
 80007ba:	4828      	ldr	r0, [pc, #160]	; (800085c <main+0x28c>)
 80007bc:	f004 faa7 	bl	8004d0e <xTaskCreate>
 80007c0:	60f8      	str	r0, [r7, #12]
    BaseType_t corona_thread = xTaskCreate(departmentTask, (const char*)"coronaThread", (const void*)CORONA_THREAD_BUFFER_SIZE, (void*)&corona_depar, CORONA_THREAD_PRIORITY, (const TaskHandle_t*)&coronaThreadHandle);
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <main+0x2a0>)
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	2201      	movs	r2, #1
 80007ca:	9200      	str	r2, [sp, #0]
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	4929      	ldr	r1, [pc, #164]	; (8000874 <main+0x2a4>)
 80007d0:	4822      	ldr	r0, [pc, #136]	; (800085c <main+0x28c>)
 80007d2:	f004 fa9c 	bl	8004d0e <xTaskCreate>
 80007d6:	60b8      	str	r0, [r7, #8]


    vTaskStartScheduler();
 80007d8:	f004 fd44 	bl	8005264 <vTaskStartScheduler>

    while (1)
 80007dc:	e7fe      	b.n	80007dc <main+0x20c>
 80007de:	bf00      	nop
 80007e0:	20000144 	.word	0x20000144
 80007e4:	20000014 	.word	0x20000014
 80007e8:	20000018 	.word	0x20000018
 80007ec:	2000001c 	.word	0x2000001c
 80007f0:	20000020 	.word	0x20000020
 80007f4:	20000150 	.word	0x20000150
 80007f8:	08007e90 	.word	0x08007e90
 80007fc:	2000015c 	.word	0x2000015c
 8000800:	08007eac 	.word	0x08007eac
 8000804:	20000158 	.word	0x20000158
 8000808:	08007ec8 	.word	0x08007ec8
 800080c:	200000bc 	.word	0x200000bc
 8000810:	08007ed4 	.word	0x08007ed4
 8000814:	20000160 	.word	0x20000160
 8000818:	08007ef4 	.word	0x08007ef4
 800081c:	20000154 	.word	0x20000154
 8000820:	08007f10 	.word	0x08007f10
 8000824:	200001a0 	.word	0x200001a0
 8000828:	2000017c 	.word	0x2000017c
 800082c:	20000180 	.word	0x20000180
 8000830:	20000184 	.word	0x20000184
 8000834:	20000188 	.word	0x20000188
 8000838:	2000018c 	.word	0x2000018c
 800083c:	20000164 	.word	0x20000164
 8000840:	08007f2c 	.word	0x08007f2c
 8000844:	08000e61 	.word	0x08000e61
 8000848:	20000168 	.word	0x20000168
 800084c:	08007f3c 	.word	0x08007f3c
 8000850:	08000879 	.word	0x08000879
 8000854:	2000016c 	.word	0x2000016c
 8000858:	08007f4c 	.word	0x08007f4c
 800085c:	080009d9 	.word	0x080009d9
 8000860:	20000170 	.word	0x20000170
 8000864:	08007f5c 	.word	0x08007f5c
 8000868:	20000174 	.word	0x20000174
 800086c:	08007f68 	.word	0x08007f68
 8000870:	20000178 	.word	0x20000178
 8000874:	08007f78 	.word	0x08007f78

08000878 <dispatchTask>:

}


// @brief: takes request from dispatcher queue and send to relevant department queue
TaskFunction_t dispatchTask(void* argument) {
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08f      	sub	sp, #60	; 0x3c
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]



    BaseType_t retval_Sent_From_Dispatch_Queue = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
    BaseType_t retval_Police_Send = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
    BaseType_t retval_Fire_Send = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
    BaseType_t retval_Corona_Send = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t retval_Ambulance_Send = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24

    BaseType_t retval_Send_to_dep_list[DEPARTMENTS_NUM] = { retval_Police_Send,retval_Fire_Send, retval_Ambulance_Send,retval_Corona_Send };
 8000894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a2:	61fb      	str	r3, [r7, #28]
    department_queue_handles_lists[POLICE] = PoliceQueueHandle;
 80008a4:	4b3d      	ldr	r3, [pc, #244]	; (800099c <dispatchTask+0x124>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a3d      	ldr	r2, [pc, #244]	; (80009a0 <dispatchTask+0x128>)
 80008aa:	6013      	str	r3, [r2, #0]
    department_queue_handles_lists[FIRE] = FireQueueHandle;
 80008ac:	4b3d      	ldr	r3, [pc, #244]	; (80009a4 <dispatchTask+0x12c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a3b      	ldr	r2, [pc, #236]	; (80009a0 <dispatchTask+0x128>)
 80008b2:	6053      	str	r3, [r2, #4]
    department_queue_handles_lists[AMBULANCE] = AmbulanceQueueHandle;
 80008b4:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <dispatchTask+0x130>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a39      	ldr	r2, [pc, #228]	; (80009a0 <dispatchTask+0x128>)
 80008ba:	6093      	str	r3, [r2, #8]
    department_queue_handles_lists[CORONA] = CoronaQueueHandle;
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <dispatchTask+0x134>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a37      	ldr	r2, [pc, #220]	; (80009a0 <dispatchTask+0x128>)
 80008c2:	60d3      	str	r3, [r2, #12]



    request req = { 0 };
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
    while (1) {
        if ((retval_Sent_From_Dispatch_Queue = xQueueReceive(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT)) == pdPASS) {
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <dispatchTask+0x138>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f107 0108 	add.w	r1, r7, #8
 80008d6:	f04f 32ff 	mov.w	r2, #4294967295
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fe14 	bl	8004508 <xQueueReceive>
 80008e0:	6378      	str	r0, [r7, #52]	; 0x34
 80008e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d152      	bne.n	800098e <dispatchTask+0x116>
            department_id id = req.dep_id;
 80008e8:	7a3b      	ldrb	r3, [r7, #8]
 80008ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            printf("dispatcher got request: dep_id: %d, requested vehicles: %u, time to comlete: %u\n", req.dep_id, req.requested_vehicles, req.time_to_complete);
 80008ee:	7a3b      	ldrb	r3, [r7, #8]
 80008f0:	4619      	mov	r1, r3
 80008f2:	7a7b      	ldrb	r3, [r7, #9]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	482e      	ldr	r0, [pc, #184]	; (80009b4 <dispatchTask+0x13c>)
 80008fa:	f006 fb5d 	bl	8006fb8 <iprintf>


            if ((retval_Send_to_dep_list[id] = xQueueSendToBack(department_queue_handles_lists[id], &req, QueueTimeoutList[id])) == pdPASS) {
 80008fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000902:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <dispatchTask+0x128>)
 8000904:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800090c:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <dispatchTask+0x140>)
 800090e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000912:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8000916:	f107 0108 	add.w	r1, r7, #8
 800091a:	2300      	movs	r3, #0
 800091c:	f003 fc4e 	bl	80041bc <xQueueGenericSend>
 8000920:	4602      	mov	r2, r0
 8000922:	00a3      	lsls	r3, r4, #2
 8000924:	3338      	adds	r3, #56	; 0x38
 8000926:	443b      	add	r3, r7
 8000928:	f843 2c28 	str.w	r2, [r3, #-40]
 800092c:	00a3      	lsls	r3, r4, #2
 800092e:	3338      	adds	r3, #56	; 0x38
 8000930:	443b      	add	r3, r7
 8000932:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d122      	bne.n	8000980 <dispatchTask+0x108>
                printf("request sent to department!\n");
 800093a:	4820      	ldr	r0, [pc, #128]	; (80009bc <dispatchTask+0x144>)
 800093c:	f006 fba2 	bl	8007084 <puts>
                switch (id) {
 8000940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000944:	2b03      	cmp	r3, #3
 8000946:	d826      	bhi.n	8000996 <dispatchTask+0x11e>
 8000948:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <dispatchTask+0xd8>)
 800094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094e:	bf00      	nop
 8000950:	08000979 	.word	0x08000979
 8000954:	08000961 	.word	0x08000961
 8000958:	08000969 	.word	0x08000969
 800095c:	08000971 	.word	0x08000971
                case FIRE:
                    printf("Fire request was sent to department!\r\n");
 8000960:	4817      	ldr	r0, [pc, #92]	; (80009c0 <dispatchTask+0x148>)
 8000962:	f006 fb8f 	bl	8007084 <puts>
                    break;
 8000966:	e017      	b.n	8000998 <dispatchTask+0x120>
                case AMBULANCE:
                    printf("Ambulance request was sent to department!\r\n");
 8000968:	4816      	ldr	r0, [pc, #88]	; (80009c4 <dispatchTask+0x14c>)
 800096a:	f006 fb8b 	bl	8007084 <puts>
                    break;
 800096e:	e013      	b.n	8000998 <dispatchTask+0x120>
                case CORONA:
                    printf("Corona request was sent to department!\r\n");
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <dispatchTask+0x150>)
 8000972:	f006 fb87 	bl	8007084 <puts>
                    break;
 8000976:	e00f      	b.n	8000998 <dispatchTask+0x120>
                case POLICE:
                    printf("Police request was sent to department!\r\n");
 8000978:	4814      	ldr	r0, [pc, #80]	; (80009cc <dispatchTask+0x154>)
 800097a:	f006 fb83 	bl	8007084 <puts>
                    break;
 800097e:	e00b      	b.n	8000998 <dispatchTask+0x120>


                }
            }
            else {
                printf(" dispatcher sending request to department %d failed. time passed or queue is full!\n", (int)id);
 8000980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000984:	4619      	mov	r1, r3
 8000986:	4812      	ldr	r0, [pc, #72]	; (80009d0 <dispatchTask+0x158>)
 8000988:	f006 fb16 	bl	8006fb8 <iprintf>
 800098c:	e79f      	b.n	80008ce <dispatchTask+0x56>

            }
        }
        else {
            printf(" dispatcher couldnt get request. receiving request from main queue was failed. time passed or queue is empty!\n");
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <dispatchTask+0x15c>)
 8000990:	f006 fb78 	bl	8007084 <puts>
 8000994:	e79b      	b.n	80008ce <dispatchTask+0x56>
                    break;
 8000996:	bf00      	nop
        if ((retval_Sent_From_Dispatch_Queue = xQueueReceive(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT)) == pdPASS) {
 8000998:	e799      	b.n	80008ce <dispatchTask+0x56>
 800099a:	bf00      	nop
 800099c:	20000184 	.word	0x20000184
 80009a0:	20000190 	.word	0x20000190
 80009a4:	20000188 	.word	0x20000188
 80009a8:	20000180 	.word	0x20000180
 80009ac:	2000018c 	.word	0x2000018c
 80009b0:	2000017c 	.word	0x2000017c
 80009b4:	08007f88 	.word	0x08007f88
 80009b8:	20000024 	.word	0x20000024
 80009bc:	08007fdc 	.word	0x08007fdc
 80009c0:	08007ff8 	.word	0x08007ff8
 80009c4:	08008020 	.word	0x08008020
 80009c8:	0800804c 	.word	0x0800804c
 80009cc:	08008074 	.word	0x08008074
 80009d0:	0800809c 	.word	0x0800809c
 80009d4:	080080f0 	.word	0x080080f0

080009d8 <departmentTask>:
    }
}


// @brief: this function takes request from department queue and send to execute thread
TaskFunction_t departmentTask(void* dep_id) {//argument is speartment_id
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b097      	sub	sp, #92	; 0x5c
 80009dc:	af02      	add	r7, sp, #8
 80009de:	6078      	str	r0, [r7, #4]

    department_id depar_id = *((department_id*)dep_id);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    BaseType_t retval_SR_thread;
    request req;
    int thread_buffer_list[DEPARTMENTS_NUM] = { POLICE_SR_THREAD_BUFFER_SIZE, FIRE_SR_THREAD_BUFFER_SIZE, AMBULANCE_SR_THREAD_BUFFER_SIZE,CORONA_SR_THREAD_BUFFER_SIZE };
 80009e8:	4b44      	ldr	r3, [pc, #272]	; (8000afc <departmentTask+0x124>)
 80009ea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80009ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    TaskHandle_t SR_handle_array[MAX_SR_HANDLES] = { 0 };
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2228      	movs	r2, #40	; 0x28
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f006 fc21 	bl	8007244 <memset>
    uint8_t sr_handle_index = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    while (1)
    {
        sr_handle_index %= MAX_SR_HANDLES;
 8000a08:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000a0c:	4b3c      	ldr	r3, [pc, #240]	; (8000b00 <departmentTask+0x128>)
 8000a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a12:	08d9      	lsrs	r1, r3, #3
 8000a14:	460b      	mov	r3, r1
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	440b      	add	r3, r1
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (xQueueReceive(department_queue_handles_lists[depar_id], (void const*)&req, QueueTimeoutList[depar_id]) == pdPASS)
 8000a22:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a26:	4a37      	ldr	r2, [pc, #220]	; (8000b04 <departmentTask+0x12c>)
 8000a28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a2c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a30:	4a35      	ldr	r2, [pc, #212]	; (8000b08 <departmentTask+0x130>)
 8000a32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f003 fd64 	bl	8004508 <xQueueReceive>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d153      	bne.n	8000aee <departmentTask+0x116>
        {
            printf(" department %d received request\n", (int)depar_id);
 8000a46:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482f      	ldr	r0, [pc, #188]	; (8000b0c <departmentTask+0x134>)
 8000a4e:	f006 fab3 	bl	8006fb8 <iprintf>
            switch (depar_id) {
 8000a52:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d81a      	bhi.n	8000a90 <departmentTask+0xb8>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <departmentTask+0x88>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000a81 	.word	0x08000a81
 8000a64:	08000a71 	.word	0x08000a71
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000a89 	.word	0x08000a89
            case FIRE:
                printf("Got request from fire department sending to SR!\r\n");
 8000a70:	4827      	ldr	r0, [pc, #156]	; (8000b10 <departmentTask+0x138>)
 8000a72:	f006 fb07 	bl	8007084 <puts>
                break;
 8000a76:	e00b      	b.n	8000a90 <departmentTask+0xb8>
            case AMBULANCE:
                printf("Got request from ambulance department sending to SR!\r\n");
 8000a78:	4826      	ldr	r0, [pc, #152]	; (8000b14 <departmentTask+0x13c>)
 8000a7a:	f006 fb03 	bl	8007084 <puts>
                break;
 8000a7e:	e007      	b.n	8000a90 <departmentTask+0xb8>
            case POLICE:
                printf("Got request from police department sending to SR!\r\n");
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <departmentTask+0x140>)
 8000a82:	f006 faff 	bl	8007084 <puts>
                break;
 8000a86:	e003      	b.n	8000a90 <departmentTask+0xb8>
            case CORONA:
                printf("Got request from corona department sending to SR!\r\n");
 8000a88:	4824      	ldr	r0, [pc, #144]	; (8000b1c <departmentTask+0x144>)
 8000a8a:	f006 fafb 	bl	8007084 <puts>
                break;
 8000a8e:	bf00      	nop
            }
            if ((retval_SR_thread = xTaskCreate(
                ServiceRoutine,
                (const char*)"ServiceRoutineThread",
                thread_buffer_list[depar_id],
 8000a90:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	3350      	adds	r3, #80	; 0x50
 8000a98:	443b      	add	r3, r7
 8000a9a:	f853 3c20 	ldr.w	r3, [r3, #-32]
            if ((retval_SR_thread = xTaskCreate(
 8000a9e:	b299      	uxth	r1, r3
                (void const*)&req, //request to be passed
                department_thread_priority[depar_id],
 8000aa0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000aa4:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <departmentTask+0x148>)
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            if ((retval_SR_thread = xTaskCreate(
 8000aaa:	4618      	mov	r0, r3
                (const TaskHandle_t*)&SR_handle_array[sr_handle_index])) == pdPASS) //should i add handles to each of task created?
 8000aac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ab0:	f107 0208 	add.w	r2, r7, #8
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
            if ((retval_SR_thread = xTaskCreate(
 8000ab8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	9000      	str	r0, [sp, #0]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	460a      	mov	r2, r1
 8000ac4:	4917      	ldr	r1, [pc, #92]	; (8000b24 <departmentTask+0x14c>)
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <departmentTask+0x150>)
 8000ac8:	f004 f921 	bl	8004d0e <xTaskCreate>
 8000acc:	64b8      	str	r0, [r7, #72]	; 0x48
 8000ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d108      	bne.n	8000ae6 <departmentTask+0x10e>
            {
                printf("New SR was created!\r\n");
 8000ad4:	4815      	ldr	r0, [pc, #84]	; (8000b2c <departmentTask+0x154>)
 8000ad6:	f006 fad5 	bl	8007084 <puts>
                sr_handle_index++;
 8000ada:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000ae4:	e790      	b.n	8000a08 <departmentTask+0x30>
            }
            else {
                printf("NEW SR failed to be created!\n");
 8000ae6:	4812      	ldr	r0, [pc, #72]	; (8000b30 <departmentTask+0x158>)
 8000ae8:	f006 facc 	bl	8007084 <puts>
 8000aec:	e78c      	b.n	8000a08 <departmentTask+0x30>
            }
        }
        else {
            printf("receive request from %d department queue failed. queue empty or time passed!\n", (int)depar_id);
 8000aee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000af2:	4619      	mov	r1, r3
 8000af4:	480f      	ldr	r0, [pc, #60]	; (8000b34 <departmentTask+0x15c>)
 8000af6:	f006 fa5f 	bl	8006fb8 <iprintf>
        sr_handle_index %= MAX_SR_HANDLES;
 8000afa:	e785      	b.n	8000a08 <departmentTask+0x30>
 8000afc:	080082f8 	.word	0x080082f8
 8000b00:	cccccccd 	.word	0xcccccccd
 8000b04:	20000190 	.word	0x20000190
 8000b08:	20000024 	.word	0x20000024
 8000b0c:	08008160 	.word	0x08008160
 8000b10:	08008184 	.word	0x08008184
 8000b14:	080081b8 	.word	0x080081b8
 8000b18:	080081f0 	.word	0x080081f0
 8000b1c:	08008224 	.word	0x08008224
 8000b20:	20000004 	.word	0x20000004
 8000b24:	08008258 	.word	0x08008258
 8000b28:	08000b39 	.word	0x08000b39
 8000b2c:	08008270 	.word	0x08008270
 8000b30:	08008288 	.word	0x08008288
 8000b34:	080082a8 	.word	0x080082a8

08000b38 <ServiceRoutine>:

        }
    }
}

TaskFunction_t ServiceRoutine(void* req) {
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    request* reques = (request*)req;//
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    department_id depar_id = reques->dep_id;
 8000b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int glob_semaphore_count_before_1 = uxSemaphoreGetCount(globalSemaphore);
 8000b4c:	4b74      	ldr	r3, [pc, #464]	; (8000d20 <ServiceRoutine+0x1e8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fed3 	bl	80048fc <uxQueueMessagesWaiting>
 8000b56:	4603      	mov	r3, r0
 8000b58:	623b      	str	r3, [r7, #32]

    SemaphoreHandle_t department_semaphore = semaphoreList[depar_id];
 8000b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b5e:	4a71      	ldr	r2, [pc, #452]	; (8000d24 <ServiceRoutine+0x1ec>)
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	61fb      	str	r3, [r7, #28]
    printf("department request %d entered service routine\n", depar_id);
 8000b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	486e      	ldr	r0, [pc, #440]	; (8000d28 <ServiceRoutine+0x1f0>)
 8000b6e:	f006 fa23 	bl	8006fb8 <iprintf>
    int i = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    printf("requested cars: %d, sempahoreglobal: %d, concurrentsemaphore: %d", reques->requested_vehicles, uxSemaphoreGetCount(globalSemaphore), uxSemaphoreGetCount(department_semaphore));
 8000b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	461d      	mov	r5, r3
 8000b7c:	4b68      	ldr	r3, [pc, #416]	; (8000d20 <ServiceRoutine+0x1e8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 febb 	bl	80048fc <uxQueueMessagesWaiting>
 8000b86:	4604      	mov	r4, r0
 8000b88:	69f8      	ldr	r0, [r7, #28]
 8000b8a:	f003 feb7 	bl	80048fc <uxQueueMessagesWaiting>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4622      	mov	r2, r4
 8000b92:	4629      	mov	r1, r5
 8000b94:	4865      	ldr	r0, [pc, #404]	; (8000d2c <ServiceRoutine+0x1f4>)
 8000b96:	f006 fa0f 	bl	8006fb8 <iprintf>
    while (i < reques->requested_vehicles) {
 8000b9a:	e0b5      	b.n	8000d08 <ServiceRoutine+0x1d0>
        printf("global sempahore count: %ld, concurrent semaphore count: %ld", uxSemaphoreGetCount(globalSemaphore), uxSemaphoreGetCount(department_semaphore));
 8000b9c:	4b60      	ldr	r3, [pc, #384]	; (8000d20 <ServiceRoutine+0x1e8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 feab 	bl	80048fc <uxQueueMessagesWaiting>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	69f8      	ldr	r0, [r7, #28]
 8000baa:	f003 fea7 	bl	80048fc <uxQueueMessagesWaiting>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	485e      	ldr	r0, [pc, #376]	; (8000d30 <ServiceRoutine+0x1f8>)
 8000bb6:	f006 f9ff 	bl	8006fb8 <iprintf>
        int glob_semaphore_count_before_2 = uxSemaphoreGetCount(globalSemaphore);
 8000bba:	4b59      	ldr	r3, [pc, #356]	; (8000d20 <ServiceRoutine+0x1e8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 fe9c 	bl	80048fc <uxQueueMessagesWaiting>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	61bb      	str	r3, [r7, #24]
        if (xSemaphoreTake(globalSemaphore, 0) == pdPASS && xSemaphoreTake(semaphoreList[depar_id], 0) == pdPASS) {
 8000bc8:	4b55      	ldr	r3, [pc, #340]	; (8000d20 <ServiceRoutine+0x1e8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fd80 	bl	80046d4 <xQueueSemaphoreTake>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d17b      	bne.n	8000cd2 <ServiceRoutine+0x19a>
 8000bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bde:	4a51      	ldr	r2, [pc, #324]	; (8000d24 <ServiceRoutine+0x1ec>)
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fd74 	bl	80046d4 <xQueueSemaphoreTake>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d16f      	bne.n	8000cd2 <ServiceRoutine+0x19a>
            printf("global semaphore and depar semaphore were taken! priority is %d\n", uxTaskPriorityGet(NULL));
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f004 fa7c 	bl	80050f0 <uxTaskPriorityGet>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	484d      	ldr	r0, [pc, #308]	; (8000d34 <ServiceRoutine+0x1fc>)
 8000bfe:	f006 f9db 	bl	8006fb8 <iprintf>
            vTaskPrioritySet(NULL, uxTaskPriorityGet(NULL) + 1);// increases prioirity by one
 8000c02:	2000      	movs	r0, #0
 8000c04:	f004 fa74 	bl	80050f0 <uxTaskPriorityGet>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f004 fa88 	bl	8005124 <vTaskPrioritySet>
            i++;
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	3301      	adds	r3, #1
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
            int glob_semaphore_count_before_3 = uxSemaphoreGetCount(globalSemaphore);
 8000c1a:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <ServiceRoutine+0x1e8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fe6c 	bl	80048fc <uxQueueMessagesWaiting>
 8000c24:	4603      	mov	r3, r0
 8000c26:	617b      	str	r3, [r7, #20]
            totalVehicles--;
 8000c28:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <ServiceRoutine+0x200>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	4a42      	ldr	r2, [pc, #264]	; (8000d38 <ServiceRoutine+0x200>)
 8000c30:	6013      	str	r3, [r2, #0]
            department_list[depar_id].available_num--;
 8000c32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c36:	4941      	ldr	r1, [pc, #260]	; (8000d3c <ServiceRoutine+0x204>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	3302      	adds	r3, #2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	b2d8      	uxtb	r0, r3
 8000c48:	493c      	ldr	r1, [pc, #240]	; (8000d3c <ServiceRoutine+0x204>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	3302      	adds	r3, #2
 8000c54:	4602      	mov	r2, r0
 8000c56:	701a      	strb	r2, [r3, #0]
            department_list[depar_id].concurrent_num--;
 8000c58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c5c:	4937      	ldr	r1, [pc, #220]	; (8000d3c <ServiceRoutine+0x204>)
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	3301      	adds	r3, #1
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	4933      	ldr	r1, [pc, #204]	; (8000d3c <ServiceRoutine+0x204>)
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	701a      	strb	r2, [r3, #0]
            /* in case all resources for execution acquired, exectues, releases all semaphores and end task*/
            if (i == reques->requested_vehicles - 1) {
 8000c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c80:	785b      	ldrb	r3, [r3, #1]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d13e      	bne.n	8000d08 <ServiceRoutine+0x1d0>
                printf("##################################sending vehicles!\n");
 8000c8a:	482d      	ldr	r0, [pc, #180]	; (8000d40 <ServiceRoutine+0x208>)
 8000c8c:	f006 f9fa 	bl	8007084 <puts>
                vTaskDelay(pdMS_TO_TICKS(reques->time_to_complete));
 8000c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <ServiceRoutine+0x20c>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	099b      	lsrs	r3, r3, #6
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 f9ed 	bl	8005084 <vTaskDelay>
                releaseResources(i, depar_id);
 8000caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000cb2:	f000 f84f 	bl	8000d54 <releaseResources>
                printf("released resources!\n");
 8000cb6:	4824      	ldr	r0, [pc, #144]	; (8000d48 <ServiceRoutine+0x210>)
 8000cb8:	f006 f9e4 	bl	8007084 <puts>
                int glob_semaphore_count_before_4 = uxSemaphoreGetCount(globalSemaphore);
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <ServiceRoutine+0x1e8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fe1b 	bl	80048fc <uxQueueMessagesWaiting>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	613b      	str	r3, [r7, #16]
                vTaskDelete(NULL);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f004 f966 	bl	8004f9c <vTaskDelete>
        if (xSemaphoreTake(globalSemaphore, 0) == pdPASS && xSemaphoreTake(semaphoreList[depar_id], 0) == pdPASS) {
 8000cd0:	e01a      	b.n	8000d08 <ServiceRoutine+0x1d0>
            }
        }
        else {
            /* in deadlock releases all semaphores acquired and then start again*/
            releaseResources(i, depar_id);
 8000cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000cda:	f000 f83b 	bl	8000d54 <releaseResources>
            vTaskPrioritySet(NULL, (UBaseType_t)department_thread_priority[depar_id]);
 8000cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce2:	4a1a      	ldr	r2, [pc, #104]	; (8000d4c <ServiceRoutine+0x214>)
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2000      	movs	r0, #0
 8000cec:	f004 fa1a 	bl	8005124 <vTaskPrioritySet>
            int glob_semaphore_count_before_5 = uxSemaphoreGetCount(globalSemaphore);
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <ServiceRoutine+0x1e8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 fe01 	bl	80048fc <uxQueueMessagesWaiting>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60fb      	str	r3, [r7, #12]
            printf("collision detected, released all semaphores!\n");
 8000cfe:	4814      	ldr	r0, [pc, #80]	; (8000d50 <ServiceRoutine+0x218>)
 8000d00:	f006 f9c0 	bl	8007084 <puts>
            i = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (i < reques->requested_vehicles) {
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	785b      	ldrb	r3, [r3, #1]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d10:	4293      	cmp	r3, r2
 8000d12:	f6ff af43 	blt.w	8000b9c <ServiceRoutine+0x64>


        }
    }
}
 8000d16:	bf00      	nop
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3730      	adds	r7, #48	; 0x30
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d20:	20000154 	.word	0x20000154
 8000d24:	200001a0 	.word	0x200001a0
 8000d28:	08008308 	.word	0x08008308
 8000d2c:	08008338 	.word	0x08008338
 8000d30:	0800837c 	.word	0x0800837c
 8000d34:	080083bc 	.word	0x080083bc
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000144 	.word	0x20000144
 8000d40:	08008400 	.word	0x08008400
 8000d44:	10624dd3 	.word	0x10624dd3
 8000d48:	08008434 	.word	0x08008434
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	08008448 	.word	0x08008448

08000d54 <releaseResources>:



void releaseResources(int i, department_id depar_id) {
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
    for (int j = 0; j < i;j++) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e066      	b.n	8000e34 <releaseResources+0xe0>
        int glob_semaphore_count_before = uxSemaphoreGetCount(globalSemaphore);
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <releaseResources+0xf4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fdc6 	bl	80048fc <uxQueueMessagesWaiting>
 8000d70:	4603      	mov	r3, r0
 8000d72:	613b      	str	r3, [r7, #16]
        xSemaphoreGive(globalSemaphore);
 8000d74:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <releaseResources+0xf4>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f003 fa1d 	bl	80041bc <xQueueGenericSend>
        int glob_semahpore_count_after = uxSemaphoreGetCount(globalSemaphore);
 8000d82:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <releaseResources+0xf4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fdb8 	bl	80048fc <uxQueueMessagesWaiting>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60fb      	str	r3, [r7, #12]
        xSemaphoreGive(semaphoreList[depar_id]);
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	4a2e      	ldr	r2, [pc, #184]	; (8000e4c <releaseResources+0xf8>)
 8000d94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f003 fa0d 	bl	80041bc <xQueueGenericSend>
        printf("department semaphore and global were given!\n");
 8000da2:	482b      	ldr	r0, [pc, #172]	; (8000e50 <releaseResources+0xfc>)
 8000da4:	f006 f96e 	bl	8007084 <puts>
        totalVehicles++;
 8000da8:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <releaseResources+0x100>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a29      	ldr	r2, [pc, #164]	; (8000e54 <releaseResources+0x100>)
 8000db0:	6013      	str	r3, [r2, #0]
        department_list[depar_id].concurrent_num++;
 8000db2:	78fa      	ldrb	r2, [r7, #3]
 8000db4:	4928      	ldr	r1, [pc, #160]	; (8000e58 <releaseResources+0x104>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b2d8      	uxtb	r0, r3
 8000dc6:	4924      	ldr	r1, [pc, #144]	; (8000e58 <releaseResources+0x104>)
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	701a      	strb	r2, [r3, #0]
        department_list[depar_id].available_num++;
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	491f      	ldr	r1, [pc, #124]	; (8000e58 <releaseResources+0x104>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	3302      	adds	r3, #2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	b2d8      	uxtb	r0, r3
 8000dea:	491b      	ldr	r1, [pc, #108]	; (8000e58 <releaseResources+0x104>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	3302      	adds	r3, #2
 8000df6:	4602      	mov	r2, r0
 8000df8:	701a      	strb	r2, [r3, #0]
        printf("released resources of %d department: totalVehicles: %d, concurrent num: %d, availble num: %d\n", depar_id, totalVehicles, department_list[depar_id].concurrent_num, department_list[depar_id].available_num);
 8000dfa:	78f9      	ldrb	r1, [r7, #3]
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <releaseResources+0x100>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	78fa      	ldrb	r2, [r7, #3]
 8000e02:	4c15      	ldr	r4, [pc, #84]	; (8000e58 <releaseResources+0x104>)
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	4423      	add	r3, r4
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461d      	mov	r5, r3
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	4c10      	ldr	r4, [pc, #64]	; (8000e58 <releaseResources+0x104>)
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4423      	add	r3, r4
 8000e1e:	3302      	adds	r3, #2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	462b      	mov	r3, r5
 8000e26:	4602      	mov	r2, r0
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <releaseResources+0x108>)
 8000e2a:	f006 f8c5 	bl	8006fb8 <iprintf>
    for (int j = 0; j < i;j++) {
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	db94      	blt.n	8000d66 <releaseResources+0x12>
        //to add delay time to break symmetry?
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bdb0      	pop	{r4, r5, r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000154 	.word	0x20000154
 8000e4c:	200001a0 	.word	0x200001a0
 8000e50:	08008478 	.word	0x08008478
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000144 	.word	0x20000144
 8000e5c:	080084a4 	.word	0x080084a4

08000e60 <generateTask>:
}


*/
TaskFunction_t generateTask(void* argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    BaseType_t retval_Send_To_Dispatch_Queue = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    while (1) {
        department_id dep = rand() % DEPARTMENTS_NUM;
 8000e6c:	f005 ffb6 	bl	8006ddc <rand>
 8000e70:	4603      	mov	r3, r0
 8000e72:	425a      	negs	r2, r3
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	bf58      	it	pl
 8000e7e:	4253      	negpl	r3, r2
 8000e80:	76fb      	strb	r3, [r7, #27]
        uint32_t active_time = rand() % XTICKS_MAX;
 8000e82:	f005 ffab 	bl	8006ddc <rand>
 8000e86:	4602      	mov	r2, r0
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <generateTask+0xa0>)
 8000e8a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e8e:	1159      	asrs	r1, r3, #5
 8000e90:	17d3      	asrs	r3, r2, #31
 8000e92:	1acb      	subs	r3, r1, r3
 8000e94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e98:	fb01 f303 	mul.w	r3, r1, r3
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
        uint8_t vehicle_num_to_dispatch = (rand() % MAX_NUM_REQUESTED_VEHICLES) + 1; // request num of vehicles can be only greater than zero
 8000ea0:	f005 ff9c 	bl	8006ddc <rand>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <generateTask+0xa4>)
 8000ea8:	fb83 1302 	smull	r1, r3, r3, r2
 8000eac:	1099      	asrs	r1, r3, #2
 8000eae:	17d3      	asrs	r3, r2, #31
 8000eb0:	1ac9      	subs	r1, r1, r3
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	1ad1      	subs	r1, r2, r3
 8000ebc:	b2cb      	uxtb	r3, r1
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	74fb      	strb	r3, [r7, #19]
        request req = { dep,vehicle_num_to_dispatch,active_time };
 8000ec2:	7efb      	ldrb	r3, [r7, #27]
 8000ec4:	723b      	strb	r3, [r7, #8]
 8000ec6:	7cfb      	ldrb	r3, [r7, #19]
 8000ec8:	727b      	strb	r3, [r7, #9]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	60fb      	str	r3, [r7, #12]
        if ((retval_Send_To_Dispatch_Queue = xQueueSendToBack(DispatchQueueHandle, &req, DISPATCH_QUEUE_TIMEOUT)) == pdPASS) {
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <generateTask+0xa8>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	f107 0108 	add.w	r1, r7, #8
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	f003 f96e 	bl	80041bc <xQueueGenericSend>
 8000ee0:	61f8      	str	r0, [r7, #28]
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d106      	bne.n	8000ef6 <generateTask+0x96>
            printf("generated request. request was put inside main queue! request: dep: %d, active time: %u, vehicle num: %u\r\n", dep, active_time, vehicle_num_to_dispatch);
 8000ee8:	7ef9      	ldrb	r1, [r7, #27]
 8000eea:	7cfb      	ldrb	r3, [r7, #19]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <generateTask+0xac>)
 8000ef0:	f006 f862 	bl	8006fb8 <iprintf>
 8000ef4:	e7ba      	b.n	8000e6c <generateTask+0xc>

        }
        else {
            printf("request couldnt enter main queue due to it is full or time passed!\r\n");
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <generateTask+0xb0>)
 8000ef8:	f006 f8c4 	bl	8007084 <puts>
    while (1) {
 8000efc:	e7b6      	b.n	8000e6c <generateTask+0xc>
 8000efe:	bf00      	nop
 8000f00:	10624dd3 	.word	0x10624dd3
 8000f04:	66666667 	.word	0x66666667
 8000f08:	2000017c 	.word	0x2000017c
 8000f0c:	08008504 	.word	0x08008504
 8000f10:	08008570 	.word	0x08008570

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2230      	movs	r2, #48	; 0x30
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f006 f98e 	bl	8007244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <SystemClock_Config+0xb0>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <SystemClock_Config+0xb0>)
 8000f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <SystemClock_Config+0xb0>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <SystemClock_Config+0xb4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <SystemClock_Config+0xb4>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <SystemClock_Config+0xb4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2310      	movs	r3, #16
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fdc5 	bl	8001b10 <HAL_RCC_OscConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000f8c:	f000 f84e 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 f854 	bl	8002058 <HAL_RCC_ClockConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fb6:	f000 f839 	bl	800102c <Error_Handler>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3750      	adds	r7, #80	; 0x50
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <MX_USART3_UART_Init>:

//}

/* MPU Configuration */
static void MX_USART3_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8000fd2:	4a15      	ldr	r2, [pc, #84]	; (8001028 <MX_USART3_UART_Init+0x5c>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART3_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART3_UART_Init+0x58>)
 8001010:	f001 fdf8 	bl	8002c04 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800101a:	f000 f807 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000bc 	.word	0x200000bc
 8001028:	40004800 	.word	0x40004800

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_MspInit+0x4c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	210f      	movs	r1, #15
 8001072:	f06f 0001 	mvn.w	r0, #1
 8001076:	f000 fad6 	bl	8001626 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0aa      	sub	sp, #168	; 0xa8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	2284      	movs	r2, #132	; 0x84
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 f8cb 	bl	8007244 <memset>
  if(huart->Instance==USART3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a26      	ldr	r2, [pc, #152]	; (800114c <HAL_UART_MspInit+0xc4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d144      	bne.n	8001142 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 f9ac 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010d2:	f7ff ffab 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001106:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800110a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001120:	2307      	movs	r3, #7
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800112a:	4619      	mov	r1, r3
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <HAL_UART_MspInit+0xcc>)
 800112e:	f000 fb43 	bl	80017b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2027      	movs	r0, #39	; 0x27
 8001138:	f000 fa75 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800113c:	2027      	movs	r0, #39	; 0x27
 800113e:	f000 fa8e 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	37a8      	adds	r7, #168	; 0xa8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40004800 	.word	0x40004800
 8001150:	40023800 	.word	0x40023800
 8001154:	40020400 	.word	0x40020400

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001188:	f000 f952 	bl	8001430 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800118c:	f004 fcc8 	bl	8005b20 <xTaskGetSchedulerState>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	d001      	beq.n	800119a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001196:	f005 fba7 	bl	80068e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <USART3_IRQHandler+0x10>)
 80011a6:	f001 fdff 	bl	8002da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200000bc 	.word	0x200000bc

080011b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return 1;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_kill>:

int _kill(int pid, int sig)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ce:	f006 f887 	bl	80072e0 <__errno>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2216      	movs	r2, #22
 80011d6:	601a      	str	r2, [r3, #0]
  return -1;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <_exit>:

void _exit (int status)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ffe7 	bl	80011c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011f6:	e7fe      	b.n	80011f6 <_exit+0x12>

080011f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e00a      	b.n	8001220 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800120a:	f3af 8000 	nop.w
 800120e:	4601      	mov	r1, r0
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	b2ca      	uxtb	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	dbf0      	blt.n	800120a <_read+0x12>
  }

  return len;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e009      	b.n	8001258 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f9ad 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbf1      	blt.n	8001244 <_write+0x12>
  }
  return len;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_close>:

int _close(int file)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001292:	605a      	str	r2, [r3, #4]
  return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <_isatty>:

int _isatty(int file)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f005 ffec 	bl	80072e0 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20050000 	.word	0x20050000
 8001334:	00000400 	.word	0x00000400
 8001338:	200001b0 	.word	0x200001b0
 800133c:	20005ba8 	.word	0x20005ba8

08001340 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	; (80013b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800138e:	f7ff ffd7 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f005 ffab 	bl	80072ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff f91b 	bl	80005d0 <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80013a8:	080086d4 	.word	0x080086d4
  ldr r2, =_sbss
 80013ac:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80013b0:	20005ba8 	.word	0x20005ba8

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>

080013b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f928 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c0:	200f      	movs	r0, #15
 80013c2:	f000 f805 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c6:	f7ff fe37 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f943 	bl	800167a <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f90b 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000034 	.word	0x20000034
 8001428:	2000003c 	.word	0x2000003c
 800142c:	20000038 	.word	0x20000038

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2000003c 	.word	0x2000003c
 8001454:	200001b4 	.word	0x200001b4

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200001b4 	.word	0x200001b4

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	4313      	orrs	r3, r2
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	05fa0000 	.word	0x05fa0000

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff3e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff31 	bl	80014d4 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff feda 	bl	8001458 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d008      	beq.n	80016c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e052      	b.n	800176a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0216 	bic.w	r2, r2, #22
 80016d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d103      	bne.n	80016f4 <HAL_DMA_Abort+0x62>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0208 	bic.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001714:	e013      	b.n	800173e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001716:	f7ff fe9f 	bl	8001458 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b05      	cmp	r3, #5
 8001722:	d90c      	bls.n	800173e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2220      	movs	r2, #32
 8001728:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e015      	b.n	800176a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e4      	bne.n	8001716 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001750:	223f      	movs	r2, #63	; 0x3f
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d004      	beq.n	8001790 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e00c      	b.n	80017aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2205      	movs	r2, #5
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e175      	b.n	8001ac4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8164 	bne.w	8001abe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d005      	beq.n	800180e <HAL_GPIO_Init+0x56>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d130      	bne.n	8001870 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b03      	cmp	r3, #3
 800187a:	d017      	beq.n	80018ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d123      	bne.n	8001900 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	08da      	lsrs	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	08da      	lsrs	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3208      	adds	r2, #8
 80018fa:	69b9      	ldr	r1, [r7, #24]
 80018fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80be 	beq.w	8001abe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b66      	ldr	r3, [pc, #408]	; (8001adc <HAL_GPIO_Init+0x324>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a65      	ldr	r2, [pc, #404]	; (8001adc <HAL_GPIO_Init+0x324>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_GPIO_Init+0x324>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800195a:	4a61      	ldr	r2, [pc, #388]	; (8001ae0 <HAL_GPIO_Init+0x328>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_GPIO_Init+0x32c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d037      	beq.n	80019f6 <HAL_GPIO_Init+0x23e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a57      	ldr	r2, [pc, #348]	; (8001ae8 <HAL_GPIO_Init+0x330>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d031      	beq.n	80019f2 <HAL_GPIO_Init+0x23a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a56      	ldr	r2, [pc, #344]	; (8001aec <HAL_GPIO_Init+0x334>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d02b      	beq.n	80019ee <HAL_GPIO_Init+0x236>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a55      	ldr	r2, [pc, #340]	; (8001af0 <HAL_GPIO_Init+0x338>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d025      	beq.n	80019ea <HAL_GPIO_Init+0x232>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <HAL_GPIO_Init+0x33c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01f      	beq.n	80019e6 <HAL_GPIO_Init+0x22e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a53      	ldr	r2, [pc, #332]	; (8001af8 <HAL_GPIO_Init+0x340>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x22a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_GPIO_Init+0x344>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x226>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_GPIO_Init+0x348>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x222>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <HAL_GPIO_Init+0x34c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x21e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <HAL_GPIO_Init+0x350>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x21a>
 80019ce:	2309      	movs	r3, #9
 80019d0:	e012      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019d2:	230a      	movs	r3, #10
 80019d4:	e010      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019d6:	2308      	movs	r3, #8
 80019d8:	e00e      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019da:	2307      	movs	r3, #7
 80019dc:	e00c      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019de:	2306      	movs	r3, #6
 80019e0:	e00a      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019e2:	2305      	movs	r3, #5
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019e6:	2304      	movs	r3, #4
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019f6:	2300      	movs	r3, #0
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x328>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a29      	ldr	r2, [pc, #164]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f67f ae86 	bls.w	80017d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40021400 	.word	0x40021400
 8001afc:	40021800 	.word	0x40021800
 8001b00:	40021c00 	.word	0x40021c00
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40022400 	.word	0x40022400
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e291      	b.n	800204a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8087 	beq.w	8001c42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b34:	4b96      	ldr	r3, [pc, #600]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d00c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b40:	4b93      	ldr	r3, [pc, #588]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d112      	bne.n	8001b72 <HAL_RCC_OscConfig+0x62>
 8001b4c:	4b90      	ldr	r3, [pc, #576]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b58:	d10b      	bne.n	8001b72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5a:	4b8d      	ldr	r3, [pc, #564]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d06c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x130>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d168      	bne.n	8001c40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e26b      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x7a>
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e02e      	b.n	8001be8 <HAL_RCC_OscConfig+0xd8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x9c>
 8001b92:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a7e      	ldr	r2, [pc, #504]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7b      	ldr	r2, [pc, #492]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e01d      	b.n	8001be8 <HAL_RCC_OscConfig+0xd8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xc0>
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a75      	ldr	r2, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a72      	ldr	r2, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0xd8>
 8001bd0:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fc32 	bl	8001458 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fc2e 	bl	8001458 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e21f      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff fc1e 	bl	8001458 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fc1a 	bl	8001458 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e20b      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	4b57      	ldr	r3, [pc, #348]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x110>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d069      	beq.n	8001d22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4e:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5a:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d11c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x190>
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d116      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x17a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1df      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	493d      	ldr	r1, [pc, #244]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	e040      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d023      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a38      	ldr	r2, [pc, #224]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fbd0 	bl	8001458 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fbcc 	bl	8001458 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1bd      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4929      	ldr	r1, [pc, #164]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
 8001cee:	e018      	b.n	8001d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf0:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a26      	ldr	r2, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fbac 	bl	8001458 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fba8 	bl	8001458 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e199      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d038      	beq.n	8001da0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d019      	beq.n	8001d6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb89 	bl	8001458 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fb85 	bl	8001458 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e176      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x23a>
 8001d68:	e01a      	b.n	8001da0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6e:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <HAL_RCC_OscConfig+0x280>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff fb6f 	bl	8001458 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fb6b 	bl	8001458 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d903      	bls.n	8001d94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e15c      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
 8001d90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	4b91      	ldr	r3, [pc, #580]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a4 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b8b      	ldr	r3, [pc, #556]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10d      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a87      	ldr	r2, [pc, #540]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b85      	ldr	r3, [pc, #532]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd6:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_RCC_OscConfig+0x4d0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7e      	ldr	r2, [pc, #504]	; (8001fe0 <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fb33 	bl	8001458 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7ff fb2f 	bl	8001458 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	; 0x64
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e120      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e08:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x4d0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x31a>
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a6e      	ldr	r2, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	e02d      	b.n	8001e86 <HAL_RCC_OscConfig+0x376>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x33c>
 8001e32:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a69      	ldr	r2, [pc, #420]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a66      	ldr	r2, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4a:	e01c      	b.n	8001e86 <HAL_RCC_OscConfig+0x376>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x35e>
 8001e54:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a60      	ldr	r2, [pc, #384]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a5d      	ldr	r2, [pc, #372]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCC_OscConfig+0x376>
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a5a      	ldr	r2, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	4b58      	ldr	r3, [pc, #352]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d015      	beq.n	8001eba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fae3 	bl	8001458 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7ff fadf 	bl	8001458 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0ce      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ee      	beq.n	8001e96 <HAL_RCC_OscConfig+0x386>
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff facd 	bl	8001458 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff fac9 	bl	8001458 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0b8      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a3b      	ldr	r2, [pc, #236]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80a4 	beq.w	8002048 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d06b      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d149      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff fa9a 	bl	8001458 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff fa96 	bl	8001458 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e087      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff fa6a 	bl	8001458 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fa66 	bl	8001458 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e057      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x478>
 8001fa6:	e04f      	b.n	8002048 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fa50 	bl	8001458 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff fa4c 	bl	8001458 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e03d      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4ac>
 8001fda:	e035      	b.n	8002048 <HAL_RCC_OscConfig+0x538>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_RCC_OscConfig+0x544>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d028      	beq.n	8002044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d121      	bne.n	8002044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d11a      	bne.n	8002044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002014:	4013      	ands	r3, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800201a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0d0      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d910      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 020f 	bic.w	r2, r3, #15
 8002086:	4965      	ldr	r1, [pc, #404]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b8      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80020be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80020d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	494d      	ldr	r1, [pc, #308]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d040      	beq.n	800217c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d115      	bne.n	800213a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e073      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e06b      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4936      	ldr	r1, [pc, #216]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800214c:	f7ff f984 	bl	8001458 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7ff f980 	bl	8001458 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e053      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d210      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 020f 	bic.w	r2, r3, #15
 8002192:	4922      	ldr	r1, [pc, #136]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e032      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4916      	ldr	r1, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f821 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1cc>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1d0>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1d4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f8e0 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00
 8002220:	40023800 	.word	0x40023800
 8002224:	080085cc 	.word	0x080085cc
 8002228:	20000034 	.word	0x20000034
 800222c:	20000038 	.word	0x20000038

08002230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002234:	b090      	sub	sp, #64	; 0x40
 8002236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
 800223c:	2300      	movs	r3, #0
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d00d      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x40>
 8002254:	2b08      	cmp	r3, #8
 8002256:	f200 80a1 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x16c>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x34>
 800225e:	2b04      	cmp	r3, #4
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x3a>
 8002262:	e09b      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002268:	e09b      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800226a:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800226e:	e098      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002270:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800227a:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d028      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002286:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	099b      	lsrs	r3, r3, #6
 800228c:	2200      	movs	r2, #0
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	627a      	str	r2, [r7, #36]	; 0x24
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002298:	2100      	movs	r1, #0
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800229c:	fb03 f201 	mul.w	r2, r3, r1
 80022a0:	2300      	movs	r3, #0
 80022a2:	fb00 f303 	mul.w	r3, r0, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	4a43      	ldr	r2, [pc, #268]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80022aa:	fba0 1202 	umull	r1, r2, r0, r2
 80022ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022b0:	460a      	mov	r2, r1
 80022b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80022b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b6:	4413      	add	r3, r2
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022bc:	2200      	movs	r2, #0
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	61fa      	str	r2, [r7, #28]
 80022c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022ca:	f7fd fff1 	bl	80002b0 <__aeabi_uldivmod>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4613      	mov	r3, r2
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d6:	e053      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d8:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	2200      	movs	r2, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	617a      	str	r2, [r7, #20]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022ea:	f04f 0b00 	mov.w	fp, #0
 80022ee:	4652      	mov	r2, sl
 80022f0:	465b      	mov	r3, fp
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	0159      	lsls	r1, r3, #5
 80022fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002300:	0150      	lsls	r0, r2, #5
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	ebb2 080a 	subs.w	r8, r2, sl
 800230a:	eb63 090b 	sbc.w	r9, r3, fp
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800231a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800231e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002322:	ebb2 0408 	subs.w	r4, r2, r8
 8002326:	eb63 0509 	sbc.w	r5, r3, r9
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	00eb      	lsls	r3, r5, #3
 8002334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002338:	00e2      	lsls	r2, r4, #3
 800233a:	4614      	mov	r4, r2
 800233c:	461d      	mov	r5, r3
 800233e:	eb14 030a 	adds.w	r3, r4, sl
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	eb45 030b 	adc.w	r3, r5, fp
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002356:	4629      	mov	r1, r5
 8002358:	028b      	lsls	r3, r1, #10
 800235a:	4621      	mov	r1, r4
 800235c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002360:	4621      	mov	r1, r4
 8002362:	028a      	lsls	r2, r1, #10
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	2200      	movs	r2, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002374:	f7fd ff9c 	bl	80002b0 <__aeabi_uldivmod>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4613      	mov	r3, r2
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3740      	adds	r7, #64	; 0x40
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	017d7840 	.word	0x017d7840

080023bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000034 	.word	0x20000034

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	080085dc 	.word	0x080085dc

080023fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002400:	f7ff ffdc 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0b5b      	lsrs	r3, r3, #13
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	080085dc 	.word	0x080085dc

08002424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800244c:	4b69      	ldr	r3, [pc, #420]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a68      	ldr	r2, [pc, #416]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	4964      	ldr	r1, [pc, #400]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d017      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800247e:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	4959      	ldr	r1, [pc, #356]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800249c:	d101      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d017      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	494a      	ldr	r1, [pc, #296]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d8:	d101      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 808b 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4a39      	ldr	r2, [pc, #228]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	; 0x40
 8002514:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002520:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe ff94 	bl	8001458 <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe ff90 	bl	8001458 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e357      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d035      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d02e      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002570:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002590:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d114      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe ff58 	bl	8001458 <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe ff54 	bl	8001458 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e319      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025da:	d111      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ea:	400b      	ands	r3, r1
 80025ec:	4901      	ldr	r1, [pc, #4]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
 80025f2:	e00b      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	0ffffcff 	.word	0x0ffffcff
 8002600:	4baa      	ldr	r3, [pc, #680]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4aa9      	ldr	r2, [pc, #676]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002606:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800260a:	6093      	str	r3, [r2, #8]
 800260c:	4ba7      	ldr	r3, [pc, #668]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	49a4      	ldr	r1, [pc, #656]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261a:	4313      	orrs	r3, r2
 800261c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d010      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800262a:	4ba0      	ldr	r3, [pc, #640]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002630:	4a9e      	ldr	r2, [pc, #632]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800263a:	4b9c      	ldr	r3, [pc, #624]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	4999      	ldr	r1, [pc, #612]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002658:	4b94      	ldr	r3, [pc, #592]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002666:	4991      	ldr	r1, [pc, #580]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800267a:	4b8c      	ldr	r3, [pc, #560]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002688:	4988      	ldr	r1, [pc, #544]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269c:	4b83      	ldr	r3, [pc, #524]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	4980      	ldr	r1, [pc, #512]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026be:	4b7b      	ldr	r3, [pc, #492]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	4977      	ldr	r1, [pc, #476]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e0:	4b72      	ldr	r3, [pc, #456]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	496f      	ldr	r1, [pc, #444]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002702:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f023 020c 	bic.w	r2, r3, #12
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	4966      	ldr	r1, [pc, #408]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002724:	4b61      	ldr	r3, [pc, #388]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	495e      	ldr	r1, [pc, #376]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002746:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	4955      	ldr	r1, [pc, #340]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	494d      	ldr	r1, [pc, #308]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800278a:	4b48      	ldr	r3, [pc, #288]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	4944      	ldr	r1, [pc, #272]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	493c      	ldr	r1, [pc, #240]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027dc:	4933      	ldr	r1, [pc, #204]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fe:	492b      	ldr	r1, [pc, #172]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002812:	4b26      	ldr	r3, [pc, #152]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002820:	4922      	ldr	r1, [pc, #136]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	4912      	ldr	r1, [pc, #72]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002884:	4909      	ldr	r1, [pc, #36]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d006      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80d9 	beq.w	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a01      	ldr	r2, [pc, #4]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028aa:	e001      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b2:	f7fe fdd1 	bl	8001458 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028ba:	f7fe fdcd 	bl	8001458 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b64      	cmp	r3, #100	; 0x64
 80028c6:	d901      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e194      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d021      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11d      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028fa:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002900:	0e1b      	lsrs	r3, r3, #24
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	019a      	lsls	r2, r3, #6
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	431a      	orrs	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	071b      	lsls	r3, r3, #28
 8002920:	4957      	ldr	r1, [pc, #348]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002946:	2b00      	cmp	r3, #0
 8002948:	d02e      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d129      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002954:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002968:	0f1b      	lsrs	r3, r3, #28
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	019a      	lsls	r2, r3, #6
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	431a      	orrs	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	071b      	lsls	r3, r3, #28
 8002988:	493d      	ldr	r1, [pc, #244]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002996:	f023 021f 	bic.w	r2, r3, #31
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	3b01      	subs	r3, #1
 80029a0:	4937      	ldr	r1, [pc, #220]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01d      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ba:	0e1b      	lsrs	r3, r3, #24
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c8:	0f1b      	lsrs	r3, r3, #28
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	019a      	lsls	r2, r3, #6
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	431a      	orrs	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	071b      	lsls	r3, r3, #28
 80029e8:	4925      	ldr	r1, [pc, #148]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d011      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	019a      	lsls	r2, r3, #6
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	071b      	lsls	r3, r3, #28
 8002a18:	4919      	ldr	r1, [pc, #100]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7fe fd14 	bl	8001458 <HAL_GetTick>
 8002a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a34:	f7fe fd10 	bl	8001458 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0d7      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	f040 80cd 	bne.w	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a66:	f7fe fcf7 	bl	8001458 <HAL_GetTick>
 8002a6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a6e:	f7fe fcf3 	bl	8001458 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d903      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0ba      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a84:	4b5e      	ldr	r3, [pc, #376]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a90:	d0ed      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02e      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d12a      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002aba:	4b51      	ldr	r3, [pc, #324]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	0f1b      	lsrs	r3, r3, #28
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	019a      	lsls	r2, r3, #6
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	071b      	lsls	r3, r3, #28
 8002aee:	4944      	ldr	r1, [pc, #272]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002af6:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	493d      	ldr	r1, [pc, #244]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d022      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b24:	d11d      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	0e1b      	lsrs	r3, r3, #24
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b34:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	0f1b      	lsrs	r3, r3, #28
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	019a      	lsls	r2, r3, #6
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	4929      	ldr	r1, [pc, #164]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	0e1b      	lsrs	r3, r3, #24
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b7c:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	019a      	lsls	r2, r3, #6
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	431a      	orrs	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	071b      	lsls	r3, r3, #28
 8002ba2:	4917      	ldr	r1, [pc, #92]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	4911      	ldr	r1, [pc, #68]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fc44 	bl	8001458 <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bd4:	f7fe fc40 	bl	8001458 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e007      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf2:	d1ef      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e040      	b.n	8002c98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fa2e 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2224      	movs	r2, #36	; 0x24
 8002c30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fba2 	bl	800338c <UART_SetConfig>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e022      	b.n	8002c98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fdfa 	bl	8003854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fe81 	bl	8003998 <UART_CheckIdleState>
 8002c96:	4603      	mov	r3, r0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d171      	bne.n	8002d9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_UART_Transmit+0x24>
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e06a      	b.n	8002d9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2221      	movs	r2, #33	; 0x21
 8002cd4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cd6:	f7fe fbbf 	bl	8001458 <HAL_GetTick>
 8002cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf4:	d108      	bne.n	8002d08 <HAL_UART_Transmit+0x68>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d104      	bne.n	8002d08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e003      	b.n	8002d10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d10:	e02c      	b.n	8002d6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fe72 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e038      	b.n	8002d9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	3302      	adds	r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	e007      	b.n	8002d5a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	3301      	adds	r3, #1
 8002d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1cc      	bne.n	8002d12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2140      	movs	r1, #64	; 0x40
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fe3f 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e005      	b.n	8002d9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e000      	b.n	8002d9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
  }
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0ba      	sub	sp, #232	; 0xe8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002dce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002dd2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d115      	bne.n	8002e10 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00f      	beq.n	8002e10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8297 	beq.w	8003334 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
      }
      return;
 8002e0e:	e291      	b.n	8003334 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8117 	beq.w	8003048 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e2a:	4b85      	ldr	r3, [pc, #532]	; (8003040 <HAL_UART_IRQHandler+0x298>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 810a 	beq.w	8003048 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d011      	beq.n	8002e64 <HAL_UART_IRQHandler+0xbc>
 8002e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d011      	beq.n	8002e94 <HAL_UART_IRQHandler+0xec>
 8002e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2202      	movs	r2, #2
 8002e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d011      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x11c>
 8002ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d017      	beq.n	8002f00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2208      	movs	r2, #8
 8002eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef6:	f043 0208 	orr.w	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <HAL_UART_IRQHandler+0x18a>
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 81fd 	beq.w	8003338 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d005      	beq.n	8002f8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d04f      	beq.n	800302a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fe01 	bl	8003b92 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d141      	bne.n	8003022 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1d9      	bne.n	8002f9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d013      	beq.n	800301a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <HAL_UART_IRQHandler+0x29c>)
 8002ff8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fbb7 	bl	8001772 <HAL_DMA_Abort_IT>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d017      	beq.n	800303a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003014:	4610      	mov	r0, r2
 8003016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e00f      	b.n	800303a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f9a0 	bl	8003360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	e00b      	b.n	800303a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f99c 	bl	8003360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	e007      	b.n	800303a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f998 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003038:	e17e      	b.n	8003338 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303a:	bf00      	nop
    return;
 800303c:	e17c      	b.n	8003338 <HAL_UART_IRQHandler+0x590>
 800303e:	bf00      	nop
 8003040:	04000120 	.word	0x04000120
 8003044:	08003c5b 	.word	0x08003c5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304c:	2b01      	cmp	r3, #1
 800304e:	f040 814c 	bne.w	80032ea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8145 	beq.w	80032ea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 813e 	beq.w	80032ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2210      	movs	r2, #16
 8003074:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	f040 80b6 	bne.w	80031f2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003092:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8150 	beq.w	800333c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030a6:	429a      	cmp	r2, r3
 80030a8:	f080 8148 	bcs.w	800333c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c0:	f000 8086 	beq.w	80031d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1da      	bne.n	80030c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3308      	adds	r3, #8
 8003114:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800311e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3308      	adds	r3, #8
 800312e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003132:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003136:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800313a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e1      	bne.n	800310e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3308      	adds	r3, #8
 8003150:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800315a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3308      	adds	r3, #8
 800316a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800316e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003170:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003174:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800317c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e3      	bne.n	800314a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a0:	f023 0310 	bic.w	r3, r3, #16
 80031a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80031b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e4      	bne.n	8003190 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fa61 	bl	8001692 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8c2 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031f0:	e0a4      	b.n	800333c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8096 	beq.w	8003340 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003214:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8091 	beq.w	8003340 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
 8003242:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e4      	bne.n	800321e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	623b      	str	r3, [r7, #32]
   return(result);
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3308      	adds	r3, #8
 8003274:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003278:	633a      	str	r2, [r7, #48]	; 0x30
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800327e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e3      	bne.n	8003254 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	e853 3f00 	ldrex	r3, [r3]
 80032ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f023 0310 	bic.w	r3, r3, #16
 80032b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	69b9      	ldr	r1, [r7, #24]
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	617b      	str	r3, [r7, #20]
   return(result);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1e4      	bne.n	80032a0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f846 	bl	8003374 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032e8:	e02a      	b.n	8003340 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00e      	beq.n	8003314 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01c      	beq.n	8003344 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
    }
    return;
 8003312:	e017      	b.n	8003344 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <HAL_UART_IRQHandler+0x59e>
 8003320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fcaa 	bl	8003c86 <UART_EndTransmit_IT>
    return;
 8003332:	e008      	b.n	8003346 <HAL_UART_IRQHandler+0x59e>
      return;
 8003334:	bf00      	nop
 8003336:	e006      	b.n	8003346 <HAL_UART_IRQHandler+0x59e>
    return;
 8003338:	bf00      	nop
 800333a:	e004      	b.n	8003346 <HAL_UART_IRQHandler+0x59e>
      return;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <HAL_UART_IRQHandler+0x59e>
      return;
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <HAL_UART_IRQHandler+0x59e>
    return;
 8003344:	bf00      	nop
  }

}
 8003346:	37e8      	adds	r7, #232	; 0xe8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4ba6      	ldr	r3, [pc, #664]	; (8003650 <UART_SetConfig+0x2c4>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a94      	ldr	r2, [pc, #592]	; (8003654 <UART_SetConfig+0x2c8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d120      	bne.n	800344a <UART_SetConfig+0xbe>
 8003408:	4b93      	ldr	r3, [pc, #588]	; (8003658 <UART_SetConfig+0x2cc>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b03      	cmp	r3, #3
 8003414:	d816      	bhi.n	8003444 <UART_SetConfig+0xb8>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <UART_SetConfig+0x90>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	0800342d 	.word	0x0800342d
 8003420:	08003439 	.word	0x08003439
 8003424:	08003433 	.word	0x08003433
 8003428:	0800343f 	.word	0x0800343f
 800342c:	2301      	movs	r3, #1
 800342e:	77fb      	strb	r3, [r7, #31]
 8003430:	e150      	b.n	80036d4 <UART_SetConfig+0x348>
 8003432:	2302      	movs	r3, #2
 8003434:	77fb      	strb	r3, [r7, #31]
 8003436:	e14d      	b.n	80036d4 <UART_SetConfig+0x348>
 8003438:	2304      	movs	r3, #4
 800343a:	77fb      	strb	r3, [r7, #31]
 800343c:	e14a      	b.n	80036d4 <UART_SetConfig+0x348>
 800343e:	2308      	movs	r3, #8
 8003440:	77fb      	strb	r3, [r7, #31]
 8003442:	e147      	b.n	80036d4 <UART_SetConfig+0x348>
 8003444:	2310      	movs	r3, #16
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e144      	b.n	80036d4 <UART_SetConfig+0x348>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a83      	ldr	r2, [pc, #524]	; (800365c <UART_SetConfig+0x2d0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d132      	bne.n	80034ba <UART_SetConfig+0x12e>
 8003454:	4b80      	ldr	r3, [pc, #512]	; (8003658 <UART_SetConfig+0x2cc>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d828      	bhi.n	80034b4 <UART_SetConfig+0x128>
 8003462:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <UART_SetConfig+0xdc>)
 8003464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003468:	0800349d 	.word	0x0800349d
 800346c:	080034b5 	.word	0x080034b5
 8003470:	080034b5 	.word	0x080034b5
 8003474:	080034b5 	.word	0x080034b5
 8003478:	080034a9 	.word	0x080034a9
 800347c:	080034b5 	.word	0x080034b5
 8003480:	080034b5 	.word	0x080034b5
 8003484:	080034b5 	.word	0x080034b5
 8003488:	080034a3 	.word	0x080034a3
 800348c:	080034b5 	.word	0x080034b5
 8003490:	080034b5 	.word	0x080034b5
 8003494:	080034b5 	.word	0x080034b5
 8003498:	080034af 	.word	0x080034af
 800349c:	2300      	movs	r3, #0
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e118      	b.n	80036d4 <UART_SetConfig+0x348>
 80034a2:	2302      	movs	r3, #2
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e115      	b.n	80036d4 <UART_SetConfig+0x348>
 80034a8:	2304      	movs	r3, #4
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	e112      	b.n	80036d4 <UART_SetConfig+0x348>
 80034ae:	2308      	movs	r3, #8
 80034b0:	77fb      	strb	r3, [r7, #31]
 80034b2:	e10f      	b.n	80036d4 <UART_SetConfig+0x348>
 80034b4:	2310      	movs	r3, #16
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e10c      	b.n	80036d4 <UART_SetConfig+0x348>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a68      	ldr	r2, [pc, #416]	; (8003660 <UART_SetConfig+0x2d4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d120      	bne.n	8003506 <UART_SetConfig+0x17a>
 80034c4:	4b64      	ldr	r3, [pc, #400]	; (8003658 <UART_SetConfig+0x2cc>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034ce:	2b30      	cmp	r3, #48	; 0x30
 80034d0:	d013      	beq.n	80034fa <UART_SetConfig+0x16e>
 80034d2:	2b30      	cmp	r3, #48	; 0x30
 80034d4:	d814      	bhi.n	8003500 <UART_SetConfig+0x174>
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d009      	beq.n	80034ee <UART_SetConfig+0x162>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d810      	bhi.n	8003500 <UART_SetConfig+0x174>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <UART_SetConfig+0x15c>
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d006      	beq.n	80034f4 <UART_SetConfig+0x168>
 80034e6:	e00b      	b.n	8003500 <UART_SetConfig+0x174>
 80034e8:	2300      	movs	r3, #0
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e0f2      	b.n	80036d4 <UART_SetConfig+0x348>
 80034ee:	2302      	movs	r3, #2
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e0ef      	b.n	80036d4 <UART_SetConfig+0x348>
 80034f4:	2304      	movs	r3, #4
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e0ec      	b.n	80036d4 <UART_SetConfig+0x348>
 80034fa:	2308      	movs	r3, #8
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e0e9      	b.n	80036d4 <UART_SetConfig+0x348>
 8003500:	2310      	movs	r3, #16
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e0e6      	b.n	80036d4 <UART_SetConfig+0x348>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a56      	ldr	r2, [pc, #344]	; (8003664 <UART_SetConfig+0x2d8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d120      	bne.n	8003552 <UART_SetConfig+0x1c6>
 8003510:	4b51      	ldr	r3, [pc, #324]	; (8003658 <UART_SetConfig+0x2cc>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800351a:	2bc0      	cmp	r3, #192	; 0xc0
 800351c:	d013      	beq.n	8003546 <UART_SetConfig+0x1ba>
 800351e:	2bc0      	cmp	r3, #192	; 0xc0
 8003520:	d814      	bhi.n	800354c <UART_SetConfig+0x1c0>
 8003522:	2b80      	cmp	r3, #128	; 0x80
 8003524:	d009      	beq.n	800353a <UART_SetConfig+0x1ae>
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d810      	bhi.n	800354c <UART_SetConfig+0x1c0>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <UART_SetConfig+0x1a8>
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d006      	beq.n	8003540 <UART_SetConfig+0x1b4>
 8003532:	e00b      	b.n	800354c <UART_SetConfig+0x1c0>
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e0cc      	b.n	80036d4 <UART_SetConfig+0x348>
 800353a:	2302      	movs	r3, #2
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e0c9      	b.n	80036d4 <UART_SetConfig+0x348>
 8003540:	2304      	movs	r3, #4
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e0c6      	b.n	80036d4 <UART_SetConfig+0x348>
 8003546:	2308      	movs	r3, #8
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e0c3      	b.n	80036d4 <UART_SetConfig+0x348>
 800354c:	2310      	movs	r3, #16
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e0c0      	b.n	80036d4 <UART_SetConfig+0x348>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a44      	ldr	r2, [pc, #272]	; (8003668 <UART_SetConfig+0x2dc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d125      	bne.n	80035a8 <UART_SetConfig+0x21c>
 800355c:	4b3e      	ldr	r3, [pc, #248]	; (8003658 <UART_SetConfig+0x2cc>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356a:	d017      	beq.n	800359c <UART_SetConfig+0x210>
 800356c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003570:	d817      	bhi.n	80035a2 <UART_SetConfig+0x216>
 8003572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003576:	d00b      	beq.n	8003590 <UART_SetConfig+0x204>
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d811      	bhi.n	80035a2 <UART_SetConfig+0x216>
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <UART_SetConfig+0x1fe>
 8003582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003586:	d006      	beq.n	8003596 <UART_SetConfig+0x20a>
 8003588:	e00b      	b.n	80035a2 <UART_SetConfig+0x216>
 800358a:	2300      	movs	r3, #0
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e0a1      	b.n	80036d4 <UART_SetConfig+0x348>
 8003590:	2302      	movs	r3, #2
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e09e      	b.n	80036d4 <UART_SetConfig+0x348>
 8003596:	2304      	movs	r3, #4
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e09b      	b.n	80036d4 <UART_SetConfig+0x348>
 800359c:	2308      	movs	r3, #8
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e098      	b.n	80036d4 <UART_SetConfig+0x348>
 80035a2:	2310      	movs	r3, #16
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e095      	b.n	80036d4 <UART_SetConfig+0x348>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2f      	ldr	r2, [pc, #188]	; (800366c <UART_SetConfig+0x2e0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d125      	bne.n	80035fe <UART_SetConfig+0x272>
 80035b2:	4b29      	ldr	r3, [pc, #164]	; (8003658 <UART_SetConfig+0x2cc>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c0:	d017      	beq.n	80035f2 <UART_SetConfig+0x266>
 80035c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c6:	d817      	bhi.n	80035f8 <UART_SetConfig+0x26c>
 80035c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035cc:	d00b      	beq.n	80035e6 <UART_SetConfig+0x25a>
 80035ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d2:	d811      	bhi.n	80035f8 <UART_SetConfig+0x26c>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <UART_SetConfig+0x254>
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035dc:	d006      	beq.n	80035ec <UART_SetConfig+0x260>
 80035de:	e00b      	b.n	80035f8 <UART_SetConfig+0x26c>
 80035e0:	2301      	movs	r3, #1
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e076      	b.n	80036d4 <UART_SetConfig+0x348>
 80035e6:	2302      	movs	r3, #2
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e073      	b.n	80036d4 <UART_SetConfig+0x348>
 80035ec:	2304      	movs	r3, #4
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e070      	b.n	80036d4 <UART_SetConfig+0x348>
 80035f2:	2308      	movs	r3, #8
 80035f4:	77fb      	strb	r3, [r7, #31]
 80035f6:	e06d      	b.n	80036d4 <UART_SetConfig+0x348>
 80035f8:	2310      	movs	r3, #16
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e06a      	b.n	80036d4 <UART_SetConfig+0x348>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <UART_SetConfig+0x2e4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d138      	bne.n	800367a <UART_SetConfig+0x2ee>
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <UART_SetConfig+0x2cc>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003612:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003616:	d017      	beq.n	8003648 <UART_SetConfig+0x2bc>
 8003618:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800361c:	d82a      	bhi.n	8003674 <UART_SetConfig+0x2e8>
 800361e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003622:	d00b      	beq.n	800363c <UART_SetConfig+0x2b0>
 8003624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003628:	d824      	bhi.n	8003674 <UART_SetConfig+0x2e8>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <UART_SetConfig+0x2aa>
 800362e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003632:	d006      	beq.n	8003642 <UART_SetConfig+0x2b6>
 8003634:	e01e      	b.n	8003674 <UART_SetConfig+0x2e8>
 8003636:	2300      	movs	r3, #0
 8003638:	77fb      	strb	r3, [r7, #31]
 800363a:	e04b      	b.n	80036d4 <UART_SetConfig+0x348>
 800363c:	2302      	movs	r3, #2
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e048      	b.n	80036d4 <UART_SetConfig+0x348>
 8003642:	2304      	movs	r3, #4
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e045      	b.n	80036d4 <UART_SetConfig+0x348>
 8003648:	2308      	movs	r3, #8
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e042      	b.n	80036d4 <UART_SetConfig+0x348>
 800364e:	bf00      	nop
 8003650:	efff69f3 	.word	0xefff69f3
 8003654:	40011000 	.word	0x40011000
 8003658:	40023800 	.word	0x40023800
 800365c:	40004400 	.word	0x40004400
 8003660:	40004800 	.word	0x40004800
 8003664:	40004c00 	.word	0x40004c00
 8003668:	40005000 	.word	0x40005000
 800366c:	40011400 	.word	0x40011400
 8003670:	40007800 	.word	0x40007800
 8003674:	2310      	movs	r3, #16
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e02c      	b.n	80036d4 <UART_SetConfig+0x348>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a72      	ldr	r2, [pc, #456]	; (8003848 <UART_SetConfig+0x4bc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d125      	bne.n	80036d0 <UART_SetConfig+0x344>
 8003684:	4b71      	ldr	r3, [pc, #452]	; (800384c <UART_SetConfig+0x4c0>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800368e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003692:	d017      	beq.n	80036c4 <UART_SetConfig+0x338>
 8003694:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003698:	d817      	bhi.n	80036ca <UART_SetConfig+0x33e>
 800369a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369e:	d00b      	beq.n	80036b8 <UART_SetConfig+0x32c>
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a4:	d811      	bhi.n	80036ca <UART_SetConfig+0x33e>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <UART_SetConfig+0x326>
 80036aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ae:	d006      	beq.n	80036be <UART_SetConfig+0x332>
 80036b0:	e00b      	b.n	80036ca <UART_SetConfig+0x33e>
 80036b2:	2300      	movs	r3, #0
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e00d      	b.n	80036d4 <UART_SetConfig+0x348>
 80036b8:	2302      	movs	r3, #2
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e00a      	b.n	80036d4 <UART_SetConfig+0x348>
 80036be:	2304      	movs	r3, #4
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e007      	b.n	80036d4 <UART_SetConfig+0x348>
 80036c4:	2308      	movs	r3, #8
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e004      	b.n	80036d4 <UART_SetConfig+0x348>
 80036ca:	2310      	movs	r3, #16
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e001      	b.n	80036d4 <UART_SetConfig+0x348>
 80036d0:	2310      	movs	r3, #16
 80036d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036dc:	d15b      	bne.n	8003796 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036de:	7ffb      	ldrb	r3, [r7, #31]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d828      	bhi.n	8003736 <UART_SetConfig+0x3aa>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <UART_SetConfig+0x360>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003719 	.word	0x08003719
 80036f4:	08003721 	.word	0x08003721
 80036f8:	08003737 	.word	0x08003737
 80036fc:	08003727 	.word	0x08003727
 8003700:	08003737 	.word	0x08003737
 8003704:	08003737 	.word	0x08003737
 8003708:	08003737 	.word	0x08003737
 800370c:	0800372f 	.word	0x0800372f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003710:	f7fe fe60 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8003714:	61b8      	str	r0, [r7, #24]
        break;
 8003716:	e013      	b.n	8003740 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7fe fe70 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 800371c:	61b8      	str	r0, [r7, #24]
        break;
 800371e:	e00f      	b.n	8003740 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003720:	4b4b      	ldr	r3, [pc, #300]	; (8003850 <UART_SetConfig+0x4c4>)
 8003722:	61bb      	str	r3, [r7, #24]
        break;
 8003724:	e00c      	b.n	8003740 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003726:	f7fe fd83 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 800372a:	61b8      	str	r0, [r7, #24]
        break;
 800372c:	e008      	b.n	8003740 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e004      	b.n	8003740 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	77bb      	strb	r3, [r7, #30]
        break;
 800373e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d074      	beq.n	8003830 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	005a      	lsls	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b0f      	cmp	r3, #15
 8003760:	d916      	bls.n	8003790 <UART_SetConfig+0x404>
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d212      	bcs.n	8003790 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	b29b      	uxth	r3, r3
 800376e:	f023 030f 	bic.w	r3, r3, #15
 8003772:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	b29b      	uxth	r3, r3
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	b29a      	uxth	r2, r3
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	4313      	orrs	r3, r2
 8003784:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	89fa      	ldrh	r2, [r7, #14]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	e04f      	b.n	8003830 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	77bb      	strb	r3, [r7, #30]
 8003794:	e04c      	b.n	8003830 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d828      	bhi.n	80037ee <UART_SetConfig+0x462>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <UART_SetConfig+0x418>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037c9 	.word	0x080037c9
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037d9 	.word	0x080037d9
 80037b0:	080037ef 	.word	0x080037ef
 80037b4:	080037df 	.word	0x080037df
 80037b8:	080037ef 	.word	0x080037ef
 80037bc:	080037ef 	.word	0x080037ef
 80037c0:	080037ef 	.word	0x080037ef
 80037c4:	080037e7 	.word	0x080037e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c8:	f7fe fe04 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 80037cc:	61b8      	str	r0, [r7, #24]
        break;
 80037ce:	e013      	b.n	80037f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d0:	f7fe fe14 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 80037d4:	61b8      	str	r0, [r7, #24]
        break;
 80037d6:	e00f      	b.n	80037f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <UART_SetConfig+0x4c4>)
 80037da:	61bb      	str	r3, [r7, #24]
        break;
 80037dc:	e00c      	b.n	80037f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037de:	f7fe fd27 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80037e2:	61b8      	str	r0, [r7, #24]
        break;
 80037e4:	e008      	b.n	80037f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ea:	61bb      	str	r3, [r7, #24]
        break;
 80037ec:	e004      	b.n	80037f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	77bb      	strb	r3, [r7, #30]
        break;
 80037f6:	bf00      	nop
    }

    if (pclk != 0U)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	085a      	lsrs	r2, r3, #1
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d909      	bls.n	800382c <UART_SetConfig+0x4a0>
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d205      	bcs.n	800382c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	e001      	b.n	8003830 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800383c:	7fbb      	ldrb	r3, [r7, #30]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40007c00 	.word	0x40007c00
 800384c:	40023800 	.word	0x40023800
 8003850:	00f42400 	.word	0x00f42400

08003854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01a      	beq.n	800396a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003952:	d10a      	bne.n	800396a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a8:	f7fd fd56 	bl	8001458 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d10e      	bne.n	80039da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f81b 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e011      	b.n	80039fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b09c      	sub	sp, #112	; 0x70
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a16:	e0a7      	b.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	f000 80a3 	beq.w	8003b68 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fd fd19 	bl	8001458 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d13f      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e6      	bne.n	8003a38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3308      	adds	r3, #8
 8003a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	663b      	str	r3, [r7, #96]	; 0x60
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3308      	adds	r3, #8
 8003a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e5      	bne.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e068      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d050      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad4:	d148      	bne.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ade:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003af4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
 8003b00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e6      	bne.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	613b      	str	r3, [r7, #16]
   return(result);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b32:	623a      	str	r2, [r7, #32]
 8003b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	69f9      	ldr	r1, [r7, #28]
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e5      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e010      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	f43f af48 	beq.w	8003a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3770      	adds	r7, #112	; 0x70
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b095      	sub	sp, #84	; 0x54
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e6      	bne.n	8003b9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e5      	bne.n	8003bcc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d118      	bne.n	8003c3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f023 0310 	bic.w	r3, r3, #16
 8003c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6979      	ldr	r1, [r7, #20]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	613b      	str	r3, [r7, #16]
   return(result);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e6      	bne.n	8003c08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c4e:	bf00      	nop
 8003c50:	3754      	adds	r7, #84	; 0x54
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fb71 	bl	8003360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b088      	sub	sp, #32
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6979      	ldr	r1, [r7, #20]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e6      	bne.n	8003c8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fb3d 	bl	800334c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd2:	bf00      	nop
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <vApplicationGetIdleTaskMemory+0x2c>)
 8003cec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4a06      	ldr	r2, [pc, #24]	; (8003d0c <vApplicationGetIdleTaskMemory+0x30>)
 8003cf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2232      	movs	r2, #50	; 0x32
 8003cf8:	601a      	str	r2, [r3, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	200001b8 	.word	0x200001b8
 8003d0c:	20000224 	.word	0x20000224

08003d10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <vApplicationGetTimerTaskMemory+0x2c>)
 8003d20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a06      	ldr	r2, [pc, #24]	; (8003d40 <vApplicationGetTimerTaskMemory+0x30>)
 8003d26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d2e:	601a      	str	r2, [r3, #0]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	200002ec 	.word	0x200002ec
 8003d40:	20000358 	.word	0x20000358

08003d44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f103 0208 	add.w	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f103 0208 	add.w	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f103 0208 	add.w	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d103      	bne.n	8003e06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e00c      	b.n	8003e20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3308      	adds	r3, #8
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e002      	b.n	8003e14 <vListInsert+0x2e>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d2f6      	bcs.n	8003e0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	601a      	str	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6892      	ldr	r2, [r2, #8]
 8003e6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6852      	ldr	r2, [r2, #4]
 8003e78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d103      	bne.n	8003e8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	1e5a      	subs	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10c      	bne.n	8003eda <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	b672      	cpsid	i
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	b662      	cpsie	i
 8003ed4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8003eda:	f002 fc6f 	bl	80067bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d114      	bne.n	8003f5a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01a      	beq.n	8003f6e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3310      	adds	r3, #16
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fc29 	bl	8005794 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <xQueueGenericReset+0xd0>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	e009      	b.n	8003f6e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3310      	adds	r3, #16
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fef0 	bl	8003d44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3324      	adds	r3, #36	; 0x24
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff feeb 	bl	8003d44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f002 fc59 	bl	8006824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f72:	2301      	movs	r3, #1
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08e      	sub	sp, #56	; 0x38
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10c      	bne.n	8003fae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	b672      	cpsid	i
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	b662      	cpsie	i
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10c      	bne.n	8003fce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	b672      	cpsid	i
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	b662      	cpsie	i
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <xQueueGenericCreateStatic+0x5a>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <xQueueGenericCreateStatic+0x5e>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <xQueueGenericCreateStatic+0x60>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10c      	bne.n	8003ffe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	b672      	cpsid	i
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	b662      	cpsie	i
 8003ff8:	623b      	str	r3, [r7, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <xQueueGenericCreateStatic+0x8a>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <xQueueGenericCreateStatic+0x8e>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <xQueueGenericCreateStatic+0x90>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10c      	bne.n	800402e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	b672      	cpsid	i
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	b662      	cpsie	i
 8004028:	61fb      	str	r3, [r7, #28]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800402e:	2350      	movs	r3, #80	; 0x50
 8004030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b50      	cmp	r3, #80	; 0x50
 8004036:	d00c      	beq.n	8004052 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	b672      	cpsid	i
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	b662      	cpsie	i
 800404c:	61bb      	str	r3, [r7, #24]
}
 800404e:	bf00      	nop
 8004050:	e7fe      	b.n	8004050 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004052:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004066:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f847 	bl	8004108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800407c:	4618      	mov	r0, r3
 800407e:	3730      	adds	r7, #48	; 0x30
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10c      	bne.n	80040b2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	b672      	cpsid	i
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	b662      	cpsie	i
 80040ac:	613b      	str	r3, [r7, #16]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	e004      	b.n	80040c8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3350      	adds	r3, #80	; 0x50
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 fca1 	bl	8006a14 <pvPortMalloc>
 80040d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d011      	beq.n	80040fe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3350      	adds	r3, #80	; 0x50
 80040e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ec:	79fa      	ldrb	r2, [r7, #7]
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f805 	bl	8004108 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040fe:	69bb      	ldr	r3, [r7, #24]
	}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d103      	bne.n	8004124 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e002      	b.n	800412a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004136:	2101      	movs	r1, #1
 8004138:	69b8      	ldr	r0, [r7, #24]
 800413a:	f7ff feb7 	bl	8003eac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	b672      	cpsid	i
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	b662      	cpsie	i
 8004172:	613b      	str	r3, [r7, #16]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d90c      	bls.n	800419a <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	b672      	cpsid	i
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	b662      	cpsie	i
 8004194:	60fb      	str	r3, [r7, #12]
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800419a:	2202      	movs	r2, #2
 800419c:	2100      	movs	r1, #0
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ff70 	bl	8004084 <xQueueGenericCreate>
 80041a4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80041b2:	697b      	ldr	r3, [r7, #20]
	}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08e      	sub	sp, #56	; 0x38
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041ca:	2300      	movs	r3, #0
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10c      	bne.n	80041f2 <xQueueGenericSend+0x36>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	b672      	cpsid	i
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	b662      	cpsie	i
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <xQueueGenericSend+0x44>
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <xQueueGenericSend+0x48>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <xQueueGenericSend+0x4a>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10c      	bne.n	8004224 <xQueueGenericSend+0x68>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420e:	b672      	cpsid	i
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	b662      	cpsie	i
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004220:	bf00      	nop
 8004222:	e7fe      	b.n	8004222 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d103      	bne.n	8004232 <xQueueGenericSend+0x76>
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <xQueueGenericSend+0x7a>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <xQueueGenericSend+0x7c>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10c      	bne.n	8004256 <xQueueGenericSend+0x9a>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	b672      	cpsid	i
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	b662      	cpsie	i
 8004250:	623b      	str	r3, [r7, #32]
}
 8004252:	bf00      	nop
 8004254:	e7fe      	b.n	8004254 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004256:	f001 fc63 	bl	8005b20 <xTaskGetSchedulerState>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <xQueueGenericSend+0xaa>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <xQueueGenericSend+0xae>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <xQueueGenericSend+0xb0>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10c      	bne.n	800428a <xQueueGenericSend+0xce>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	b672      	cpsid	i
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	b662      	cpsie	i
 8004284:	61fb      	str	r3, [r7, #28]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800428a:	f002 fa97 	bl	80067bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <xQueueGenericSend+0xe4>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d129      	bne.n	80042f4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042a6:	f000 fb61 	bl	800496c <prvCopyDataToQueue>
 80042aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	3324      	adds	r3, #36	; 0x24
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 fa6b 	bl	8005794 <xTaskRemoveFromEventList>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042c4:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <xQueueGenericSend+0x208>)
 80042c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	e00a      	b.n	80042ec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <xQueueGenericSend+0x208>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042ec:	f002 fa9a 	bl	8006824 <vPortExitCritical>
				return pdPASS;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e063      	b.n	80043bc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042fa:	f002 fa93 	bl	8006824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	e05c      	b.n	80043bc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	4618      	mov	r0, r3
 800430e:	f001 faa7 	bl	8005860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004316:	f002 fa85 	bl	8006824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800431a:	f001 f80d 	bl	8005338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800431e:	f002 fa4d 	bl	80067bc <vPortEnterCritical>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004328:	b25b      	sxtb	r3, r3
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d103      	bne.n	8004338 <xQueueGenericSend+0x17c>
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800433e:	b25b      	sxtb	r3, r3
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004344:	d103      	bne.n	800434e <xQueueGenericSend+0x192>
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800434e:	f002 fa69 	bl	8006824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004352:	1d3a      	adds	r2, r7, #4
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f001 fa96 	bl	800588c <xTaskCheckForTimeOut>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d124      	bne.n	80043b0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004368:	f000 fbf8 	bl	8004b5c <prvIsQueueFull>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d018      	beq.n	80043a4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	3310      	adds	r3, #16
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f001 f9b6 	bl	80056ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004382:	f000 fb83 	bl	8004a8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004386:	f000 ffe5 	bl	8005354 <xTaskResumeAll>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	f47f af7c 	bne.w	800428a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <xQueueGenericSend+0x208>)
 8004394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	e772      	b.n	800428a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a6:	f000 fb71 	bl	8004a8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043aa:	f000 ffd3 	bl	8005354 <xTaskResumeAll>
 80043ae:	e76c      	b.n	800428a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043b2:	f000 fb6b 	bl	8004a8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043b6:	f000 ffcd 	bl	8005354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3738      	adds	r7, #56	; 0x38
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	; 0x38
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10c      	bne.n	80043fa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	b672      	cpsid	i
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	b662      	cpsie	i
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <xQueueGenericSendFromISR+0x40>
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <xQueueGenericSendFromISR+0x44>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <xQueueGenericSendFromISR+0x46>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10c      	bne.n	800442c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	b672      	cpsid	i
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	b662      	cpsie	i
 8004426:	623b      	str	r3, [r7, #32]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d103      	bne.n	800443a <xQueueGenericSendFromISR+0x72>
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <xQueueGenericSendFromISR+0x76>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <xQueueGenericSendFromISR+0x78>
 800443e:	2300      	movs	r3, #0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10c      	bne.n	800445e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	b672      	cpsid	i
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	b662      	cpsie	i
 8004458:	61fb      	str	r3, [r7, #28]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800445e:	f002 fa95 	bl	800698c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004462:	f3ef 8211 	mrs	r2, BASEPRI
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	b672      	cpsid	i
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	b662      	cpsie	i
 800447a:	61ba      	str	r2, [r7, #24]
 800447c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800447e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <xQueueGenericSendFromISR+0xcc>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d12c      	bne.n	80044ee <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044a4:	f000 fa62 	bl	800496c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044a8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d112      	bne.n	80044d8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	3324      	adds	r3, #36	; 0x24
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 f968 	bl	8005794 <xTaskRemoveFromEventList>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e007      	b.n	80044e8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044dc:	3301      	adds	r3, #1
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	b25a      	sxtb	r2, r3
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044e8:	2301      	movs	r3, #1
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80044ec:	e001      	b.n	80044f2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004500:	4618      	mov	r0, r3
 8004502:	3738      	adds	r7, #56	; 0x38
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08c      	sub	sp, #48	; 0x30
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004514:	2300      	movs	r3, #0
 8004516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <xQueueReceive+0x34>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	b672      	cpsid	i
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	b662      	cpsie	i
 8004536:	623b      	str	r3, [r7, #32]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <xQueueReceive+0x42>
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <xQueueReceive+0x46>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <xQueueReceive+0x48>
 800454e:	2300      	movs	r3, #0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10c      	bne.n	800456e <xQueueReceive+0x66>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	b672      	cpsid	i
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	b662      	cpsie	i
 8004568:	61fb      	str	r3, [r7, #28]
}
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800456e:	f001 fad7 	bl	8005b20 <xTaskGetSchedulerState>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <xQueueReceive+0x76>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <xQueueReceive+0x7a>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <xQueueReceive+0x7c>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10c      	bne.n	80045a2 <xQueueReceive+0x9a>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	b672      	cpsid	i
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	b662      	cpsie	i
 800459c:	61bb      	str	r3, [r7, #24]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045a2:	f002 f90b 	bl	80067bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01f      	beq.n	80045f2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045b6:	f000 fa43 	bl	8004a40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	1e5a      	subs	r2, r3, #1
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00f      	beq.n	80045ea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	3310      	adds	r3, #16
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 f8e0 	bl	8005794 <xTaskRemoveFromEventList>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045da:	4b3d      	ldr	r3, [pc, #244]	; (80046d0 <xQueueReceive+0x1c8>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045ea:	f002 f91b 	bl	8006824 <vPortExitCritical>
				return pdPASS;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e069      	b.n	80046c6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045f8:	f002 f914 	bl	8006824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e062      	b.n	80046c6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004606:	f107 0310 	add.w	r3, r7, #16
 800460a:	4618      	mov	r0, r3
 800460c:	f001 f928 	bl	8005860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004614:	f002 f906 	bl	8006824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004618:	f000 fe8e 	bl	8005338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800461c:	f002 f8ce 	bl	80067bc <vPortEnterCritical>
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004626:	b25b      	sxtb	r3, r3
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d103      	bne.n	8004636 <xQueueReceive+0x12e>
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800463c:	b25b      	sxtb	r3, r3
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d103      	bne.n	800464c <xQueueReceive+0x144>
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800464c:	f002 f8ea 	bl	8006824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004650:	1d3a      	adds	r2, r7, #4
 8004652:	f107 0310 	add.w	r3, r7, #16
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f001 f917 	bl	800588c <xTaskCheckForTimeOut>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d123      	bne.n	80046ac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004666:	f000 fa63 	bl	8004b30 <prvIsQueueEmpty>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d017      	beq.n	80046a0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	3324      	adds	r3, #36	; 0x24
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f837 	bl	80056ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800467e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004680:	f000 fa04 	bl	8004a8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004684:	f000 fe66 	bl	8005354 <xTaskResumeAll>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d189      	bne.n	80045a2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <xQueueReceive+0x1c8>)
 8004690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	e780      	b.n	80045a2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a2:	f000 f9f3 	bl	8004a8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046a6:	f000 fe55 	bl	8005354 <xTaskResumeAll>
 80046aa:	e77a      	b.n	80045a2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ae:	f000 f9ed 	bl	8004a8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046b2:	f000 fe4f 	bl	8005354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b8:	f000 fa3a 	bl	8004b30 <prvIsQueueEmpty>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f43f af6f 	beq.w	80045a2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3730      	adds	r7, #48	; 0x30
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08e      	sub	sp, #56	; 0x38
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046de:	2300      	movs	r3, #0
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10c      	bne.n	800470a <xQueueSemaphoreTake+0x36>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	b672      	cpsid	i
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	b662      	cpsie	i
 8004704:	623b      	str	r3, [r7, #32]
}
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	b672      	cpsid	i
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	b662      	cpsie	i
 8004726:	61fb      	str	r3, [r7, #28]
}
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800472c:	f001 f9f8 	bl	8005b20 <xTaskGetSchedulerState>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <xQueueSemaphoreTake+0x68>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <xQueueSemaphoreTake+0x6c>
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <xQueueSemaphoreTake+0x6e>
 8004740:	2300      	movs	r3, #0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10c      	bne.n	8004760 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	b672      	cpsid	i
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	b662      	cpsie	i
 800475a:	61bb      	str	r3, [r7, #24]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004760:	f002 f82c 	bl	80067bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d024      	beq.n	80047ba <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	1e5a      	subs	r2, r3, #1
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004780:	f001 fb4c 	bl	8005e1c <pvTaskIncrementMutexHeldCount>
 8004784:	4602      	mov	r2, r0
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00f      	beq.n	80047b2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	3310      	adds	r3, #16
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fffc 	bl	8005794 <xTaskRemoveFromEventList>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047a2:	4b55      	ldr	r3, [pc, #340]	; (80048f8 <xQueueSemaphoreTake+0x224>)
 80047a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047b2:	f002 f837 	bl	8006824 <vPortExitCritical>
				return pdPASS;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e099      	b.n	80048ee <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d113      	bne.n	80047e8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80047c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ca:	b672      	cpsid	i
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	b662      	cpsie	i
 80047da:	617b      	str	r3, [r7, #20]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047e0:	f002 f820 	bl	8006824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e082      	b.n	80048ee <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 f834 	bl	8005860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047fc:	f002 f812 	bl	8006824 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004800:	f000 fd9a 	bl	8005338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004804:	f001 ffda 	bl	80067bc <vPortEnterCritical>
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800480e:	b25b      	sxtb	r3, r3
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d103      	bne.n	800481e <xQueueSemaphoreTake+0x14a>
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004824:	b25b      	sxtb	r3, r3
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d103      	bne.n	8004834 <xQueueSemaphoreTake+0x160>
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004834:	f001 fff6 	bl	8006824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004838:	463a      	mov	r2, r7
 800483a:	f107 030c 	add.w	r3, r7, #12
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f823 	bl	800588c <xTaskCheckForTimeOut>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d132      	bne.n	80048b2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800484c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800484e:	f000 f96f 	bl	8004b30 <prvIsQueueEmpty>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d026      	beq.n	80048a6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004860:	f001 ffac 	bl	80067bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f001 f977 	bl	8005b5c <xTaskPriorityInherit>
 800486e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004870:	f001 ffd8 	bl	8006824 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	3324      	adds	r3, #36	; 0x24
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f000 ff35 	bl	80056ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004882:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004884:	f000 f902 	bl	8004a8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004888:	f000 fd64 	bl	8005354 <xTaskResumeAll>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	f47f af66 	bne.w	8004760 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8004894:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <xQueueSemaphoreTake+0x224>)
 8004896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	e75c      	b.n	8004760 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80048a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048a8:	f000 f8f0 	bl	8004a8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ac:	f000 fd52 	bl	8005354 <xTaskResumeAll>
 80048b0:	e756      	b.n	8004760 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80048b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048b4:	f000 f8ea 	bl	8004a8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048b8:	f000 fd4c 	bl	8005354 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048be:	f000 f937 	bl	8004b30 <prvIsQueueEmpty>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f43f af4b 	beq.w	8004760 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80048d0:	f001 ff74 	bl	80067bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048d6:	f000 f831 	bl	800493c <prvGetDisinheritPriorityAfterTimeout>
 80048da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 fa14 	bl	8005d10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048e8:	f001 ff9c 	bl	8006824 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3738      	adds	r7, #56	; 0x38
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10c      	bne.n	8004924 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	b672      	cpsid	i
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	b662      	cpsie	i
 800491e:	60bb      	str	r3, [r7, #8]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8004924:	f001 ff4a 	bl	80067bc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800492e:	f001 ff79 	bl	8006824 <vPortExitCritical>

	return uxReturn;
 8004932:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	d006      	beq.n	800495a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1c3 030a 	rsb	r3, r3, #10
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e001      	b.n	800495e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800495e:	68fb      	ldr	r3, [r7, #12]
	}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10d      	bne.n	80049a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d14d      	bne.n	8004a2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	4618      	mov	r0, r3
 8004998:	f001 f948 	bl	8005c2c <xTaskPriorityDisinherit>
 800499c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	e043      	b.n	8004a2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d119      	bne.n	80049e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6858      	ldr	r0, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	461a      	mov	r2, r3
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	f002 fcbe 	bl	8007338 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	441a      	add	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d32b      	bcc.n	8004a2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	e026      	b.n	8004a2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	68d8      	ldr	r0, [r3, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	461a      	mov	r2, r3
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	f002 fca4 	bl	8007338 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	425b      	negs	r3, r3
 80049fa:	441a      	add	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d207      	bcs.n	8004a1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	425b      	negs	r3, r3
 8004a16:	441a      	add	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d105      	bne.n	8004a2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a36:	697b      	ldr	r3, [r7, #20]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d018      	beq.n	8004a84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	441a      	add	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d303      	bcc.n	8004a74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68d9      	ldr	r1, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6838      	ldr	r0, [r7, #0]
 8004a80:	f002 fc5a 	bl	8007338 <memcpy>
	}
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a94:	f001 fe92 	bl	80067bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aa0:	e011      	b.n	8004ac6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d012      	beq.n	8004ad0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3324      	adds	r3, #36	; 0x24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fe70 	bl	8005794 <xTaskRemoveFromEventList>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004aba:	f000 ff4d 	bl	8005958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dce9      	bgt.n	8004aa2 <prvUnlockQueue+0x16>
 8004ace:	e000      	b.n	8004ad2 <prvUnlockQueue+0x46>
					break;
 8004ad0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	22ff      	movs	r2, #255	; 0xff
 8004ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ada:	f001 fea3 	bl	8006824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ade:	f001 fe6d 	bl	80067bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aea:	e011      	b.n	8004b10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d012      	beq.n	8004b1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3310      	adds	r3, #16
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fe4b 	bl	8005794 <xTaskRemoveFromEventList>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b04:	f000 ff28 	bl	8005958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	dce9      	bgt.n	8004aec <prvUnlockQueue+0x60>
 8004b18:	e000      	b.n	8004b1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	22ff      	movs	r2, #255	; 0xff
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b24:	f001 fe7e 	bl	8006824 <vPortExitCritical>
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b38:	f001 fe40 	bl	80067bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e001      	b.n	8004b4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b4e:	f001 fe69 	bl	8006824 <vPortExitCritical>

	return xReturn;
 8004b52:	68fb      	ldr	r3, [r7, #12]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b64:	f001 fe2a 	bl	80067bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d102      	bne.n	8004b7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e001      	b.n	8004b7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b7e:	f001 fe51 	bl	8006824 <vPortExitCritical>

	return xReturn;
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e014      	b.n	8004bc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b9c:	4a0f      	ldr	r2, [pc, #60]	; (8004bdc <vQueueAddToRegistry+0x50>)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10b      	bne.n	8004bc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ba8:	490c      	ldr	r1, [pc, #48]	; (8004bdc <vQueueAddToRegistry+0x50>)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <vQueueAddToRegistry+0x50>)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bbe:	e006      	b.n	8004bce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b09      	cmp	r3, #9
 8004bca:	d9e7      	bls.n	8004b9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000758 	.word	0x20000758

08004be0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bf0:	f001 fde4 	bl	80067bc <vPortEnterCritical>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d103      	bne.n	8004c0a <vQueueWaitForMessageRestricted+0x2a>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d103      	bne.n	8004c20 <vQueueWaitForMessageRestricted+0x40>
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c20:	f001 fe00 	bl	8006824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	3324      	adds	r3, #36	; 0x24
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fd7f 	bl	8005738 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f7ff ff26 	bl	8004a8c <prvUnlockQueue>
	}
 8004c40:	bf00      	nop
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08e      	sub	sp, #56	; 0x38
 8004c4c:	af04      	add	r7, sp, #16
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10c      	bne.n	8004c76 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	b672      	cpsid	i
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	b662      	cpsie	i
 8004c70:	623b      	str	r3, [r7, #32]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10c      	bne.n	8004c96 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	b672      	cpsid	i
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	b662      	cpsie	i
 8004c90:	61fb      	str	r3, [r7, #28]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c96:	236c      	movs	r3, #108	; 0x6c
 8004c98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b6c      	cmp	r3, #108	; 0x6c
 8004c9e:	d00c      	beq.n	8004cba <xTaskCreateStatic+0x72>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	b672      	cpsid	i
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	b662      	cpsie	i
 8004cb4:	61bb      	str	r3, [r7, #24]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01e      	beq.n	8004d00 <xTaskCreateStatic+0xb8>
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01b      	beq.n	8004d00 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9303      	str	r3, [sp, #12]
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	9302      	str	r3, [sp, #8]
 8004ce2:	f107 0314 	add.w	r3, r7, #20
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f850 	bl	8004d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cfa:	f000 f8df 	bl	8004ebc <prvAddNewTaskToReadyList>
 8004cfe:	e001      	b.n	8004d04 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d04:	697b      	ldr	r3, [r7, #20]
	}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3728      	adds	r7, #40	; 0x28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b08c      	sub	sp, #48	; 0x30
 8004d12:	af04      	add	r7, sp, #16
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 fe76 	bl	8006a14 <pvPortMalloc>
 8004d28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00e      	beq.n	8004d4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d30:	206c      	movs	r0, #108	; 0x6c
 8004d32:	f001 fe6f 	bl	8006a14 <pvPortMalloc>
 8004d36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
 8004d44:	e005      	b.n	8004d52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	f001 ff2e 	bl	8006ba8 <vPortFree>
 8004d4c:	e001      	b.n	8004d52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d017      	beq.n	8004d88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9303      	str	r3, [sp, #12]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	9302      	str	r3, [sp, #8]
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f80e 	bl	8004d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d7c:	69f8      	ldr	r0, [r7, #28]
 8004d7e:	f000 f89d 	bl	8004ebc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e002      	b.n	8004d8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	461a      	mov	r2, r3
 8004db0:	21a5      	movs	r1, #165	; 0xa5
 8004db2:	f002 fa47 	bl	8007244 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004dc0:	440b      	add	r3, r1
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00c      	beq.n	8004df4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	b672      	cpsid	i
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	b662      	cpsie	i
 8004dee:	617b      	str	r3, [r7, #20]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01f      	beq.n	8004e3a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	e012      	b.n	8004e26 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	7819      	ldrb	r1, [r3, #0]
 8004e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3334      	adds	r3, #52	; 0x34
 8004e10:	460a      	mov	r2, r1
 8004e12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d006      	beq.n	8004e2e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	3301      	adds	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2b1d      	cmp	r3, #29
 8004e2a:	d9e9      	bls.n	8004e00 <prvInitialiseNewTask+0x68>
 8004e2c:	e000      	b.n	8004e30 <prvInitialiseNewTask+0x98>
			{
				break;
 8004e2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004e38:	e003      	b.n	8004e42 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d901      	bls.n	8004e4c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e48:	2309      	movs	r3, #9
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e56:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	3304      	adds	r3, #4
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe ff8e 	bl	8003d84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	3318      	adds	r3, #24
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe ff89 	bl	8003d84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	f1c3 020a 	rsb	r2, r3, #10
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	68f9      	ldr	r1, [r7, #12]
 8004e9a:	69b8      	ldr	r0, [r7, #24]
 8004e9c:	f001 fb82 	bl	80065a4 <pxPortInitialiseStack>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ec4:	f001 fc7a 	bl	80067bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <prvAddNewTaskToReadyList+0xc4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	4a2c      	ldr	r2, [pc, #176]	; (8004f80 <prvAddNewTaskToReadyList+0xc4>)
 8004ed0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ed2:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <prvAddNewTaskToReadyList+0xc8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004eda:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <prvAddNewTaskToReadyList+0xc8>)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ee0:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <prvAddNewTaskToReadyList+0xc4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d110      	bne.n	8004f0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ee8:	f000 fd5a 	bl	80059a0 <prvInitialiseTaskLists>
 8004eec:	e00d      	b.n	8004f0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eee:	4b26      	ldr	r3, [pc, #152]	; (8004f88 <prvAddNewTaskToReadyList+0xcc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ef6:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <prvAddNewTaskToReadyList+0xc8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d802      	bhi.n	8004f0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <prvAddNewTaskToReadyList+0xc8>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f0a:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <prvAddNewTaskToReadyList+0xd0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <prvAddNewTaskToReadyList+0xd0>)
 8004f12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <prvAddNewTaskToReadyList+0xd0>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <prvAddNewTaskToReadyList+0xd4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d903      	bls.n	8004f30 <prvAddNewTaskToReadyList+0x74>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <prvAddNewTaskToReadyList+0xd4>)
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <prvAddNewTaskToReadyList+0xd8>)
 8004f3e:	441a      	add	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f7fe ff29 	bl	8003d9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f4c:	f001 fc6a 	bl	8006824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <prvAddNewTaskToReadyList+0xcc>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00e      	beq.n	8004f76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <prvAddNewTaskToReadyList+0xc8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d207      	bcs.n	8004f76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f66:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <prvAddNewTaskToReadyList+0xdc>)
 8004f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	200008e4 	.word	0x200008e4
 8004f84:	200007a8 	.word	0x200007a8
 8004f88:	200008f0 	.word	0x200008f0
 8004f8c:	20000900 	.word	0x20000900
 8004f90:	200008ec 	.word	0x200008ec
 8004f94:	200007ac 	.word	0x200007ac
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004fa4:	f001 fc0a 	bl	80067bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <vTaskDelete+0x18>
 8004fae:	4b2d      	ldr	r3, [pc, #180]	; (8005064 <vTaskDelete+0xc8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	e000      	b.n	8004fb6 <vTaskDelete+0x1a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe ff4b 	bl	8003e58 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3318      	adds	r3, #24
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe ff42 	bl	8003e58 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <vTaskDelete+0xcc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4a23      	ldr	r2, [pc, #140]	; (8005068 <vTaskDelete+0xcc>)
 8004fdc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004fde:	4b21      	ldr	r3, [pc, #132]	; (8005064 <vTaskDelete+0xc8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d10b      	bne.n	8005000 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4619      	mov	r1, r3
 8004fee:	481f      	ldr	r0, [pc, #124]	; (800506c <vTaskDelete+0xd0>)
 8004ff0:	f7fe fed5 	bl	8003d9e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004ff4:	4b1e      	ldr	r3, [pc, #120]	; (8005070 <vTaskDelete+0xd4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <vTaskDelete+0xd4>)
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e009      	b.n	8005014 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005000:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <vTaskDelete+0xd8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3b01      	subs	r3, #1
 8005006:	4a1b      	ldr	r2, [pc, #108]	; (8005074 <vTaskDelete+0xd8>)
 8005008:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fd36 	bl	8005a7c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005010:	f000 fd66 	bl	8005ae0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005014:	f001 fc06 	bl	8006824 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005018:	4b17      	ldr	r3, [pc, #92]	; (8005078 <vTaskDelete+0xdc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01d      	beq.n	800505c <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <vTaskDelete+0xc8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	429a      	cmp	r2, r3
 8005028:	d118      	bne.n	800505c <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <vTaskDelete+0xe0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <vTaskDelete+0xb0>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	b672      	cpsid	i
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	b662      	cpsie	i
 8005046:	60bb      	str	r3, [r7, #8]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <vTaskDelete+0xe4>)
 800504e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200007a8 	.word	0x200007a8
 8005068:	20000900 	.word	0x20000900
 800506c:	200008b8 	.word	0x200008b8
 8005070:	200008cc 	.word	0x200008cc
 8005074:	200008e4 	.word	0x200008e4
 8005078:	200008f0 	.word	0x200008f0
 800507c:	2000090c 	.word	0x2000090c
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <vTaskDelay+0x64>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <vTaskDelay+0x34>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	b672      	cpsid	i
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	b662      	cpsie	i
 80050b2:	60bb      	str	r3, [r7, #8]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80050b8:	f000 f93e 	bl	8005338 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050bc:	2100      	movs	r1, #0
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fec0 	bl	8005e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050c4:	f000 f946 	bl	8005354 <xTaskResumeAll>
 80050c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <vTaskDelay+0x68>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	2000090c 	.word	0x2000090c
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 80050f8:	f001 fb60 	bl	80067bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d102      	bne.n	8005108 <uxTaskPriorityGet+0x18>
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <uxTaskPriorityGet+0x30>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	e000      	b.n	800510a <uxTaskPriorityGet+0x1a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8005112:	f001 fb87 	bl	8006824 <vPortExitCritical>

		return uxReturn;
 8005116:	68bb      	ldr	r3, [r7, #8]
	}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	200007a8 	.word	0x200007a8

08005124 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b09      	cmp	r3, #9
 8005136:	d90c      	bls.n	8005152 <vTaskPrioritySet+0x2e>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	b672      	cpsid	i
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	b662      	cpsie	i
 800514c:	60fb      	str	r3, [r7, #12]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <vTaskPrioritySet+0x2c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b09      	cmp	r3, #9
 8005156:	d901      	bls.n	800515c <vTaskPrioritySet+0x38>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005158:	2309      	movs	r3, #9
 800515a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800515c:	f001 fb2e 	bl	80067bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <vTaskPrioritySet+0x48>
 8005166:	4b3b      	ldr	r3, [pc, #236]	; (8005254 <vTaskPrioritySet+0x130>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	e000      	b.n	800516e <vTaskPrioritySet+0x4a>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d063      	beq.n	8005246 <vTaskPrioritySet+0x122>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	429a      	cmp	r2, r3
 8005184:	d90d      	bls.n	80051a2 <vTaskPrioritySet+0x7e>
				{
					if( pxTCB != pxCurrentTCB )
 8005186:	4b33      	ldr	r3, [pc, #204]	; (8005254 <vTaskPrioritySet+0x130>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	429a      	cmp	r2, r3
 800518e:	d00f      	beq.n	80051b0 <vTaskPrioritySet+0x8c>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005190:	4b30      	ldr	r3, [pc, #192]	; (8005254 <vTaskPrioritySet+0x130>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d309      	bcc.n	80051b0 <vTaskPrioritySet+0x8c>
						{
							xYieldRequired = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	e006      	b.n	80051b0 <vTaskPrioritySet+0x8c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80051a2:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <vTaskPrioritySet+0x130>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d101      	bne.n	80051b0 <vTaskPrioritySet+0x8c>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	429a      	cmp	r2, r3
 80051c0:	d102      	bne.n	80051c8 <vTaskPrioritySet+0xa4>
					{
						pxTCB->uxPriority = uxNewPriority;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	65da      	str	r2, [r3, #92]	; 0x5c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	db04      	blt.n	80051e0 <vTaskPrioritySet+0xbc>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f1c3 020a 	rsb	r2, r3, #10
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	6959      	ldr	r1, [r3, #20]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4a1a      	ldr	r2, [pc, #104]	; (8005258 <vTaskPrioritySet+0x134>)
 80051f0:	4413      	add	r3, r2
 80051f2:	4299      	cmp	r1, r3
 80051f4:	d11c      	bne.n	8005230 <vTaskPrioritySet+0x10c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe fe2c 	bl	8003e58 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <vTaskPrioritySet+0x138>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <vTaskPrioritySet+0xf0>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a12      	ldr	r2, [pc, #72]	; (800525c <vTaskPrioritySet+0x138>)
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4a0d      	ldr	r2, [pc, #52]	; (8005258 <vTaskPrioritySet+0x134>)
 8005222:	441a      	add	r2, r3
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7fe fdb7 	bl	8003d9e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <vTaskPrioritySet+0x122>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <vTaskPrioritySet+0x13c>)
 8005238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005246:	f001 faed 	bl	8006824 <vPortExitCritical>
	}
 800524a:	bf00      	nop
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200007a8 	.word	0x200007a8
 8005258:	200007ac 	.word	0x200007ac
 800525c:	200008ec 	.word	0x200008ec
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005272:	463a      	mov	r2, r7
 8005274:	1d39      	adds	r1, r7, #4
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fd2e 	bl	8003cdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	9202      	str	r2, [sp, #8]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	2300      	movs	r3, #0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	460a      	mov	r2, r1
 8005292:	4923      	ldr	r1, [pc, #140]	; (8005320 <vTaskStartScheduler+0xbc>)
 8005294:	4823      	ldr	r0, [pc, #140]	; (8005324 <vTaskStartScheduler+0xc0>)
 8005296:	f7ff fcd7 	bl	8004c48 <xTaskCreateStatic>
 800529a:	4603      	mov	r3, r0
 800529c:	4a22      	ldr	r2, [pc, #136]	; (8005328 <vTaskStartScheduler+0xc4>)
 800529e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052a0:	4b21      	ldr	r3, [pc, #132]	; (8005328 <vTaskStartScheduler+0xc4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052a8:	2301      	movs	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e001      	b.n	80052b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d102      	bne.n	80052be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052b8:	f000 fe18 	bl	8005eec <xTimerCreateTimerTask>
 80052bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d118      	bne.n	80052f6 <vTaskStartScheduler+0x92>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	b672      	cpsid	i
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	b662      	cpsie	i
 80052d8:	613b      	str	r3, [r7, #16]
}
 80052da:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052dc:	4b13      	ldr	r3, [pc, #76]	; (800532c <vTaskStartScheduler+0xc8>)
 80052de:	f04f 32ff 	mov.w	r2, #4294967295
 80052e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052e4:	4b12      	ldr	r3, [pc, #72]	; (8005330 <vTaskStartScheduler+0xcc>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <vTaskStartScheduler+0xd0>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052f0:	f001 f9e6 	bl	80066c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052f4:	e010      	b.n	8005318 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d10c      	bne.n	8005318 <vTaskStartScheduler+0xb4>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	b672      	cpsid	i
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	b662      	cpsie	i
 8005312:	60fb      	str	r3, [r7, #12]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <vTaskStartScheduler+0xb2>
}
 8005318:	bf00      	nop
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	080085b4 	.word	0x080085b4
 8005324:	08005971 	.word	0x08005971
 8005328:	20000908 	.word	0x20000908
 800532c:	20000904 	.word	0x20000904
 8005330:	200008f0 	.word	0x200008f0
 8005334:	200008e8 	.word	0x200008e8

08005338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <vTaskSuspendAll+0x18>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	4a03      	ldr	r2, [pc, #12]	; (8005350 <vTaskSuspendAll+0x18>)
 8005344:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	2000090c 	.word	0x2000090c

08005354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005362:	4b43      	ldr	r3, [pc, #268]	; (8005470 <xTaskResumeAll+0x11c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10c      	bne.n	8005384 <xTaskResumeAll+0x30>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	b672      	cpsid	i
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	b662      	cpsie	i
 800537e:	603b      	str	r3, [r7, #0]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005384:	f001 fa1a 	bl	80067bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005388:	4b39      	ldr	r3, [pc, #228]	; (8005470 <xTaskResumeAll+0x11c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3b01      	subs	r3, #1
 800538e:	4a38      	ldr	r2, [pc, #224]	; (8005470 <xTaskResumeAll+0x11c>)
 8005390:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005392:	4b37      	ldr	r3, [pc, #220]	; (8005470 <xTaskResumeAll+0x11c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d162      	bne.n	8005460 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800539a:	4b36      	ldr	r3, [pc, #216]	; (8005474 <xTaskResumeAll+0x120>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d05e      	beq.n	8005460 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053a2:	e02f      	b.n	8005404 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a4:	4b34      	ldr	r3, [pc, #208]	; (8005478 <xTaskResumeAll+0x124>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3318      	adds	r3, #24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe fd51 	bl	8003e58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fd4c 	bl	8003e58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4b2d      	ldr	r3, [pc, #180]	; (800547c <xTaskResumeAll+0x128>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d903      	bls.n	80053d4 <xTaskResumeAll+0x80>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a2a      	ldr	r2, [pc, #168]	; (800547c <xTaskResumeAll+0x128>)
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4a27      	ldr	r2, [pc, #156]	; (8005480 <xTaskResumeAll+0x12c>)
 80053e2:	441a      	add	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7fe fcd7 	bl	8003d9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4b23      	ldr	r3, [pc, #140]	; (8005484 <xTaskResumeAll+0x130>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80053fe:	4b22      	ldr	r3, [pc, #136]	; (8005488 <xTaskResumeAll+0x134>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <xTaskResumeAll+0x124>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1cb      	bne.n	80053a4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005412:	f000 fb65 	bl	8005ae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005416:	4b1d      	ldr	r3, [pc, #116]	; (800548c <xTaskResumeAll+0x138>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d010      	beq.n	8005444 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005422:	f000 f847 	bl	80054b4 <xTaskIncrementTick>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800542c:	4b16      	ldr	r3, [pc, #88]	; (8005488 <xTaskResumeAll+0x134>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3b01      	subs	r3, #1
 8005436:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f1      	bne.n	8005422 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <xTaskResumeAll+0x138>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <xTaskResumeAll+0x134>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005450:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <xTaskResumeAll+0x13c>)
 8005452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005460:	f001 f9e0 	bl	8006824 <vPortExitCritical>

	return xAlreadyYielded;
 8005464:	68bb      	ldr	r3, [r7, #8]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	2000090c 	.word	0x2000090c
 8005474:	200008e4 	.word	0x200008e4
 8005478:	200008a4 	.word	0x200008a4
 800547c:	200008ec 	.word	0x200008ec
 8005480:	200007ac 	.word	0x200007ac
 8005484:	200007a8 	.word	0x200007a8
 8005488:	200008f8 	.word	0x200008f8
 800548c:	200008f4 	.word	0x200008f4
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <xTaskGetTickCount+0x1c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054a0:	687b      	ldr	r3, [r7, #4]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	200008e8 	.word	0x200008e8

080054b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054be:	4b50      	ldr	r3, [pc, #320]	; (8005600 <xTaskIncrementTick+0x14c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f040 808b 	bne.w	80055de <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054c8:	4b4e      	ldr	r3, [pc, #312]	; (8005604 <xTaskIncrementTick+0x150>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054d0:	4a4c      	ldr	r2, [pc, #304]	; (8005604 <xTaskIncrementTick+0x150>)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d122      	bne.n	8005522 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80054dc:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <xTaskIncrementTick+0x154>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00c      	beq.n	8005500 <xTaskIncrementTick+0x4c>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	b672      	cpsid	i
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	b662      	cpsie	i
 80054fa:	603b      	str	r3, [r7, #0]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <xTaskIncrementTick+0x4a>
 8005500:	4b41      	ldr	r3, [pc, #260]	; (8005608 <xTaskIncrementTick+0x154>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	4b41      	ldr	r3, [pc, #260]	; (800560c <xTaskIncrementTick+0x158>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3f      	ldr	r2, [pc, #252]	; (8005608 <xTaskIncrementTick+0x154>)
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4a3f      	ldr	r2, [pc, #252]	; (800560c <xTaskIncrementTick+0x158>)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	4b3e      	ldr	r3, [pc, #248]	; (8005610 <xTaskIncrementTick+0x15c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3301      	adds	r3, #1
 800551a:	4a3d      	ldr	r2, [pc, #244]	; (8005610 <xTaskIncrementTick+0x15c>)
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	f000 fadf 	bl	8005ae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005522:	4b3c      	ldr	r3, [pc, #240]	; (8005614 <xTaskIncrementTick+0x160>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	429a      	cmp	r2, r3
 800552a:	d349      	bcc.n	80055c0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552c:	4b36      	ldr	r3, [pc, #216]	; (8005608 <xTaskIncrementTick+0x154>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005536:	4b37      	ldr	r3, [pc, #220]	; (8005614 <xTaskIncrementTick+0x160>)
 8005538:	f04f 32ff 	mov.w	r2, #4294967295
 800553c:	601a      	str	r2, [r3, #0]
					break;
 800553e:	e03f      	b.n	80055c0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005540:	4b31      	ldr	r3, [pc, #196]	; (8005608 <xTaskIncrementTick+0x154>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d203      	bcs.n	8005560 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005558:	4a2e      	ldr	r2, [pc, #184]	; (8005614 <xTaskIncrementTick+0x160>)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800555e:	e02f      	b.n	80055c0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	3304      	adds	r3, #4
 8005564:	4618      	mov	r0, r3
 8005566:	f7fe fc77 	bl	8003e58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	3318      	adds	r3, #24
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fc6e 	bl	8003e58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	4b25      	ldr	r3, [pc, #148]	; (8005618 <xTaskIncrementTick+0x164>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d903      	bls.n	8005590 <xTaskIncrementTick+0xdc>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	4a22      	ldr	r2, [pc, #136]	; (8005618 <xTaskIncrementTick+0x164>)
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4a1f      	ldr	r2, [pc, #124]	; (800561c <xTaskIncrementTick+0x168>)
 800559e:	441a      	add	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f7fe fbf9 	bl	8003d9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <xTaskIncrementTick+0x16c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d3b8      	bcc.n	800552c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055be:	e7b5      	b.n	800552c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <xTaskIncrementTick+0x16c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c6:	4915      	ldr	r1, [pc, #84]	; (800561c <xTaskIncrementTick+0x168>)
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d907      	bls.n	80055e8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80055d8:	2301      	movs	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e004      	b.n	80055e8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055de:	4b11      	ldr	r3, [pc, #68]	; (8005624 <xTaskIncrementTick+0x170>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a0f      	ldr	r2, [pc, #60]	; (8005624 <xTaskIncrementTick+0x170>)
 80055e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055e8:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <xTaskIncrementTick+0x174>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055f4:	697b      	ldr	r3, [r7, #20]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	2000090c 	.word	0x2000090c
 8005604:	200008e8 	.word	0x200008e8
 8005608:	2000089c 	.word	0x2000089c
 800560c:	200008a0 	.word	0x200008a0
 8005610:	200008fc 	.word	0x200008fc
 8005614:	20000904 	.word	0x20000904
 8005618:	200008ec 	.word	0x200008ec
 800561c:	200007ac 	.word	0x200007ac
 8005620:	200007a8 	.word	0x200007a8
 8005624:	200008f4 	.word	0x200008f4
 8005628:	200008f8 	.word	0x200008f8

0800562c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005632:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <vTaskSwitchContext+0xac>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800563a:	4b28      	ldr	r3, [pc, #160]	; (80056dc <vTaskSwitchContext+0xb0>)
 800563c:	2201      	movs	r2, #1
 800563e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005640:	e043      	b.n	80056ca <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005642:	4b26      	ldr	r3, [pc, #152]	; (80056dc <vTaskSwitchContext+0xb0>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005648:	4b25      	ldr	r3, [pc, #148]	; (80056e0 <vTaskSwitchContext+0xb4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e012      	b.n	8005676 <vTaskSwitchContext+0x4a>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10c      	bne.n	8005670 <vTaskSwitchContext+0x44>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	b672      	cpsid	i
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	b662      	cpsie	i
 800566a:	607b      	str	r3, [r7, #4]
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <vTaskSwitchContext+0x42>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3b01      	subs	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	491b      	ldr	r1, [pc, #108]	; (80056e4 <vTaskSwitchContext+0xb8>)
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0e2      	beq.n	8005650 <vTaskSwitchContext+0x24>
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <vTaskSwitchContext+0xb8>)
 8005696:	4413      	add	r3, r2
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	605a      	str	r2, [r3, #4]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	3308      	adds	r3, #8
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d104      	bne.n	80056ba <vTaskSwitchContext+0x8e>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <vTaskSwitchContext+0xbc>)
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4a06      	ldr	r2, [pc, #24]	; (80056e0 <vTaskSwitchContext+0xb4>)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6013      	str	r3, [r2, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	2000090c 	.word	0x2000090c
 80056dc:	200008f8 	.word	0x200008f8
 80056e0:	200008ec 	.word	0x200008ec
 80056e4:	200007ac 	.word	0x200007ac
 80056e8:	200007a8 	.word	0x200007a8

080056ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10c      	bne.n	8005716 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005700:	b672      	cpsid	i
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	b662      	cpsie	i
 8005710:	60fb      	str	r3, [r7, #12]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <vTaskPlaceOnEventList+0x48>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3318      	adds	r3, #24
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fe fb61 	bl	8003de6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005724:	2101      	movs	r1, #1
 8005726:	6838      	ldr	r0, [r7, #0]
 8005728:	f000 fb8c 	bl	8005e44 <prvAddCurrentTaskToDelayedList>
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	200007a8 	.word	0x200007a8

08005738 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10c      	bne.n	8005764 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	b672      	cpsid	i
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	b662      	cpsie	i
 800575e:	617b      	str	r3, [r7, #20]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <vTaskPlaceOnEventListRestricted+0x58>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3318      	adds	r3, #24
 800576a:	4619      	mov	r1, r3
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7fe fb16 	bl	8003d9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005778:	f04f 33ff 	mov.w	r3, #4294967295
 800577c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	68b8      	ldr	r0, [r7, #8]
 8005782:	f000 fb5f 	bl	8005e44 <prvAddCurrentTaskToDelayedList>
	}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200007a8 	.word	0x200007a8

08005794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10c      	bne.n	80057c4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	b672      	cpsid	i
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	b662      	cpsie	i
 80057be:	60fb      	str	r3, [r7, #12]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	3318      	adds	r3, #24
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe fb45 	bl	8003e58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ce:	4b1e      	ldr	r3, [pc, #120]	; (8005848 <xTaskRemoveFromEventList+0xb4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d11d      	bne.n	8005812 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	3304      	adds	r3, #4
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe fb3c 	bl	8003e58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <xTaskRemoveFromEventList+0xb8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d903      	bls.n	80057f4 <xTaskRemoveFromEventList+0x60>
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4a16      	ldr	r2, [pc, #88]	; (800584c <xTaskRemoveFromEventList+0xb8>)
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4a13      	ldr	r2, [pc, #76]	; (8005850 <xTaskRemoveFromEventList+0xbc>)
 8005802:	441a      	add	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f7fe fac7 	bl	8003d9e <vListInsertEnd>
 8005810:	e005      	b.n	800581e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3318      	adds	r3, #24
 8005816:	4619      	mov	r1, r3
 8005818:	480e      	ldr	r0, [pc, #56]	; (8005854 <xTaskRemoveFromEventList+0xc0>)
 800581a:	f7fe fac0 	bl	8003d9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005822:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <xTaskRemoveFromEventList+0xc4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	429a      	cmp	r2, r3
 800582a:	d905      	bls.n	8005838 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <xTaskRemoveFromEventList+0xc8>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e001      	b.n	800583c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800583c:	697b      	ldr	r3, [r7, #20]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	2000090c 	.word	0x2000090c
 800584c:	200008ec 	.word	0x200008ec
 8005850:	200007ac 	.word	0x200007ac
 8005854:	200008a4 	.word	0x200008a4
 8005858:	200007a8 	.word	0x200007a8
 800585c:	200008f8 	.word	0x200008f8

08005860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <vTaskInternalSetTimeOutState+0x24>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <vTaskInternalSetTimeOutState+0x28>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	605a      	str	r2, [r3, #4]
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	200008fc 	.word	0x200008fc
 8005888:	200008e8 	.word	0x200008e8

0800588c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10c      	bne.n	80058b6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	b672      	cpsid	i
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	b662      	cpsie	i
 80058b0:	613b      	str	r3, [r7, #16]
}
 80058b2:	bf00      	nop
 80058b4:	e7fe      	b.n	80058b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10c      	bne.n	80058d6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	b672      	cpsid	i
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	b662      	cpsie	i
 80058d0:	60fb      	str	r3, [r7, #12]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80058d6:	f000 ff71 	bl	80067bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058da:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <xTaskCheckForTimeOut+0xc4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d102      	bne.n	80058fa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	e023      	b.n	8005942 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <xTaskCheckForTimeOut+0xc8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d007      	beq.n	8005916 <xTaskCheckForTimeOut+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	429a      	cmp	r2, r3
 800590e:	d302      	bcc.n	8005916 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005910:	2301      	movs	r3, #1
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	e015      	b.n	8005942 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	429a      	cmp	r2, r3
 800591e:	d20b      	bcs.n	8005938 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	1ad2      	subs	r2, r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff ff97 	bl	8005860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005932:	2300      	movs	r3, #0
 8005934:	61fb      	str	r3, [r7, #28]
 8005936:	e004      	b.n	8005942 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800593e:	2301      	movs	r3, #1
 8005940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005942:	f000 ff6f 	bl	8006824 <vPortExitCritical>

	return xReturn;
 8005946:	69fb      	ldr	r3, [r7, #28]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	200008e8 	.word	0x200008e8
 8005954:	200008fc 	.word	0x200008fc

08005958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <vTaskMissedYield+0x14>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]
}
 8005962:	bf00      	nop
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	200008f8 	.word	0x200008f8

08005970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005978:	f000 f852 	bl	8005a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <prvIdleTask+0x28>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d9f9      	bls.n	8005978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <prvIdleTask+0x2c>)
 8005986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005994:	e7f0      	b.n	8005978 <prvIdleTask+0x8>
 8005996:	bf00      	nop
 8005998:	200007ac 	.word	0x200007ac
 800599c:	e000ed04 	.word	0xe000ed04

080059a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e00c      	b.n	80059c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <prvInitialiseTaskLists+0x60>)
 80059b8:	4413      	add	r3, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe f9c2 	bl	8003d44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3301      	adds	r3, #1
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b09      	cmp	r3, #9
 80059ca:	d9ef      	bls.n	80059ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059cc:	480d      	ldr	r0, [pc, #52]	; (8005a04 <prvInitialiseTaskLists+0x64>)
 80059ce:	f7fe f9b9 	bl	8003d44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059d2:	480d      	ldr	r0, [pc, #52]	; (8005a08 <prvInitialiseTaskLists+0x68>)
 80059d4:	f7fe f9b6 	bl	8003d44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059d8:	480c      	ldr	r0, [pc, #48]	; (8005a0c <prvInitialiseTaskLists+0x6c>)
 80059da:	f7fe f9b3 	bl	8003d44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059de:	480c      	ldr	r0, [pc, #48]	; (8005a10 <prvInitialiseTaskLists+0x70>)
 80059e0:	f7fe f9b0 	bl	8003d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059e4:	480b      	ldr	r0, [pc, #44]	; (8005a14 <prvInitialiseTaskLists+0x74>)
 80059e6:	f7fe f9ad 	bl	8003d44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <prvInitialiseTaskLists+0x78>)
 80059ec:	4a05      	ldr	r2, [pc, #20]	; (8005a04 <prvInitialiseTaskLists+0x64>)
 80059ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <prvInitialiseTaskLists+0x7c>)
 80059f2:	4a05      	ldr	r2, [pc, #20]	; (8005a08 <prvInitialiseTaskLists+0x68>)
 80059f4:	601a      	str	r2, [r3, #0]
}
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	200007ac 	.word	0x200007ac
 8005a04:	20000874 	.word	0x20000874
 8005a08:	20000888 	.word	0x20000888
 8005a0c:	200008a4 	.word	0x200008a4
 8005a10:	200008b8 	.word	0x200008b8
 8005a14:	200008d0 	.word	0x200008d0
 8005a18:	2000089c 	.word	0x2000089c
 8005a1c:	200008a0 	.word	0x200008a0

08005a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a26:	e019      	b.n	8005a5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a28:	f000 fec8 	bl	80067bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <prvCheckTasksWaitingTermination+0x50>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fa0d 	bl	8003e58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <prvCheckTasksWaitingTermination+0x54>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	4a0b      	ldr	r2, [pc, #44]	; (8005a74 <prvCheckTasksWaitingTermination+0x54>)
 8005a46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <prvCheckTasksWaitingTermination+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	4a0a      	ldr	r2, [pc, #40]	; (8005a78 <prvCheckTasksWaitingTermination+0x58>)
 8005a50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a52:	f000 fee7 	bl	8006824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f810 	bl	8005a7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <prvCheckTasksWaitingTermination+0x58>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e1      	bne.n	8005a28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200008b8 	.word	0x200008b8
 8005a74:	200008e4 	.word	0x200008e4
 8005a78:	200008cc 	.word	0x200008cc

08005a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d108      	bne.n	8005aa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 f888 	bl	8006ba8 <vPortFree>
				vPortFree( pxTCB );
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 f885 	bl	8006ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a9e:	e01a      	b.n	8005ad6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d103      	bne.n	8005ab2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 f87c 	bl	8006ba8 <vPortFree>
	}
 8005ab0:	e011      	b.n	8005ad6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d00c      	beq.n	8005ad6 <prvDeleteTCB+0x5a>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	b672      	cpsid	i
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	b662      	cpsie	i
 8005ad0:	60fb      	str	r3, [r7, #12]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <prvDeleteTCB+0x58>
	}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <prvResetNextTaskUnblockTime+0x38>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <prvResetNextTaskUnblockTime+0x3c>)
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295
 8005af6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005af8:	e008      	b.n	8005b0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005afa:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <prvResetNextTaskUnblockTime+0x38>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <prvResetNextTaskUnblockTime+0x3c>)
 8005b0a:	6013      	str	r3, [r2, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	2000089c 	.word	0x2000089c
 8005b1c:	20000904 	.word	0x20000904

08005b20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <xTaskGetSchedulerState+0x34>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	e008      	b.n	8005b46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b34:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <xTaskGetSchedulerState+0x38>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	e001      	b.n	8005b46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b46:	687b      	ldr	r3, [r7, #4]
	}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	200008f0 	.word	0x200008f0
 8005b58:	2000090c 	.word	0x2000090c

08005b5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d051      	beq.n	8005c16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b76:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <xTaskPriorityInherit+0xc4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d241      	bcs.n	8005c04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	db06      	blt.n	8005b96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b88:	4b25      	ldr	r3, [pc, #148]	; (8005c20 <xTaskPriorityInherit+0xc4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	f1c3 020a 	rsb	r2, r3, #10
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6959      	ldr	r1, [r3, #20]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <xTaskPriorityInherit+0xc8>)
 8005ba8:	4413      	add	r3, r2
 8005baa:	4299      	cmp	r1, r3
 8005bac:	d122      	bne.n	8005bf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe f950 	bl	8003e58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bb8:	4b19      	ldr	r3, [pc, #100]	; (8005c20 <xTaskPriorityInherit+0xc4>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <xTaskPriorityInherit+0xcc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d903      	bls.n	8005bd6 <xTaskPriorityInherit+0x7a>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <xTaskPriorityInherit+0xcc>)
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a10      	ldr	r2, [pc, #64]	; (8005c24 <xTaskPriorityInherit+0xc8>)
 8005be4:	441a      	add	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7fe f8d6 	bl	8003d9e <vListInsertEnd>
 8005bf2:	e004      	b.n	8005bfe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <xTaskPriorityInherit+0xc4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e008      	b.n	8005c16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <xTaskPriorityInherit+0xc4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d201      	bcs.n	8005c16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c16:	68fb      	ldr	r3, [r7, #12]
	}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	200007a8 	.word	0x200007a8
 8005c24:	200007ac 	.word	0x200007ac
 8005c28:	200008ec 	.word	0x200008ec

08005c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d05a      	beq.n	8005cf8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c42:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <xTaskPriorityDisinherit+0xd8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d00c      	beq.n	8005c66 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	b672      	cpsid	i
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	b662      	cpsie	i
 8005c60:	60fb      	str	r3, [r7, #12]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10c      	bne.n	8005c88 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	b672      	cpsid	i
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	b662      	cpsie	i
 8005c82:	60bb      	str	r3, [r7, #8]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8c:	1e5a      	subs	r2, r3, #1
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d02c      	beq.n	8005cf8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d128      	bne.n	8005cf8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe f8d4 	bl	8003e58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	f1c3 020a 	rsb	r2, r3, #10
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <xTaskPriorityDisinherit+0xdc>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d903      	bls.n	8005cd8 <xTaskPriorityDisinherit+0xac>
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	4a0c      	ldr	r2, [pc, #48]	; (8005d08 <xTaskPriorityDisinherit+0xdc>)
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <xTaskPriorityDisinherit+0xe0>)
 8005ce6:	441a      	add	r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f7fe f855 	bl	8003d9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cf8:	697b      	ldr	r3, [r7, #20]
	}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200007a8 	.word	0x200007a8
 8005d08:	200008ec 	.word	0x200008ec
 8005d0c:	200007ac 	.word	0x200007ac

08005d10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d06e      	beq.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10c      	bne.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	b672      	cpsid	i
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	b662      	cpsie	i
 8005d44:	60fb      	str	r3, [r7, #12]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d902      	bls.n	8005d5a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e002      	b.n	8005d60 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d04d      	beq.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d148      	bne.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d74:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d10c      	bne.n	8005d98 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	b672      	cpsid	i
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	b662      	cpsie	i
 8005d92:	60bb      	str	r3, [r7, #8]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db04      	blt.n	8005db6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f1c3 020a 	rsb	r2, r3, #10
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	6959      	ldr	r1, [r3, #20]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005dc6:	4413      	add	r3, r2
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	d11c      	bne.n	8005e06 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe f841 	bl	8003e58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d903      	bls.n	8005dea <vTaskPriorityDisinheritAfterTimeout+0xda>
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	4a0c      	ldr	r2, [pc, #48]	; (8005e18 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4a07      	ldr	r2, [pc, #28]	; (8005e14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005df8:	441a      	add	r2, r3
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f7fd ffcc 	bl	8003d9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e06:	bf00      	nop
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	200007a8 	.word	0x200007a8
 8005e14:	200007ac 	.word	0x200007ac
 8005e18:	200008ec 	.word	0x200008ec

08005e1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e2e:	3201      	adds	r2, #1
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e34:	681b      	ldr	r3, [r3, #0]
	}
 8005e36:	4618      	mov	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	200007a8 	.word	0x200007a8

08005e44 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e4e:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e54:	4b20      	ldr	r3, [pc, #128]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd fffc 	bl	8003e58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d10a      	bne.n	8005e7e <prvAddCurrentTaskToDelayedList+0x3a>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4819      	ldr	r0, [pc, #100]	; (8005edc <prvAddCurrentTaskToDelayedList+0x98>)
 8005e78:	f7fd ff91 	bl	8003d9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e7c:	e026      	b.n	8005ecc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4413      	add	r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d209      	bcs.n	8005eaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e96:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f7fd ff9f 	bl	8003de6 <vListInsert>
}
 8005ea8:	e010      	b.n	8005ecc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f7fd ff95 	bl	8003de6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d202      	bcs.n	8005ecc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ec6:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6013      	str	r3, [r2, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	200008e8 	.word	0x200008e8
 8005ed8:	200007a8 	.word	0x200007a8
 8005edc:	200008d0 	.word	0x200008d0
 8005ee0:	200008a0 	.word	0x200008a0
 8005ee4:	2000089c 	.word	0x2000089c
 8005ee8:	20000904 	.word	0x20000904

08005eec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ef6:	f000 fb15 	bl	8006524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005efa:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <xTimerCreateTimerTask+0x84>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d021      	beq.n	8005f46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f0a:	1d3a      	adds	r2, r7, #4
 8005f0c:	f107 0108 	add.w	r1, r7, #8
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd fefb 	bl	8003d10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	9202      	str	r2, [sp, #8]
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	2302      	movs	r3, #2
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	460a      	mov	r2, r1
 8005f2c:	4911      	ldr	r1, [pc, #68]	; (8005f74 <xTimerCreateTimerTask+0x88>)
 8005f2e:	4812      	ldr	r0, [pc, #72]	; (8005f78 <xTimerCreateTimerTask+0x8c>)
 8005f30:	f7fe fe8a 	bl	8004c48 <xTaskCreateStatic>
 8005f34:	4603      	mov	r3, r0
 8005f36:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <xTimerCreateTimerTask+0x90>)
 8005f38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f3a:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <xTimerCreateTimerTask+0x90>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f42:	2301      	movs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10c      	bne.n	8005f66 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	b672      	cpsid	i
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	b662      	cpsie	i
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005f66:	697b      	ldr	r3, [r7, #20]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000940 	.word	0x20000940
 8005f74:	080085bc 	.word	0x080085bc
 8005f78:	080060bd 	.word	0x080060bd
 8005f7c:	20000944 	.word	0x20000944

08005f80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10c      	bne.n	8005fb2 <xTimerGenericCommand+0x32>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	b672      	cpsid	i
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	b662      	cpsie	i
 8005fac:	623b      	str	r3, [r7, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <xTimerGenericCommand+0x9c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02a      	beq.n	8006010 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b05      	cmp	r3, #5
 8005fca:	dc18      	bgt.n	8005ffe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005fcc:	f7ff fda8 	bl	8005b20 <xTaskGetSchedulerState>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d109      	bne.n	8005fea <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fd6:	4b11      	ldr	r3, [pc, #68]	; (800601c <xTimerGenericCommand+0x9c>)
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	f107 0110 	add.w	r1, r7, #16
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe2:	f7fe f8eb 	bl	80041bc <xQueueGenericSend>
 8005fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8005fe8:	e012      	b.n	8006010 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fea:	4b0c      	ldr	r3, [pc, #48]	; (800601c <xTimerGenericCommand+0x9c>)
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	f107 0110 	add.w	r1, r7, #16
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f7fe f8e1 	bl	80041bc <xQueueGenericSend>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24
 8005ffc:	e008      	b.n	8006010 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <xTimerGenericCommand+0x9c>)
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	f107 0110 	add.w	r1, r7, #16
 8006006:	2300      	movs	r3, #0
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	f7fe f9dd 	bl	80043c8 <xQueueGenericSendFromISR>
 800600e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006012:	4618      	mov	r0, r3
 8006014:	3728      	adds	r7, #40	; 0x28
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000940 	.word	0x20000940

08006020 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af02      	add	r7, sp, #8
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602a:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <prvProcessExpiredTimer+0x98>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	3304      	adds	r3, #4
 8006038:	4618      	mov	r0, r3
 800603a:	f7fd ff0d 	bl	8003e58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d024      	beq.n	8006096 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	699a      	ldr	r2, [r3, #24]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	18d1      	adds	r1, r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	6978      	ldr	r0, [r7, #20]
 800605a:	f000 f8d3 	bl	8006204 <prvInsertTimerInActiveList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d021      	beq.n	80060a8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006064:	2300      	movs	r3, #0
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	2300      	movs	r3, #0
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	2100      	movs	r1, #0
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f7ff ff86 	bl	8005f80 <xTimerGenericCommand>
 8006074:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d115      	bne.n	80060a8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	b672      	cpsid	i
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	b662      	cpsie	i
 8006090:	60fb      	str	r3, [r7, #12]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	6978      	ldr	r0, [r7, #20]
 80060ae:	4798      	blx	r3
}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000938 	.word	0x20000938

080060bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f857 	bl	800617c <prvGetNextExpireTime>
 80060ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4619      	mov	r1, r3
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f803 	bl	80060e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060da:	f000 f8d5 	bl	8006288 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060de:	e7f1      	b.n	80060c4 <prvTimerTask+0x8>

080060e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060ea:	f7ff f925 	bl	8005338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ee:	f107 0308 	add.w	r3, r7, #8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f866 	bl	80061c4 <prvSampleTimeNow>
 80060f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d130      	bne.n	8006162 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <prvProcessTimerOrBlockTask+0x3c>
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	429a      	cmp	r2, r3
 800610c:	d806      	bhi.n	800611c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800610e:	f7ff f921 	bl	8005354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ff83 	bl	8006020 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800611a:	e024      	b.n	8006166 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d008      	beq.n	8006134 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <prvProcessTimerOrBlockTask+0x90>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <prvProcessTimerOrBlockTask+0x50>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <prvProcessTimerOrBlockTask+0x52>
 8006130:	2300      	movs	r3, #0
 8006132:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <prvProcessTimerOrBlockTask+0x94>)
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	f7fe fd4d 	bl	8004be0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006146:	f7ff f905 	bl	8005354 <xTaskResumeAll>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <prvProcessTimerOrBlockTask+0x98>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
}
 8006160:	e001      	b.n	8006166 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006162:	f7ff f8f7 	bl	8005354 <xTaskResumeAll>
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	2000093c 	.word	0x2000093c
 8006174:	20000940 	.word	0x20000940
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006184:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <prvGetNextExpireTime+0x44>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <prvGetNextExpireTime+0x16>
 800618e:	2201      	movs	r2, #1
 8006190:	e000      	b.n	8006194 <prvGetNextExpireTime+0x18>
 8006192:	2200      	movs	r2, #0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <prvGetNextExpireTime+0x44>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e001      	b.n	80061b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20000938 	.word	0x20000938

080061c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061cc:	f7ff f962 	bl	8005494 <xTaskGetTickCount>
 80061d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <prvSampleTimeNow+0x3c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d205      	bcs.n	80061e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061dc:	f000 f93c 	bl	8006458 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e002      	b.n	80061ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061ee:	4a04      	ldr	r2, [pc, #16]	; (8006200 <prvSampleTimeNow+0x3c>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061f4:	68fb      	ldr	r3, [r7, #12]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	20000948 	.word	0x20000948

08006204 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	429a      	cmp	r2, r3
 8006228:	d812      	bhi.n	8006250 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e01b      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <prvInsertTimerInActiveList+0x7c>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f7fd fdcc 	bl	8003de6 <vListInsert>
 800624e:	e012      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d206      	bcs.n	8006266 <prvInsertTimerInActiveList+0x62>
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e007      	b.n	8006276 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <prvInsertTimerInActiveList+0x80>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fd fdb8 	bl	8003de6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	2000093c 	.word	0x2000093c
 8006284:	20000938 	.word	0x20000938

08006288 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	; 0x38
 800628c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800628e:	e0d0      	b.n	8006432 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da1a      	bge.n	80062cc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	3304      	adds	r3, #4
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10c      	bne.n	80062bc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	b672      	cpsid	i
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	b662      	cpsie	i
 80062b6:	61fb      	str	r3, [r7, #28]
}
 80062b8:	bf00      	nop
 80062ba:	e7fe      	b.n	80062ba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c2:	6850      	ldr	r0, [r2, #4]
 80062c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c6:	6892      	ldr	r2, [r2, #8]
 80062c8:	4611      	mov	r1, r2
 80062ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f2c0 80af 	blt.w	8006432 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d004      	beq.n	80062ea <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	3304      	adds	r3, #4
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fd fdb7 	bl	8003e58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062ea:	463b      	mov	r3, r7
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff ff69 	bl	80061c4 <prvSampleTimeNow>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b09      	cmp	r3, #9
 80062f8:	f200 809a 	bhi.w	8006430 <prvProcessReceivedCommands+0x1a8>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <prvProcessReceivedCommands+0x7c>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	0800632d 	.word	0x0800632d
 8006308:	0800632d 	.word	0x0800632d
 800630c:	0800632d 	.word	0x0800632d
 8006310:	080063a5 	.word	0x080063a5
 8006314:	080063b9 	.word	0x080063b9
 8006318:	08006407 	.word	0x08006407
 800631c:	0800632d 	.word	0x0800632d
 8006320:	0800632d 	.word	0x0800632d
 8006324:	080063a5 	.word	0x080063a5
 8006328:	080063b9 	.word	0x080063b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	18d1      	adds	r1, r2, r3
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634c:	f7ff ff5a 	bl	8006204 <prvInsertTimerInActiveList>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d06d      	beq.n	8006432 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d062      	beq.n	8006432 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	441a      	add	r2, r3
 8006374:	2300      	movs	r3, #0
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	2100      	movs	r1, #0
 800637c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637e:	f7ff fdff 	bl	8005f80 <xTimerGenericCommand>
 8006382:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d153      	bne.n	8006432 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	b672      	cpsid	i
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	b662      	cpsie	i
 800639e:	61bb      	str	r3, [r7, #24]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063b6:	e03c      	b.n	8006432 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10c      	bne.n	80063f2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	b672      	cpsid	i
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	b662      	cpsie	i
 80063ec:	617b      	str	r3, [r7, #20]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	18d1      	adds	r1, r2, r3
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006400:	f7ff ff00 	bl	8006204 <prvInsertTimerInActiveList>
					break;
 8006404:	e015      	b.n	8006432 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d103      	bne.n	800641c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006416:	f000 fbc7 	bl	8006ba8 <vPortFree>
 800641a:	e00a      	b.n	8006432 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006422:	f023 0301 	bic.w	r3, r3, #1
 8006426:	b2da      	uxtb	r2, r3
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800642e:	e000      	b.n	8006432 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8006430:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006432:	4b08      	ldr	r3, [pc, #32]	; (8006454 <prvProcessReceivedCommands+0x1cc>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	1d39      	adds	r1, r7, #4
 8006438:	2200      	movs	r2, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe f864 	bl	8004508 <xQueueReceive>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	f47f af24 	bne.w	8006290 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	3730      	adds	r7, #48	; 0x30
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000940 	.word	0x20000940

08006458 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b088      	sub	sp, #32
 800645c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800645e:	e04a      	b.n	80064f6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006460:	4b2e      	ldr	r3, [pc, #184]	; (800651c <prvSwitchTimerLists+0xc4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646a:	4b2c      	ldr	r3, [pc, #176]	; (800651c <prvSwitchTimerLists+0xc4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3304      	adds	r3, #4
 8006478:	4618      	mov	r0, r3
 800647a:	f7fd fced 	bl	8003e58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d030      	beq.n	80064f6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4413      	add	r3, r2
 800649c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d90e      	bls.n	80064c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064b2:	4b1a      	ldr	r3, [pc, #104]	; (800651c <prvSwitchTimerLists+0xc4>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7fd fc92 	bl	8003de6 <vListInsert>
 80064c2:	e018      	b.n	80064f6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064c4:	2300      	movs	r3, #0
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2300      	movs	r3, #0
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	2100      	movs	r1, #0
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff fd56 	bl	8005f80 <xTimerGenericCommand>
 80064d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10c      	bne.n	80064f6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	b672      	cpsid	i
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	b662      	cpsie	i
 80064f0:	603b      	str	r3, [r7, #0]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <prvSwitchTimerLists+0xc4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1af      	bne.n	8006460 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <prvSwitchTimerLists+0xc4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006506:	4b06      	ldr	r3, [pc, #24]	; (8006520 <prvSwitchTimerLists+0xc8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a04      	ldr	r2, [pc, #16]	; (800651c <prvSwitchTimerLists+0xc4>)
 800650c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800650e:	4a04      	ldr	r2, [pc, #16]	; (8006520 <prvSwitchTimerLists+0xc8>)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	6013      	str	r3, [r2, #0]
}
 8006514:	bf00      	nop
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20000938 	.word	0x20000938
 8006520:	2000093c 	.word	0x2000093c

08006524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800652a:	f000 f947 	bl	80067bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d120      	bne.n	8006578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006536:	4814      	ldr	r0, [pc, #80]	; (8006588 <prvCheckForValidListAndQueue+0x64>)
 8006538:	f7fd fc04 	bl	8003d44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800653c:	4813      	ldr	r0, [pc, #76]	; (800658c <prvCheckForValidListAndQueue+0x68>)
 800653e:	f7fd fc01 	bl	8003d44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <prvCheckForValidListAndQueue+0x6c>)
 8006544:	4a10      	ldr	r2, [pc, #64]	; (8006588 <prvCheckForValidListAndQueue+0x64>)
 8006546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006548:	4b12      	ldr	r3, [pc, #72]	; (8006594 <prvCheckForValidListAndQueue+0x70>)
 800654a:	4a10      	ldr	r2, [pc, #64]	; (800658c <prvCheckForValidListAndQueue+0x68>)
 800654c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800654e:	2300      	movs	r3, #0
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <prvCheckForValidListAndQueue+0x74>)
 8006554:	4a11      	ldr	r2, [pc, #68]	; (800659c <prvCheckForValidListAndQueue+0x78>)
 8006556:	2110      	movs	r1, #16
 8006558:	200a      	movs	r0, #10
 800655a:	f7fd fd11 	bl	8003f80 <xQueueGenericCreateStatic>
 800655e:	4603      	mov	r3, r0
 8006560:	4a08      	ldr	r2, [pc, #32]	; (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <prvCheckForValidListAndQueue+0x60>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	490b      	ldr	r1, [pc, #44]	; (80065a0 <prvCheckForValidListAndQueue+0x7c>)
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fb0a 	bl	8004b8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006578:	f000 f954 	bl	8006824 <vPortExitCritical>
}
 800657c:	bf00      	nop
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000940 	.word	0x20000940
 8006588:	20000910 	.word	0x20000910
 800658c:	20000924 	.word	0x20000924
 8006590:	20000938 	.word	0x20000938
 8006594:	2000093c 	.word	0x2000093c
 8006598:	200009ec 	.word	0x200009ec
 800659c:	2000094c 	.word	0x2000094c
 80065a0:	080085c4 	.word	0x080085c4

080065a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3b04      	subs	r3, #4
 80065b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3b04      	subs	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d4:	4a0c      	ldr	r2, [pc, #48]	; (8006608 <pxPortInitialiseStack+0x64>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3b14      	subs	r3, #20
 80065de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b04      	subs	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f06f 0202 	mvn.w	r2, #2
 80065f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3b20      	subs	r3, #32
 80065f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065fa:	68fb      	ldr	r3, [r7, #12]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	0800660d 	.word	0x0800660d

0800660c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006616:	4b14      	ldr	r3, [pc, #80]	; (8006668 <prvTaskExitError+0x5c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661e:	d00c      	beq.n	800663a <prvTaskExitError+0x2e>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	b672      	cpsid	i
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	b662      	cpsie	i
 8006634:	60fb      	str	r3, [r7, #12]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <prvTaskExitError+0x2c>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	b672      	cpsid	i
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	b662      	cpsie	i
 800664e:	60bb      	str	r3, [r7, #8]
}
 8006650:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006652:	bf00      	nop
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0fc      	beq.n	8006654 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	20000040 	.word	0x20000040
 800666c:	00000000 	.word	0x00000000

08006670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <pxCurrentTCBConst2>)
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	6808      	ldr	r0, [r1, #0]
 8006676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	f380 8809 	msr	PSP, r0
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	4770      	bx	lr
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst2>:
 8006690:	200007a8 	.word	0x200007a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006698:	4808      	ldr	r0, [pc, #32]	; (80066bc <prvPortStartFirstTask+0x24>)
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f380 8808 	msr	MSP, r0
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8814 	msr	CONTROL, r0
 80066aa:	b662      	cpsie	i
 80066ac:	b661      	cpsie	f
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	df00      	svc	0
 80066b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ba:	bf00      	nop
 80066bc:	e000ed08 	.word	0xe000ed08

080066c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066c6:	4b37      	ldr	r3, [pc, #220]	; (80067a4 <xPortStartScheduler+0xe4>)
 80066c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	4b2f      	ldr	r3, [pc, #188]	; (80067a8 <xPortStartScheduler+0xe8>)
 80066ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ee:	4b2f      	ldr	r3, [pc, #188]	; (80067ac <xPortStartScheduler+0xec>)
 80066f0:	2207      	movs	r2, #7
 80066f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f4:	e009      	b.n	800670a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80066f6:	4b2d      	ldr	r3, [pc, #180]	; (80067ac <xPortStartScheduler+0xec>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	4a2b      	ldr	r2, [pc, #172]	; (80067ac <xPortStartScheduler+0xec>)
 80066fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d0ef      	beq.n	80066f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006716:	4b25      	ldr	r3, [pc, #148]	; (80067ac <xPortStartScheduler+0xec>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f1c3 0307 	rsb	r3, r3, #7
 800671e:	2b04      	cmp	r3, #4
 8006720:	d00c      	beq.n	800673c <xPortStartScheduler+0x7c>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	b672      	cpsid	i
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	b662      	cpsie	i
 8006736:	60bb      	str	r3, [r7, #8]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <xPortStartScheduler+0xec>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	4a1a      	ldr	r2, [pc, #104]	; (80067ac <xPortStartScheduler+0xec>)
 8006744:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006746:	4b19      	ldr	r3, [pc, #100]	; (80067ac <xPortStartScheduler+0xec>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800674e:	4a17      	ldr	r2, [pc, #92]	; (80067ac <xPortStartScheduler+0xec>)
 8006750:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <xPortStartScheduler+0xf0>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a14      	ldr	r2, [pc, #80]	; (80067b0 <xPortStartScheduler+0xf0>)
 8006760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006764:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006766:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <xPortStartScheduler+0xf0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a11      	ldr	r2, [pc, #68]	; (80067b0 <xPortStartScheduler+0xf0>)
 800676c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006770:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006772:	f000 f8dd 	bl	8006930 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006776:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <xPortStartScheduler+0xf4>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800677c:	f000 f8fc 	bl	8006978 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <xPortStartScheduler+0xf8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0c      	ldr	r2, [pc, #48]	; (80067b8 <xPortStartScheduler+0xf8>)
 8006786:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800678a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800678c:	f7ff ff84 	bl	8006698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006790:	f7fe ff4c 	bl	800562c <vTaskSwitchContext>
	prvTaskExitError();
 8006794:	f7ff ff3a 	bl	800660c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	e000e400 	.word	0xe000e400
 80067a8:	20000a3c 	.word	0x20000a3c
 80067ac:	20000a40 	.word	0x20000a40
 80067b0:	e000ed20 	.word	0xe000ed20
 80067b4:	20000040 	.word	0x20000040
 80067b8:	e000ef34 	.word	0xe000ef34

080067bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	b672      	cpsid	i
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	b662      	cpsie	i
 80067d6:	607b      	str	r3, [r7, #4]
}
 80067d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067da:	4b10      	ldr	r3, [pc, #64]	; (800681c <vPortEnterCritical+0x60>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3301      	adds	r3, #1
 80067e0:	4a0e      	ldr	r2, [pc, #56]	; (800681c <vPortEnterCritical+0x60>)
 80067e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <vPortEnterCritical+0x60>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d111      	bne.n	8006810 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <vPortEnterCritical+0x64>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00c      	beq.n	8006810 <vPortEnterCritical+0x54>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	b672      	cpsid	i
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	b662      	cpsie	i
 800680a:	603b      	str	r3, [r7, #0]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <vPortEnterCritical+0x52>
	}
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20000040 	.word	0x20000040
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800682a:	4b13      	ldr	r3, [pc, #76]	; (8006878 <vPortExitCritical+0x54>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10c      	bne.n	800684c <vPortExitCritical+0x28>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	b672      	cpsid	i
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	b662      	cpsie	i
 8006846:	607b      	str	r3, [r7, #4]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <vPortExitCritical+0x54>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3b01      	subs	r3, #1
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <vPortExitCritical+0x54>)
 8006854:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006856:	4b08      	ldr	r3, [pc, #32]	; (8006878 <vPortExitCritical+0x54>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <vPortExitCritical+0x46>
 800685e:	2300      	movs	r3, #0
 8006860:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	f383 8811 	msr	BASEPRI, r3
}
 8006868:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	20000040 	.word	0x20000040
 800687c:	00000000 	.word	0x00000000

08006880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006880:	f3ef 8009 	mrs	r0, PSP
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <pxCurrentTCBConst>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	f01e 0f10 	tst.w	lr, #16
 8006890:	bf08      	it	eq
 8006892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689a:	6010      	str	r0, [r2, #0]
 800689c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068a4:	b672      	cpsid	i
 80068a6:	f380 8811 	msr	BASEPRI, r0
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	b662      	cpsie	i
 80068b4:	f7fe feba 	bl	800562c <vTaskSwitchContext>
 80068b8:	f04f 0000 	mov.w	r0, #0
 80068bc:	f380 8811 	msr	BASEPRI, r0
 80068c0:	bc09      	pop	{r0, r3}
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	f01e 0f10 	tst.w	lr, #16
 80068ce:	bf08      	it	eq
 80068d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068d4:	f380 8809 	msr	PSP, r0
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop

080068e0 <pxCurrentTCBConst>:
 80068e0:	200007a8 	.word	0x200007a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	b672      	cpsid	i
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	b662      	cpsie	i
 8006902:	607b      	str	r3, [r7, #4]
}
 8006904:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006906:	f7fe fdd5 	bl	80054b4 <xTaskIncrementTick>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <xPortSysTickHandler+0x44>)
 8006912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	f383 8811 	msr	BASEPRI, r3
}
 8006922:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006934:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <vPortSetupTimerInterrupt+0x34>)
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800693a:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <vPortSetupTimerInterrupt+0x38>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <vPortSetupTimerInterrupt+0x3c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a0a      	ldr	r2, [pc, #40]	; (8006970 <vPortSetupTimerInterrupt+0x40>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	099b      	lsrs	r3, r3, #6
 800694c:	4a09      	ldr	r2, [pc, #36]	; (8006974 <vPortSetupTimerInterrupt+0x44>)
 800694e:	3b01      	subs	r3, #1
 8006950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006952:	4b04      	ldr	r3, [pc, #16]	; (8006964 <vPortSetupTimerInterrupt+0x34>)
 8006954:	2207      	movs	r2, #7
 8006956:	601a      	str	r2, [r3, #0]
}
 8006958:	bf00      	nop
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	e000e010 	.word	0xe000e010
 8006968:	e000e018 	.word	0xe000e018
 800696c:	20000034 	.word	0x20000034
 8006970:	10624dd3 	.word	0x10624dd3
 8006974:	e000e014 	.word	0xe000e014

08006978 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006978:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006988 <vPortEnableVFP+0x10>
 800697c:	6801      	ldr	r1, [r0, #0]
 800697e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006982:	6001      	str	r1, [r0, #0]
 8006984:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006986:	bf00      	nop
 8006988:	e000ed88 	.word	0xe000ed88

0800698c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006992:	f3ef 8305 	mrs	r3, IPSR
 8006996:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b0f      	cmp	r3, #15
 800699c:	d916      	bls.n	80069cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800699e:	4a19      	ldr	r2, [pc, #100]	; (8006a04 <vPortValidateInterruptPriority+0x78>)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069a8:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <vPortValidateInterruptPriority+0x7c>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	7afa      	ldrb	r2, [r7, #11]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d20c      	bcs.n	80069cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	b672      	cpsid	i
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	b662      	cpsie	i
 80069c6:	607b      	str	r3, [r7, #4]
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069cc:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <vPortValidateInterruptPriority+0x80>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069d4:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <vPortValidateInterruptPriority+0x84>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d90c      	bls.n	80069f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	b672      	cpsid	i
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	b662      	cpsie	i
 80069f0:	603b      	str	r3, [r7, #0]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <vPortValidateInterruptPriority+0x68>
	}
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	e000e3f0 	.word	0xe000e3f0
 8006a08:	20000a3c 	.word	0x20000a3c
 8006a0c:	e000ed0c 	.word	0xe000ed0c
 8006a10:	20000a40 	.word	0x20000a40

08006a14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a20:	f7fe fc8a 	bl	8005338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a24:	4b5b      	ldr	r3, [pc, #364]	; (8006b94 <pvPortMalloc+0x180>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a2c:	f000 f91a 	bl	8006c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a30:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <pvPortMalloc+0x184>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4013      	ands	r3, r2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f040 8092 	bne.w	8006b62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01f      	beq.n	8006a84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006a44:	2208      	movs	r2, #8
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4413      	add	r3, r2
 8006a4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d016      	beq.n	8006a84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f023 0307 	bic.w	r3, r3, #7
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <pvPortMalloc+0x70>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	b672      	cpsid	i
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	b662      	cpsie	i
 8006a7e:	617b      	str	r3, [r7, #20]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d06b      	beq.n	8006b62 <pvPortMalloc+0x14e>
 8006a8a:	4b44      	ldr	r3, [pc, #272]	; (8006b9c <pvPortMalloc+0x188>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d866      	bhi.n	8006b62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a94:	4b42      	ldr	r3, [pc, #264]	; (8006ba0 <pvPortMalloc+0x18c>)
 8006a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a98:	4b41      	ldr	r3, [pc, #260]	; (8006ba0 <pvPortMalloc+0x18c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a9e:	e004      	b.n	8006aaa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d903      	bls.n	8006abc <pvPortMalloc+0xa8>
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f1      	bne.n	8006aa0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006abc:	4b35      	ldr	r3, [pc, #212]	; (8006b94 <pvPortMalloc+0x180>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d04d      	beq.n	8006b62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2208      	movs	r2, #8
 8006acc:	4413      	add	r3, r2
 8006ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d921      	bls.n	8006b2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <pvPortMalloc+0x100>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	b672      	cpsid	i
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	b662      	cpsie	i
 8006b0e:	613b      	str	r3, [r7, #16]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b26:	69b8      	ldr	r0, [r7, #24]
 8006b28:	f000 f8fe 	bl	8006d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <pvPortMalloc+0x188>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	4a19      	ldr	r2, [pc, #100]	; (8006b9c <pvPortMalloc+0x188>)
 8006b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <pvPortMalloc+0x188>)
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <pvPortMalloc+0x190>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d203      	bcs.n	8006b4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <pvPortMalloc+0x188>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a16      	ldr	r2, [pc, #88]	; (8006ba4 <pvPortMalloc+0x190>)
 8006b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <pvPortMalloc+0x184>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b62:	f7fe fbf7 	bl	8005354 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <pvPortMalloc+0x176>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	b672      	cpsid	i
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	b662      	cpsie	i
 8006b84:	60fb      	str	r3, [r7, #12]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <pvPortMalloc+0x174>
	return pvReturn;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3728      	adds	r7, #40	; 0x28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20005a4c 	.word	0x20005a4c
 8006b98:	20005a58 	.word	0x20005a58
 8006b9c:	20005a50 	.word	0x20005a50
 8006ba0:	20005a44 	.word	0x20005a44
 8006ba4:	20005a54 	.word	0x20005a54

08006ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d04c      	beq.n	8006c54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bba:	2308      	movs	r3, #8
 8006bbc:	425b      	negs	r3, r3
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <vPortFree+0xb4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10c      	bne.n	8006bf0 <vPortFree+0x48>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	b672      	cpsid	i
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	b662      	cpsie	i
 8006bea:	60fb      	str	r3, [r7, #12]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00c      	beq.n	8006c12 <vPortFree+0x6a>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	b672      	cpsid	i
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	b662      	cpsie	i
 8006c0c:	60bb      	str	r3, [r7, #8]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <vPortFree+0xb4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d019      	beq.n	8006c54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d115      	bne.n	8006c54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <vPortFree+0xb4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	401a      	ands	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c38:	f7fe fb7e 	bl	8005338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <vPortFree+0xb8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	4a06      	ldr	r2, [pc, #24]	; (8006c60 <vPortFree+0xb8>)
 8006c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c4a:	6938      	ldr	r0, [r7, #16]
 8006c4c:	f000 f86c 	bl	8006d28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c50:	f7fe fb80 	bl	8005354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c54:	bf00      	nop
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20005a58 	.word	0x20005a58
 8006c60:	20005a50 	.word	0x20005a50

08006c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c6a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8006c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <prvHeapInit+0xac>)
 8006c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00c      	beq.n	8006c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3307      	adds	r3, #7
 8006c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	4a1f      	ldr	r2, [pc, #124]	; (8006d10 <prvHeapInit+0xac>)
 8006c94:	4413      	add	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <prvHeapInit+0xb0>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ca2:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <prvHeapInit+0xb0>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	4413      	add	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1a9b      	subs	r3, r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0307 	bic.w	r3, r3, #7
 8006cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <prvHeapInit+0xb4>)
 8006cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <prvHeapInit+0xb4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cce:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <prvHeapInit+0xb4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <prvHeapInit+0xb4>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4a0a      	ldr	r2, [pc, #40]	; (8006d1c <prvHeapInit+0xb8>)
 8006cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <prvHeapInit+0xbc>)
 8006cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <prvHeapInit+0xc0>)
 8006cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	20000a44 	.word	0x20000a44
 8006d14:	20005a44 	.word	0x20005a44
 8006d18:	20005a4c 	.word	0x20005a4c
 8006d1c:	20005a54 	.word	0x20005a54
 8006d20:	20005a50 	.word	0x20005a50
 8006d24:	20005a58 	.word	0x20005a58

08006d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d30:	4b28      	ldr	r3, [pc, #160]	; (8006dd4 <prvInsertBlockIntoFreeList+0xac>)
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e002      	b.n	8006d3c <prvInsertBlockIntoFreeList+0x14>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d8f7      	bhi.n	8006d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	4413      	add	r3, r2
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d108      	bne.n	8006d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	441a      	add	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	441a      	add	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d118      	bne.n	8006db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d00d      	beq.n	8006da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	441a      	add	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e008      	b.n	8006db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006da6:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	e003      	b.n	8006db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d002      	beq.n	8006dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20005a44 	.word	0x20005a44
 8006dd8:	20005a4c 	.word	0x20005a4c

08006ddc <rand>:
 8006ddc:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <rand+0x5c>)
 8006dde:	b510      	push	{r4, lr}
 8006de0:	681c      	ldr	r4, [r3, #0]
 8006de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006de4:	b9b3      	cbnz	r3, 8006e14 <rand+0x38>
 8006de6:	2018      	movs	r0, #24
 8006de8:	f000 fb1e 	bl	8007428 <malloc>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6320      	str	r0, [r4, #48]	; 0x30
 8006df0:	b920      	cbnz	r0, 8006dfc <rand+0x20>
 8006df2:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <rand+0x60>)
 8006df4:	4812      	ldr	r0, [pc, #72]	; (8006e40 <rand+0x64>)
 8006df6:	2152      	movs	r1, #82	; 0x52
 8006df8:	f000 faac 	bl	8007354 <__assert_func>
 8006dfc:	4911      	ldr	r1, [pc, #68]	; (8006e44 <rand+0x68>)
 8006dfe:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <rand+0x6c>)
 8006e00:	e9c0 1300 	strd	r1, r3, [r0]
 8006e04:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <rand+0x70>)
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	230b      	movs	r3, #11
 8006e0a:	8183      	strh	r3, [r0, #12]
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	2001      	movs	r0, #1
 8006e10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006e14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e16:	480e      	ldr	r0, [pc, #56]	; (8006e50 <rand+0x74>)
 8006e18:	690b      	ldr	r3, [r1, #16]
 8006e1a:	694c      	ldr	r4, [r1, #20]
 8006e1c:	4a0d      	ldr	r2, [pc, #52]	; (8006e54 <rand+0x78>)
 8006e1e:	4358      	muls	r0, r3
 8006e20:	fb02 0004 	mla	r0, r2, r4, r0
 8006e24:	fba3 3202 	umull	r3, r2, r3, r2
 8006e28:	3301      	adds	r3, #1
 8006e2a:	eb40 0002 	adc.w	r0, r0, r2
 8006e2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006e32:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006e36:	bd10      	pop	{r4, pc}
 8006e38:	2000009c 	.word	0x2000009c
 8006e3c:	080085e4 	.word	0x080085e4
 8006e40:	080085fb 	.word	0x080085fb
 8006e44:	abcd330e 	.word	0xabcd330e
 8006e48:	e66d1234 	.word	0xe66d1234
 8006e4c:	0005deec 	.word	0x0005deec
 8006e50:	5851f42d 	.word	0x5851f42d
 8006e54:	4c957f2d 	.word	0x4c957f2d

08006e58 <std>:
 8006e58:	2300      	movs	r3, #0
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e66:	6083      	str	r3, [r0, #8]
 8006e68:	8181      	strh	r1, [r0, #12]
 8006e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e6c:	81c2      	strh	r2, [r0, #14]
 8006e6e:	6183      	str	r3, [r0, #24]
 8006e70:	4619      	mov	r1, r3
 8006e72:	2208      	movs	r2, #8
 8006e74:	305c      	adds	r0, #92	; 0x5c
 8006e76:	f000 f9e5 	bl	8007244 <memset>
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <std+0x38>)
 8006e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <std+0x3c>)
 8006e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <std+0x40>)
 8006e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e86:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <std+0x44>)
 8006e88:	6224      	str	r4, [r4, #32]
 8006e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	bf00      	nop
 8006e90:	08007095 	.word	0x08007095
 8006e94:	080070b7 	.word	0x080070b7
 8006e98:	080070ef 	.word	0x080070ef
 8006e9c:	08007113 	.word	0x08007113

08006ea0 <stdio_exit_handler>:
 8006ea0:	4a02      	ldr	r2, [pc, #8]	; (8006eac <stdio_exit_handler+0xc>)
 8006ea2:	4903      	ldr	r1, [pc, #12]	; (8006eb0 <stdio_exit_handler+0x10>)
 8006ea4:	4803      	ldr	r0, [pc, #12]	; (8006eb4 <stdio_exit_handler+0x14>)
 8006ea6:	f000 b869 	b.w	8006f7c <_fwalk_sglue>
 8006eaa:	bf00      	nop
 8006eac:	20000044 	.word	0x20000044
 8006eb0:	08007c45 	.word	0x08007c45
 8006eb4:	20000050 	.word	0x20000050

08006eb8 <cleanup_stdio>:
 8006eb8:	6841      	ldr	r1, [r0, #4]
 8006eba:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <cleanup_stdio+0x34>)
 8006ebc:	4299      	cmp	r1, r3
 8006ebe:	b510      	push	{r4, lr}
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	d001      	beq.n	8006ec8 <cleanup_stdio+0x10>
 8006ec4:	f000 febe 	bl	8007c44 <_fflush_r>
 8006ec8:	68a1      	ldr	r1, [r4, #8]
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <cleanup_stdio+0x38>)
 8006ecc:	4299      	cmp	r1, r3
 8006ece:	d002      	beq.n	8006ed6 <cleanup_stdio+0x1e>
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 feb7 	bl	8007c44 <_fflush_r>
 8006ed6:	68e1      	ldr	r1, [r4, #12]
 8006ed8:	4b06      	ldr	r3, [pc, #24]	; (8006ef4 <cleanup_stdio+0x3c>)
 8006eda:	4299      	cmp	r1, r3
 8006edc:	d004      	beq.n	8006ee8 <cleanup_stdio+0x30>
 8006ede:	4620      	mov	r0, r4
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	f000 beae 	b.w	8007c44 <_fflush_r>
 8006ee8:	bd10      	pop	{r4, pc}
 8006eea:	bf00      	nop
 8006eec:	20005a5c 	.word	0x20005a5c
 8006ef0:	20005ac4 	.word	0x20005ac4
 8006ef4:	20005b2c 	.word	0x20005b2c

08006ef8 <global_stdio_init.part.0>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <global_stdio_init.part.0+0x30>)
 8006efc:	4c0b      	ldr	r4, [pc, #44]	; (8006f2c <global_stdio_init.part.0+0x34>)
 8006efe:	4a0c      	ldr	r2, [pc, #48]	; (8006f30 <global_stdio_init.part.0+0x38>)
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	4620      	mov	r0, r4
 8006f04:	2200      	movs	r2, #0
 8006f06:	2104      	movs	r1, #4
 8006f08:	f7ff ffa6 	bl	8006e58 <std>
 8006f0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f10:	2201      	movs	r2, #1
 8006f12:	2109      	movs	r1, #9
 8006f14:	f7ff ffa0 	bl	8006e58 <std>
 8006f18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f22:	2112      	movs	r1, #18
 8006f24:	f7ff bf98 	b.w	8006e58 <std>
 8006f28:	20005b94 	.word	0x20005b94
 8006f2c:	20005a5c 	.word	0x20005a5c
 8006f30:	08006ea1 	.word	0x08006ea1

08006f34 <__sfp_lock_acquire>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__sfp_lock_acquire+0x8>)
 8006f36:	f000 b9fd 	b.w	8007334 <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20005b9d 	.word	0x20005b9d

08006f40 <__sfp_lock_release>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__sfp_lock_release+0x8>)
 8006f42:	f000 b9f8 	b.w	8007336 <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	20005b9d 	.word	0x20005b9d

08006f4c <__sinit>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4604      	mov	r4, r0
 8006f50:	f7ff fff0 	bl	8006f34 <__sfp_lock_acquire>
 8006f54:	6a23      	ldr	r3, [r4, #32]
 8006f56:	b11b      	cbz	r3, 8006f60 <__sinit+0x14>
 8006f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5c:	f7ff bff0 	b.w	8006f40 <__sfp_lock_release>
 8006f60:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <__sinit+0x28>)
 8006f62:	6223      	str	r3, [r4, #32]
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <__sinit+0x2c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1f5      	bne.n	8006f58 <__sinit+0xc>
 8006f6c:	f7ff ffc4 	bl	8006ef8 <global_stdio_init.part.0>
 8006f70:	e7f2      	b.n	8006f58 <__sinit+0xc>
 8006f72:	bf00      	nop
 8006f74:	08006eb9 	.word	0x08006eb9
 8006f78:	20005b94 	.word	0x20005b94

08006f7c <_fwalk_sglue>:
 8006f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	4607      	mov	r7, r0
 8006f82:	4688      	mov	r8, r1
 8006f84:	4614      	mov	r4, r2
 8006f86:	2600      	movs	r6, #0
 8006f88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f8c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f90:	d505      	bpl.n	8006f9e <_fwalk_sglue+0x22>
 8006f92:	6824      	ldr	r4, [r4, #0]
 8006f94:	2c00      	cmp	r4, #0
 8006f96:	d1f7      	bne.n	8006f88 <_fwalk_sglue+0xc>
 8006f98:	4630      	mov	r0, r6
 8006f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9e:	89ab      	ldrh	r3, [r5, #12]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d907      	bls.n	8006fb4 <_fwalk_sglue+0x38>
 8006fa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	d003      	beq.n	8006fb4 <_fwalk_sglue+0x38>
 8006fac:	4629      	mov	r1, r5
 8006fae:	4638      	mov	r0, r7
 8006fb0:	47c0      	blx	r8
 8006fb2:	4306      	orrs	r6, r0
 8006fb4:	3568      	adds	r5, #104	; 0x68
 8006fb6:	e7e9      	b.n	8006f8c <_fwalk_sglue+0x10>

08006fb8 <iprintf>:
 8006fb8:	b40f      	push	{r0, r1, r2, r3}
 8006fba:	b507      	push	{r0, r1, r2, lr}
 8006fbc:	4906      	ldr	r1, [pc, #24]	; (8006fd8 <iprintf+0x20>)
 8006fbe:	ab04      	add	r3, sp, #16
 8006fc0:	6808      	ldr	r0, [r1, #0]
 8006fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc6:	6881      	ldr	r1, [r0, #8]
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	f000 fb0b 	bl	80075e4 <_vfiprintf_r>
 8006fce:	b003      	add	sp, #12
 8006fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fd4:	b004      	add	sp, #16
 8006fd6:	4770      	bx	lr
 8006fd8:	2000009c 	.word	0x2000009c

08006fdc <_puts_r>:
 8006fdc:	6a03      	ldr	r3, [r0, #32]
 8006fde:	b570      	push	{r4, r5, r6, lr}
 8006fe0:	6884      	ldr	r4, [r0, #8]
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	b90b      	cbnz	r3, 8006fec <_puts_r+0x10>
 8006fe8:	f7ff ffb0 	bl	8006f4c <__sinit>
 8006fec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fee:	07db      	lsls	r3, r3, #31
 8006ff0:	d405      	bmi.n	8006ffe <_puts_r+0x22>
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	0598      	lsls	r0, r3, #22
 8006ff6:	d402      	bmi.n	8006ffe <_puts_r+0x22>
 8006ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ffa:	f000 f99b 	bl	8007334 <__retarget_lock_acquire_recursive>
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	0719      	lsls	r1, r3, #28
 8007002:	d513      	bpl.n	800702c <_puts_r+0x50>
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	b18b      	cbz	r3, 800702c <_puts_r+0x50>
 8007008:	3e01      	subs	r6, #1
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007010:	3b01      	subs	r3, #1
 8007012:	60a3      	str	r3, [r4, #8]
 8007014:	b9e9      	cbnz	r1, 8007052 <_puts_r+0x76>
 8007016:	2b00      	cmp	r3, #0
 8007018:	da2e      	bge.n	8007078 <_puts_r+0x9c>
 800701a:	4622      	mov	r2, r4
 800701c:	210a      	movs	r1, #10
 800701e:	4628      	mov	r0, r5
 8007020:	f000 f87b 	bl	800711a <__swbuf_r>
 8007024:	3001      	adds	r0, #1
 8007026:	d007      	beq.n	8007038 <_puts_r+0x5c>
 8007028:	250a      	movs	r5, #10
 800702a:	e007      	b.n	800703c <_puts_r+0x60>
 800702c:	4621      	mov	r1, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f000 f8b0 	bl	8007194 <__swsetup_r>
 8007034:	2800      	cmp	r0, #0
 8007036:	d0e7      	beq.n	8007008 <_puts_r+0x2c>
 8007038:	f04f 35ff 	mov.w	r5, #4294967295
 800703c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800703e:	07da      	lsls	r2, r3, #31
 8007040:	d405      	bmi.n	800704e <_puts_r+0x72>
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	059b      	lsls	r3, r3, #22
 8007046:	d402      	bmi.n	800704e <_puts_r+0x72>
 8007048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800704a:	f000 f974 	bl	8007336 <__retarget_lock_release_recursive>
 800704e:	4628      	mov	r0, r5
 8007050:	bd70      	pop	{r4, r5, r6, pc}
 8007052:	2b00      	cmp	r3, #0
 8007054:	da04      	bge.n	8007060 <_puts_r+0x84>
 8007056:	69a2      	ldr	r2, [r4, #24]
 8007058:	429a      	cmp	r2, r3
 800705a:	dc06      	bgt.n	800706a <_puts_r+0x8e>
 800705c:	290a      	cmp	r1, #10
 800705e:	d004      	beq.n	800706a <_puts_r+0x8e>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	6022      	str	r2, [r4, #0]
 8007066:	7019      	strb	r1, [r3, #0]
 8007068:	e7cf      	b.n	800700a <_puts_r+0x2e>
 800706a:	4622      	mov	r2, r4
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f854 	bl	800711a <__swbuf_r>
 8007072:	3001      	adds	r0, #1
 8007074:	d1c9      	bne.n	800700a <_puts_r+0x2e>
 8007076:	e7df      	b.n	8007038 <_puts_r+0x5c>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	250a      	movs	r5, #10
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	6022      	str	r2, [r4, #0]
 8007080:	701d      	strb	r5, [r3, #0]
 8007082:	e7db      	b.n	800703c <_puts_r+0x60>

08007084 <puts>:
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <puts+0xc>)
 8007086:	4601      	mov	r1, r0
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	f7ff bfa7 	b.w	8006fdc <_puts_r>
 800708e:	bf00      	nop
 8007090:	2000009c 	.word	0x2000009c

08007094 <__sread>:
 8007094:	b510      	push	{r4, lr}
 8007096:	460c      	mov	r4, r1
 8007098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709c:	f000 f8fc 	bl	8007298 <_read_r>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	bfab      	itete	ge
 80070a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070a6:	89a3      	ldrhlt	r3, [r4, #12]
 80070a8:	181b      	addge	r3, r3, r0
 80070aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070ae:	bfac      	ite	ge
 80070b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80070b2:	81a3      	strhlt	r3, [r4, #12]
 80070b4:	bd10      	pop	{r4, pc}

080070b6 <__swrite>:
 80070b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ba:	461f      	mov	r7, r3
 80070bc:	898b      	ldrh	r3, [r1, #12]
 80070be:	05db      	lsls	r3, r3, #23
 80070c0:	4605      	mov	r5, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	4616      	mov	r6, r2
 80070c6:	d505      	bpl.n	80070d4 <__swrite+0x1e>
 80070c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070cc:	2302      	movs	r3, #2
 80070ce:	2200      	movs	r2, #0
 80070d0:	f000 f8d0 	bl	8007274 <_lseek_r>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	4632      	mov	r2, r6
 80070e2:	463b      	mov	r3, r7
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ea:	f000 b8e7 	b.w	80072bc <_write_r>

080070ee <__sseek>:
 80070ee:	b510      	push	{r4, lr}
 80070f0:	460c      	mov	r4, r1
 80070f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f6:	f000 f8bd 	bl	8007274 <_lseek_r>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	bf15      	itete	ne
 8007100:	6560      	strne	r0, [r4, #84]	; 0x54
 8007102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800710a:	81a3      	strheq	r3, [r4, #12]
 800710c:	bf18      	it	ne
 800710e:	81a3      	strhne	r3, [r4, #12]
 8007110:	bd10      	pop	{r4, pc}

08007112 <__sclose>:
 8007112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007116:	f000 b89d 	b.w	8007254 <_close_r>

0800711a <__swbuf_r>:
 800711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711c:	460e      	mov	r6, r1
 800711e:	4614      	mov	r4, r2
 8007120:	4605      	mov	r5, r0
 8007122:	b118      	cbz	r0, 800712c <__swbuf_r+0x12>
 8007124:	6a03      	ldr	r3, [r0, #32]
 8007126:	b90b      	cbnz	r3, 800712c <__swbuf_r+0x12>
 8007128:	f7ff ff10 	bl	8006f4c <__sinit>
 800712c:	69a3      	ldr	r3, [r4, #24]
 800712e:	60a3      	str	r3, [r4, #8]
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	071a      	lsls	r2, r3, #28
 8007134:	d525      	bpl.n	8007182 <__swbuf_r+0x68>
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	b31b      	cbz	r3, 8007182 <__swbuf_r+0x68>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	6922      	ldr	r2, [r4, #16]
 800713e:	1a98      	subs	r0, r3, r2
 8007140:	6963      	ldr	r3, [r4, #20]
 8007142:	b2f6      	uxtb	r6, r6
 8007144:	4283      	cmp	r3, r0
 8007146:	4637      	mov	r7, r6
 8007148:	dc04      	bgt.n	8007154 <__swbuf_r+0x3a>
 800714a:	4621      	mov	r1, r4
 800714c:	4628      	mov	r0, r5
 800714e:	f000 fd79 	bl	8007c44 <_fflush_r>
 8007152:	b9e0      	cbnz	r0, 800718e <__swbuf_r+0x74>
 8007154:	68a3      	ldr	r3, [r4, #8]
 8007156:	3b01      	subs	r3, #1
 8007158:	60a3      	str	r3, [r4, #8]
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	6022      	str	r2, [r4, #0]
 8007160:	701e      	strb	r6, [r3, #0]
 8007162:	6962      	ldr	r2, [r4, #20]
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	429a      	cmp	r2, r3
 8007168:	d004      	beq.n	8007174 <__swbuf_r+0x5a>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	07db      	lsls	r3, r3, #31
 800716e:	d506      	bpl.n	800717e <__swbuf_r+0x64>
 8007170:	2e0a      	cmp	r6, #10
 8007172:	d104      	bne.n	800717e <__swbuf_r+0x64>
 8007174:	4621      	mov	r1, r4
 8007176:	4628      	mov	r0, r5
 8007178:	f000 fd64 	bl	8007c44 <_fflush_r>
 800717c:	b938      	cbnz	r0, 800718e <__swbuf_r+0x74>
 800717e:	4638      	mov	r0, r7
 8007180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	f000 f805 	bl	8007194 <__swsetup_r>
 800718a:	2800      	cmp	r0, #0
 800718c:	d0d5      	beq.n	800713a <__swbuf_r+0x20>
 800718e:	f04f 37ff 	mov.w	r7, #4294967295
 8007192:	e7f4      	b.n	800717e <__swbuf_r+0x64>

08007194 <__swsetup_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	4b2a      	ldr	r3, [pc, #168]	; (8007240 <__swsetup_r+0xac>)
 8007198:	4605      	mov	r5, r0
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	460c      	mov	r4, r1
 800719e:	b118      	cbz	r0, 80071a8 <__swsetup_r+0x14>
 80071a0:	6a03      	ldr	r3, [r0, #32]
 80071a2:	b90b      	cbnz	r3, 80071a8 <__swsetup_r+0x14>
 80071a4:	f7ff fed2 	bl	8006f4c <__sinit>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071ae:	0718      	lsls	r0, r3, #28
 80071b0:	d422      	bmi.n	80071f8 <__swsetup_r+0x64>
 80071b2:	06d9      	lsls	r1, r3, #27
 80071b4:	d407      	bmi.n	80071c6 <__swsetup_r+0x32>
 80071b6:	2309      	movs	r3, #9
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	e034      	b.n	8007230 <__swsetup_r+0x9c>
 80071c6:	0758      	lsls	r0, r3, #29
 80071c8:	d512      	bpl.n	80071f0 <__swsetup_r+0x5c>
 80071ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071cc:	b141      	cbz	r1, 80071e0 <__swsetup_r+0x4c>
 80071ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071d2:	4299      	cmp	r1, r3
 80071d4:	d002      	beq.n	80071dc <__swsetup_r+0x48>
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 f8da 	bl	8007390 <_free_r>
 80071dc:	2300      	movs	r3, #0
 80071de:	6363      	str	r3, [r4, #52]	; 0x34
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	2300      	movs	r3, #0
 80071ea:	6063      	str	r3, [r4, #4]
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	f043 0308 	orr.w	r3, r3, #8
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	b94b      	cbnz	r3, 8007210 <__swsetup_r+0x7c>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007206:	d003      	beq.n	8007210 <__swsetup_r+0x7c>
 8007208:	4621      	mov	r1, r4
 800720a:	4628      	mov	r0, r5
 800720c:	f000 fd7a 	bl	8007d04 <__smakebuf_r>
 8007210:	89a0      	ldrh	r0, [r4, #12]
 8007212:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007216:	f010 0301 	ands.w	r3, r0, #1
 800721a:	d00a      	beq.n	8007232 <__swsetup_r+0x9e>
 800721c:	2300      	movs	r3, #0
 800721e:	60a3      	str	r3, [r4, #8]
 8007220:	6963      	ldr	r3, [r4, #20]
 8007222:	425b      	negs	r3, r3
 8007224:	61a3      	str	r3, [r4, #24]
 8007226:	6923      	ldr	r3, [r4, #16]
 8007228:	b943      	cbnz	r3, 800723c <__swsetup_r+0xa8>
 800722a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800722e:	d1c4      	bne.n	80071ba <__swsetup_r+0x26>
 8007230:	bd38      	pop	{r3, r4, r5, pc}
 8007232:	0781      	lsls	r1, r0, #30
 8007234:	bf58      	it	pl
 8007236:	6963      	ldrpl	r3, [r4, #20]
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	e7f4      	b.n	8007226 <__swsetup_r+0x92>
 800723c:	2000      	movs	r0, #0
 800723e:	e7f7      	b.n	8007230 <__swsetup_r+0x9c>
 8007240:	2000009c 	.word	0x2000009c

08007244 <memset>:
 8007244:	4402      	add	r2, r0
 8007246:	4603      	mov	r3, r0
 8007248:	4293      	cmp	r3, r2
 800724a:	d100      	bne.n	800724e <memset+0xa>
 800724c:	4770      	bx	lr
 800724e:	f803 1b01 	strb.w	r1, [r3], #1
 8007252:	e7f9      	b.n	8007248 <memset+0x4>

08007254 <_close_r>:
 8007254:	b538      	push	{r3, r4, r5, lr}
 8007256:	4d06      	ldr	r5, [pc, #24]	; (8007270 <_close_r+0x1c>)
 8007258:	2300      	movs	r3, #0
 800725a:	4604      	mov	r4, r0
 800725c:	4608      	mov	r0, r1
 800725e:	602b      	str	r3, [r5, #0]
 8007260:	f7fa f803 	bl	800126a <_close>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d102      	bne.n	800726e <_close_r+0x1a>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	b103      	cbz	r3, 800726e <_close_r+0x1a>
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	20005b98 	.word	0x20005b98

08007274 <_lseek_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d07      	ldr	r5, [pc, #28]	; (8007294 <_lseek_r+0x20>)
 8007278:	4604      	mov	r4, r0
 800727a:	4608      	mov	r0, r1
 800727c:	4611      	mov	r1, r2
 800727e:	2200      	movs	r2, #0
 8007280:	602a      	str	r2, [r5, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	f7fa f818 	bl	80012b8 <_lseek>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_lseek_r+0x1e>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_lseek_r+0x1e>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	20005b98 	.word	0x20005b98

08007298 <_read_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	; (80072b8 <_read_r+0x20>)
 800729c:	4604      	mov	r4, r0
 800729e:	4608      	mov	r0, r1
 80072a0:	4611      	mov	r1, r2
 80072a2:	2200      	movs	r2, #0
 80072a4:	602a      	str	r2, [r5, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f7f9 ffa6 	bl	80011f8 <_read>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_read_r+0x1e>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_read_r+0x1e>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	20005b98 	.word	0x20005b98

080072bc <_write_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_write_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7f9 ffb1 	bl	8001232 <_write>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_write_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_write_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20005b98 	.word	0x20005b98

080072e0 <__errno>:
 80072e0:	4b01      	ldr	r3, [pc, #4]	; (80072e8 <__errno+0x8>)
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	2000009c 	.word	0x2000009c

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4d0d      	ldr	r5, [pc, #52]	; (8007324 <__libc_init_array+0x38>)
 80072f0:	4c0d      	ldr	r4, [pc, #52]	; (8007328 <__libc_init_array+0x3c>)
 80072f2:	1b64      	subs	r4, r4, r5
 80072f4:	10a4      	asrs	r4, r4, #2
 80072f6:	2600      	movs	r6, #0
 80072f8:	42a6      	cmp	r6, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	4d0b      	ldr	r5, [pc, #44]	; (800732c <__libc_init_array+0x40>)
 80072fe:	4c0c      	ldr	r4, [pc, #48]	; (8007330 <__libc_init_array+0x44>)
 8007300:	f000 fdba 	bl	8007e78 <_init>
 8007304:	1b64      	subs	r4, r4, r5
 8007306:	10a4      	asrs	r4, r4, #2
 8007308:	2600      	movs	r6, #0
 800730a:	42a6      	cmp	r6, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f855 3b04 	ldr.w	r3, [r5], #4
 8007314:	4798      	blx	r3
 8007316:	3601      	adds	r6, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f855 3b04 	ldr.w	r3, [r5], #4
 800731e:	4798      	blx	r3
 8007320:	3601      	adds	r6, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	080086cc 	.word	0x080086cc
 8007328:	080086cc 	.word	0x080086cc
 800732c:	080086cc 	.word	0x080086cc
 8007330:	080086d0 	.word	0x080086d0

08007334 <__retarget_lock_acquire_recursive>:
 8007334:	4770      	bx	lr

08007336 <__retarget_lock_release_recursive>:
 8007336:	4770      	bx	lr

08007338 <memcpy>:
 8007338:	440a      	add	r2, r1
 800733a:	4291      	cmp	r1, r2
 800733c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007340:	d100      	bne.n	8007344 <memcpy+0xc>
 8007342:	4770      	bx	lr
 8007344:	b510      	push	{r4, lr}
 8007346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800734e:	4291      	cmp	r1, r2
 8007350:	d1f9      	bne.n	8007346 <memcpy+0xe>
 8007352:	bd10      	pop	{r4, pc}

08007354 <__assert_func>:
 8007354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007356:	4614      	mov	r4, r2
 8007358:	461a      	mov	r2, r3
 800735a:	4b09      	ldr	r3, [pc, #36]	; (8007380 <__assert_func+0x2c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4605      	mov	r5, r0
 8007360:	68d8      	ldr	r0, [r3, #12]
 8007362:	b14c      	cbz	r4, 8007378 <__assert_func+0x24>
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <__assert_func+0x30>)
 8007366:	9100      	str	r1, [sp, #0]
 8007368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800736c:	4906      	ldr	r1, [pc, #24]	; (8007388 <__assert_func+0x34>)
 800736e:	462b      	mov	r3, r5
 8007370:	f000 fc90 	bl	8007c94 <fiprintf>
 8007374:	f000 fd34 	bl	8007de0 <abort>
 8007378:	4b04      	ldr	r3, [pc, #16]	; (800738c <__assert_func+0x38>)
 800737a:	461c      	mov	r4, r3
 800737c:	e7f3      	b.n	8007366 <__assert_func+0x12>
 800737e:	bf00      	nop
 8007380:	2000009c 	.word	0x2000009c
 8007384:	08008653 	.word	0x08008653
 8007388:	08008660 	.word	0x08008660
 800738c:	0800868e 	.word	0x0800868e

08007390 <_free_r>:
 8007390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007392:	2900      	cmp	r1, #0
 8007394:	d044      	beq.n	8007420 <_free_r+0x90>
 8007396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739a:	9001      	str	r0, [sp, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	f1a1 0404 	sub.w	r4, r1, #4
 80073a2:	bfb8      	it	lt
 80073a4:	18e4      	addlt	r4, r4, r3
 80073a6:	f000 f8e7 	bl	8007578 <__malloc_lock>
 80073aa:	4a1e      	ldr	r2, [pc, #120]	; (8007424 <_free_r+0x94>)
 80073ac:	9801      	ldr	r0, [sp, #4]
 80073ae:	6813      	ldr	r3, [r2, #0]
 80073b0:	b933      	cbnz	r3, 80073c0 <_free_r+0x30>
 80073b2:	6063      	str	r3, [r4, #4]
 80073b4:	6014      	str	r4, [r2, #0]
 80073b6:	b003      	add	sp, #12
 80073b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073bc:	f000 b8e2 	b.w	8007584 <__malloc_unlock>
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	d908      	bls.n	80073d6 <_free_r+0x46>
 80073c4:	6825      	ldr	r5, [r4, #0]
 80073c6:	1961      	adds	r1, r4, r5
 80073c8:	428b      	cmp	r3, r1
 80073ca:	bf01      	itttt	eq
 80073cc:	6819      	ldreq	r1, [r3, #0]
 80073ce:	685b      	ldreq	r3, [r3, #4]
 80073d0:	1949      	addeq	r1, r1, r5
 80073d2:	6021      	streq	r1, [r4, #0]
 80073d4:	e7ed      	b.n	80073b2 <_free_r+0x22>
 80073d6:	461a      	mov	r2, r3
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	b10b      	cbz	r3, 80073e0 <_free_r+0x50>
 80073dc:	42a3      	cmp	r3, r4
 80073de:	d9fa      	bls.n	80073d6 <_free_r+0x46>
 80073e0:	6811      	ldr	r1, [r2, #0]
 80073e2:	1855      	adds	r5, r2, r1
 80073e4:	42a5      	cmp	r5, r4
 80073e6:	d10b      	bne.n	8007400 <_free_r+0x70>
 80073e8:	6824      	ldr	r4, [r4, #0]
 80073ea:	4421      	add	r1, r4
 80073ec:	1854      	adds	r4, r2, r1
 80073ee:	42a3      	cmp	r3, r4
 80073f0:	6011      	str	r1, [r2, #0]
 80073f2:	d1e0      	bne.n	80073b6 <_free_r+0x26>
 80073f4:	681c      	ldr	r4, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	6053      	str	r3, [r2, #4]
 80073fa:	440c      	add	r4, r1
 80073fc:	6014      	str	r4, [r2, #0]
 80073fe:	e7da      	b.n	80073b6 <_free_r+0x26>
 8007400:	d902      	bls.n	8007408 <_free_r+0x78>
 8007402:	230c      	movs	r3, #12
 8007404:	6003      	str	r3, [r0, #0]
 8007406:	e7d6      	b.n	80073b6 <_free_r+0x26>
 8007408:	6825      	ldr	r5, [r4, #0]
 800740a:	1961      	adds	r1, r4, r5
 800740c:	428b      	cmp	r3, r1
 800740e:	bf04      	itt	eq
 8007410:	6819      	ldreq	r1, [r3, #0]
 8007412:	685b      	ldreq	r3, [r3, #4]
 8007414:	6063      	str	r3, [r4, #4]
 8007416:	bf04      	itt	eq
 8007418:	1949      	addeq	r1, r1, r5
 800741a:	6021      	streq	r1, [r4, #0]
 800741c:	6054      	str	r4, [r2, #4]
 800741e:	e7ca      	b.n	80073b6 <_free_r+0x26>
 8007420:	b003      	add	sp, #12
 8007422:	bd30      	pop	{r4, r5, pc}
 8007424:	20005ba0 	.word	0x20005ba0

08007428 <malloc>:
 8007428:	4b02      	ldr	r3, [pc, #8]	; (8007434 <malloc+0xc>)
 800742a:	4601      	mov	r1, r0
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	f000 b823 	b.w	8007478 <_malloc_r>
 8007432:	bf00      	nop
 8007434:	2000009c 	.word	0x2000009c

08007438 <sbrk_aligned>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	4e0e      	ldr	r6, [pc, #56]	; (8007474 <sbrk_aligned+0x3c>)
 800743c:	460c      	mov	r4, r1
 800743e:	6831      	ldr	r1, [r6, #0]
 8007440:	4605      	mov	r5, r0
 8007442:	b911      	cbnz	r1, 800744a <sbrk_aligned+0x12>
 8007444:	f000 fcbc 	bl	8007dc0 <_sbrk_r>
 8007448:	6030      	str	r0, [r6, #0]
 800744a:	4621      	mov	r1, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f000 fcb7 	bl	8007dc0 <_sbrk_r>
 8007452:	1c43      	adds	r3, r0, #1
 8007454:	d00a      	beq.n	800746c <sbrk_aligned+0x34>
 8007456:	1cc4      	adds	r4, r0, #3
 8007458:	f024 0403 	bic.w	r4, r4, #3
 800745c:	42a0      	cmp	r0, r4
 800745e:	d007      	beq.n	8007470 <sbrk_aligned+0x38>
 8007460:	1a21      	subs	r1, r4, r0
 8007462:	4628      	mov	r0, r5
 8007464:	f000 fcac 	bl	8007dc0 <_sbrk_r>
 8007468:	3001      	adds	r0, #1
 800746a:	d101      	bne.n	8007470 <sbrk_aligned+0x38>
 800746c:	f04f 34ff 	mov.w	r4, #4294967295
 8007470:	4620      	mov	r0, r4
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	20005ba4 	.word	0x20005ba4

08007478 <_malloc_r>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	1ccd      	adds	r5, r1, #3
 800747e:	f025 0503 	bic.w	r5, r5, #3
 8007482:	3508      	adds	r5, #8
 8007484:	2d0c      	cmp	r5, #12
 8007486:	bf38      	it	cc
 8007488:	250c      	movcc	r5, #12
 800748a:	2d00      	cmp	r5, #0
 800748c:	4607      	mov	r7, r0
 800748e:	db01      	blt.n	8007494 <_malloc_r+0x1c>
 8007490:	42a9      	cmp	r1, r5
 8007492:	d905      	bls.n	80074a0 <_malloc_r+0x28>
 8007494:	230c      	movs	r3, #12
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	2600      	movs	r6, #0
 800749a:	4630      	mov	r0, r6
 800749c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007574 <_malloc_r+0xfc>
 80074a4:	f000 f868 	bl	8007578 <__malloc_lock>
 80074a8:	f8d8 3000 	ldr.w	r3, [r8]
 80074ac:	461c      	mov	r4, r3
 80074ae:	bb5c      	cbnz	r4, 8007508 <_malloc_r+0x90>
 80074b0:	4629      	mov	r1, r5
 80074b2:	4638      	mov	r0, r7
 80074b4:	f7ff ffc0 	bl	8007438 <sbrk_aligned>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	4604      	mov	r4, r0
 80074bc:	d155      	bne.n	800756a <_malloc_r+0xf2>
 80074be:	f8d8 4000 	ldr.w	r4, [r8]
 80074c2:	4626      	mov	r6, r4
 80074c4:	2e00      	cmp	r6, #0
 80074c6:	d145      	bne.n	8007554 <_malloc_r+0xdc>
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	d048      	beq.n	800755e <_malloc_r+0xe6>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	4631      	mov	r1, r6
 80074d0:	4638      	mov	r0, r7
 80074d2:	eb04 0903 	add.w	r9, r4, r3
 80074d6:	f000 fc73 	bl	8007dc0 <_sbrk_r>
 80074da:	4581      	cmp	r9, r0
 80074dc:	d13f      	bne.n	800755e <_malloc_r+0xe6>
 80074de:	6821      	ldr	r1, [r4, #0]
 80074e0:	1a6d      	subs	r5, r5, r1
 80074e2:	4629      	mov	r1, r5
 80074e4:	4638      	mov	r0, r7
 80074e6:	f7ff ffa7 	bl	8007438 <sbrk_aligned>
 80074ea:	3001      	adds	r0, #1
 80074ec:	d037      	beq.n	800755e <_malloc_r+0xe6>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	442b      	add	r3, r5
 80074f2:	6023      	str	r3, [r4, #0]
 80074f4:	f8d8 3000 	ldr.w	r3, [r8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d038      	beq.n	800756e <_malloc_r+0xf6>
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	42a2      	cmp	r2, r4
 8007500:	d12b      	bne.n	800755a <_malloc_r+0xe2>
 8007502:	2200      	movs	r2, #0
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	e00f      	b.n	8007528 <_malloc_r+0xb0>
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	1b52      	subs	r2, r2, r5
 800750c:	d41f      	bmi.n	800754e <_malloc_r+0xd6>
 800750e:	2a0b      	cmp	r2, #11
 8007510:	d917      	bls.n	8007542 <_malloc_r+0xca>
 8007512:	1961      	adds	r1, r4, r5
 8007514:	42a3      	cmp	r3, r4
 8007516:	6025      	str	r5, [r4, #0]
 8007518:	bf18      	it	ne
 800751a:	6059      	strne	r1, [r3, #4]
 800751c:	6863      	ldr	r3, [r4, #4]
 800751e:	bf08      	it	eq
 8007520:	f8c8 1000 	streq.w	r1, [r8]
 8007524:	5162      	str	r2, [r4, r5]
 8007526:	604b      	str	r3, [r1, #4]
 8007528:	4638      	mov	r0, r7
 800752a:	f104 060b 	add.w	r6, r4, #11
 800752e:	f000 f829 	bl	8007584 <__malloc_unlock>
 8007532:	f026 0607 	bic.w	r6, r6, #7
 8007536:	1d23      	adds	r3, r4, #4
 8007538:	1af2      	subs	r2, r6, r3
 800753a:	d0ae      	beq.n	800749a <_malloc_r+0x22>
 800753c:	1b9b      	subs	r3, r3, r6
 800753e:	50a3      	str	r3, [r4, r2]
 8007540:	e7ab      	b.n	800749a <_malloc_r+0x22>
 8007542:	42a3      	cmp	r3, r4
 8007544:	6862      	ldr	r2, [r4, #4]
 8007546:	d1dd      	bne.n	8007504 <_malloc_r+0x8c>
 8007548:	f8c8 2000 	str.w	r2, [r8]
 800754c:	e7ec      	b.n	8007528 <_malloc_r+0xb0>
 800754e:	4623      	mov	r3, r4
 8007550:	6864      	ldr	r4, [r4, #4]
 8007552:	e7ac      	b.n	80074ae <_malloc_r+0x36>
 8007554:	4634      	mov	r4, r6
 8007556:	6876      	ldr	r6, [r6, #4]
 8007558:	e7b4      	b.n	80074c4 <_malloc_r+0x4c>
 800755a:	4613      	mov	r3, r2
 800755c:	e7cc      	b.n	80074f8 <_malloc_r+0x80>
 800755e:	230c      	movs	r3, #12
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	4638      	mov	r0, r7
 8007564:	f000 f80e 	bl	8007584 <__malloc_unlock>
 8007568:	e797      	b.n	800749a <_malloc_r+0x22>
 800756a:	6025      	str	r5, [r4, #0]
 800756c:	e7dc      	b.n	8007528 <_malloc_r+0xb0>
 800756e:	605b      	str	r3, [r3, #4]
 8007570:	deff      	udf	#255	; 0xff
 8007572:	bf00      	nop
 8007574:	20005ba0 	.word	0x20005ba0

08007578 <__malloc_lock>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__malloc_lock+0x8>)
 800757a:	f7ff bedb 	b.w	8007334 <__retarget_lock_acquire_recursive>
 800757e:	bf00      	nop
 8007580:	20005b9c 	.word	0x20005b9c

08007584 <__malloc_unlock>:
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <__malloc_unlock+0x8>)
 8007586:	f7ff bed6 	b.w	8007336 <__retarget_lock_release_recursive>
 800758a:	bf00      	nop
 800758c:	20005b9c 	.word	0x20005b9c

08007590 <__sfputc_r>:
 8007590:	6893      	ldr	r3, [r2, #8]
 8007592:	3b01      	subs	r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	b410      	push	{r4}
 8007598:	6093      	str	r3, [r2, #8]
 800759a:	da08      	bge.n	80075ae <__sfputc_r+0x1e>
 800759c:	6994      	ldr	r4, [r2, #24]
 800759e:	42a3      	cmp	r3, r4
 80075a0:	db01      	blt.n	80075a6 <__sfputc_r+0x16>
 80075a2:	290a      	cmp	r1, #10
 80075a4:	d103      	bne.n	80075ae <__sfputc_r+0x1e>
 80075a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075aa:	f7ff bdb6 	b.w	800711a <__swbuf_r>
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	1c58      	adds	r0, r3, #1
 80075b2:	6010      	str	r0, [r2, #0]
 80075b4:	7019      	strb	r1, [r3, #0]
 80075b6:	4608      	mov	r0, r1
 80075b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075bc:	4770      	bx	lr

080075be <__sfputs_r>:
 80075be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c0:	4606      	mov	r6, r0
 80075c2:	460f      	mov	r7, r1
 80075c4:	4614      	mov	r4, r2
 80075c6:	18d5      	adds	r5, r2, r3
 80075c8:	42ac      	cmp	r4, r5
 80075ca:	d101      	bne.n	80075d0 <__sfputs_r+0x12>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e007      	b.n	80075e0 <__sfputs_r+0x22>
 80075d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d4:	463a      	mov	r2, r7
 80075d6:	4630      	mov	r0, r6
 80075d8:	f7ff ffda 	bl	8007590 <__sfputc_r>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d1f3      	bne.n	80075c8 <__sfputs_r+0xa>
 80075e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075e4 <_vfiprintf_r>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	460d      	mov	r5, r1
 80075ea:	b09d      	sub	sp, #116	; 0x74
 80075ec:	4614      	mov	r4, r2
 80075ee:	4698      	mov	r8, r3
 80075f0:	4606      	mov	r6, r0
 80075f2:	b118      	cbz	r0, 80075fc <_vfiprintf_r+0x18>
 80075f4:	6a03      	ldr	r3, [r0, #32]
 80075f6:	b90b      	cbnz	r3, 80075fc <_vfiprintf_r+0x18>
 80075f8:	f7ff fca8 	bl	8006f4c <__sinit>
 80075fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075fe:	07d9      	lsls	r1, r3, #31
 8007600:	d405      	bmi.n	800760e <_vfiprintf_r+0x2a>
 8007602:	89ab      	ldrh	r3, [r5, #12]
 8007604:	059a      	lsls	r2, r3, #22
 8007606:	d402      	bmi.n	800760e <_vfiprintf_r+0x2a>
 8007608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800760a:	f7ff fe93 	bl	8007334 <__retarget_lock_acquire_recursive>
 800760e:	89ab      	ldrh	r3, [r5, #12]
 8007610:	071b      	lsls	r3, r3, #28
 8007612:	d501      	bpl.n	8007618 <_vfiprintf_r+0x34>
 8007614:	692b      	ldr	r3, [r5, #16]
 8007616:	b99b      	cbnz	r3, 8007640 <_vfiprintf_r+0x5c>
 8007618:	4629      	mov	r1, r5
 800761a:	4630      	mov	r0, r6
 800761c:	f7ff fdba 	bl	8007194 <__swsetup_r>
 8007620:	b170      	cbz	r0, 8007640 <_vfiprintf_r+0x5c>
 8007622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007624:	07dc      	lsls	r4, r3, #31
 8007626:	d504      	bpl.n	8007632 <_vfiprintf_r+0x4e>
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	b01d      	add	sp, #116	; 0x74
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	0598      	lsls	r0, r3, #22
 8007636:	d4f7      	bmi.n	8007628 <_vfiprintf_r+0x44>
 8007638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800763a:	f7ff fe7c 	bl	8007336 <__retarget_lock_release_recursive>
 800763e:	e7f3      	b.n	8007628 <_vfiprintf_r+0x44>
 8007640:	2300      	movs	r3, #0
 8007642:	9309      	str	r3, [sp, #36]	; 0x24
 8007644:	2320      	movs	r3, #32
 8007646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764a:	f8cd 800c 	str.w	r8, [sp, #12]
 800764e:	2330      	movs	r3, #48	; 0x30
 8007650:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007804 <_vfiprintf_r+0x220>
 8007654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007658:	f04f 0901 	mov.w	r9, #1
 800765c:	4623      	mov	r3, r4
 800765e:	469a      	mov	sl, r3
 8007660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007664:	b10a      	cbz	r2, 800766a <_vfiprintf_r+0x86>
 8007666:	2a25      	cmp	r2, #37	; 0x25
 8007668:	d1f9      	bne.n	800765e <_vfiprintf_r+0x7a>
 800766a:	ebba 0b04 	subs.w	fp, sl, r4
 800766e:	d00b      	beq.n	8007688 <_vfiprintf_r+0xa4>
 8007670:	465b      	mov	r3, fp
 8007672:	4622      	mov	r2, r4
 8007674:	4629      	mov	r1, r5
 8007676:	4630      	mov	r0, r6
 8007678:	f7ff ffa1 	bl	80075be <__sfputs_r>
 800767c:	3001      	adds	r0, #1
 800767e:	f000 80a9 	beq.w	80077d4 <_vfiprintf_r+0x1f0>
 8007682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007684:	445a      	add	r2, fp
 8007686:	9209      	str	r2, [sp, #36]	; 0x24
 8007688:	f89a 3000 	ldrb.w	r3, [sl]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80a1 	beq.w	80077d4 <_vfiprintf_r+0x1f0>
 8007692:	2300      	movs	r3, #0
 8007694:	f04f 32ff 	mov.w	r2, #4294967295
 8007698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800769c:	f10a 0a01 	add.w	sl, sl, #1
 80076a0:	9304      	str	r3, [sp, #16]
 80076a2:	9307      	str	r3, [sp, #28]
 80076a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076a8:	931a      	str	r3, [sp, #104]	; 0x68
 80076aa:	4654      	mov	r4, sl
 80076ac:	2205      	movs	r2, #5
 80076ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b2:	4854      	ldr	r0, [pc, #336]	; (8007804 <_vfiprintf_r+0x220>)
 80076b4:	f7f8 fdac 	bl	8000210 <memchr>
 80076b8:	9a04      	ldr	r2, [sp, #16]
 80076ba:	b9d8      	cbnz	r0, 80076f4 <_vfiprintf_r+0x110>
 80076bc:	06d1      	lsls	r1, r2, #27
 80076be:	bf44      	itt	mi
 80076c0:	2320      	movmi	r3, #32
 80076c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c6:	0713      	lsls	r3, r2, #28
 80076c8:	bf44      	itt	mi
 80076ca:	232b      	movmi	r3, #43	; 0x2b
 80076cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d0:	f89a 3000 	ldrb.w	r3, [sl]
 80076d4:	2b2a      	cmp	r3, #42	; 0x2a
 80076d6:	d015      	beq.n	8007704 <_vfiprintf_r+0x120>
 80076d8:	9a07      	ldr	r2, [sp, #28]
 80076da:	4654      	mov	r4, sl
 80076dc:	2000      	movs	r0, #0
 80076de:	f04f 0c0a 	mov.w	ip, #10
 80076e2:	4621      	mov	r1, r4
 80076e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076e8:	3b30      	subs	r3, #48	; 0x30
 80076ea:	2b09      	cmp	r3, #9
 80076ec:	d94d      	bls.n	800778a <_vfiprintf_r+0x1a6>
 80076ee:	b1b0      	cbz	r0, 800771e <_vfiprintf_r+0x13a>
 80076f0:	9207      	str	r2, [sp, #28]
 80076f2:	e014      	b.n	800771e <_vfiprintf_r+0x13a>
 80076f4:	eba0 0308 	sub.w	r3, r0, r8
 80076f8:	fa09 f303 	lsl.w	r3, r9, r3
 80076fc:	4313      	orrs	r3, r2
 80076fe:	9304      	str	r3, [sp, #16]
 8007700:	46a2      	mov	sl, r4
 8007702:	e7d2      	b.n	80076aa <_vfiprintf_r+0xc6>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	1d19      	adds	r1, r3, #4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	9103      	str	r1, [sp, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	bfbb      	ittet	lt
 8007710:	425b      	neglt	r3, r3
 8007712:	f042 0202 	orrlt.w	r2, r2, #2
 8007716:	9307      	strge	r3, [sp, #28]
 8007718:	9307      	strlt	r3, [sp, #28]
 800771a:	bfb8      	it	lt
 800771c:	9204      	strlt	r2, [sp, #16]
 800771e:	7823      	ldrb	r3, [r4, #0]
 8007720:	2b2e      	cmp	r3, #46	; 0x2e
 8007722:	d10c      	bne.n	800773e <_vfiprintf_r+0x15a>
 8007724:	7863      	ldrb	r3, [r4, #1]
 8007726:	2b2a      	cmp	r3, #42	; 0x2a
 8007728:	d134      	bne.n	8007794 <_vfiprintf_r+0x1b0>
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	9203      	str	r2, [sp, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	bfb8      	it	lt
 8007736:	f04f 33ff 	movlt.w	r3, #4294967295
 800773a:	3402      	adds	r4, #2
 800773c:	9305      	str	r3, [sp, #20]
 800773e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007814 <_vfiprintf_r+0x230>
 8007742:	7821      	ldrb	r1, [r4, #0]
 8007744:	2203      	movs	r2, #3
 8007746:	4650      	mov	r0, sl
 8007748:	f7f8 fd62 	bl	8000210 <memchr>
 800774c:	b138      	cbz	r0, 800775e <_vfiprintf_r+0x17a>
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	eba0 000a 	sub.w	r0, r0, sl
 8007754:	2240      	movs	r2, #64	; 0x40
 8007756:	4082      	lsls	r2, r0
 8007758:	4313      	orrs	r3, r2
 800775a:	3401      	adds	r4, #1
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007762:	4829      	ldr	r0, [pc, #164]	; (8007808 <_vfiprintf_r+0x224>)
 8007764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007768:	2206      	movs	r2, #6
 800776a:	f7f8 fd51 	bl	8000210 <memchr>
 800776e:	2800      	cmp	r0, #0
 8007770:	d03f      	beq.n	80077f2 <_vfiprintf_r+0x20e>
 8007772:	4b26      	ldr	r3, [pc, #152]	; (800780c <_vfiprintf_r+0x228>)
 8007774:	bb1b      	cbnz	r3, 80077be <_vfiprintf_r+0x1da>
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	3307      	adds	r3, #7
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	3308      	adds	r3, #8
 8007780:	9303      	str	r3, [sp, #12]
 8007782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007784:	443b      	add	r3, r7
 8007786:	9309      	str	r3, [sp, #36]	; 0x24
 8007788:	e768      	b.n	800765c <_vfiprintf_r+0x78>
 800778a:	fb0c 3202 	mla	r2, ip, r2, r3
 800778e:	460c      	mov	r4, r1
 8007790:	2001      	movs	r0, #1
 8007792:	e7a6      	b.n	80076e2 <_vfiprintf_r+0xfe>
 8007794:	2300      	movs	r3, #0
 8007796:	3401      	adds	r4, #1
 8007798:	9305      	str	r3, [sp, #20]
 800779a:	4619      	mov	r1, r3
 800779c:	f04f 0c0a 	mov.w	ip, #10
 80077a0:	4620      	mov	r0, r4
 80077a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077a6:	3a30      	subs	r2, #48	; 0x30
 80077a8:	2a09      	cmp	r2, #9
 80077aa:	d903      	bls.n	80077b4 <_vfiprintf_r+0x1d0>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0c6      	beq.n	800773e <_vfiprintf_r+0x15a>
 80077b0:	9105      	str	r1, [sp, #20]
 80077b2:	e7c4      	b.n	800773e <_vfiprintf_r+0x15a>
 80077b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077b8:	4604      	mov	r4, r0
 80077ba:	2301      	movs	r3, #1
 80077bc:	e7f0      	b.n	80077a0 <_vfiprintf_r+0x1bc>
 80077be:	ab03      	add	r3, sp, #12
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	462a      	mov	r2, r5
 80077c4:	4b12      	ldr	r3, [pc, #72]	; (8007810 <_vfiprintf_r+0x22c>)
 80077c6:	a904      	add	r1, sp, #16
 80077c8:	4630      	mov	r0, r6
 80077ca:	f3af 8000 	nop.w
 80077ce:	4607      	mov	r7, r0
 80077d0:	1c78      	adds	r0, r7, #1
 80077d2:	d1d6      	bne.n	8007782 <_vfiprintf_r+0x19e>
 80077d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077d6:	07d9      	lsls	r1, r3, #31
 80077d8:	d405      	bmi.n	80077e6 <_vfiprintf_r+0x202>
 80077da:	89ab      	ldrh	r3, [r5, #12]
 80077dc:	059a      	lsls	r2, r3, #22
 80077de:	d402      	bmi.n	80077e6 <_vfiprintf_r+0x202>
 80077e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e2:	f7ff fda8 	bl	8007336 <__retarget_lock_release_recursive>
 80077e6:	89ab      	ldrh	r3, [r5, #12]
 80077e8:	065b      	lsls	r3, r3, #25
 80077ea:	f53f af1d 	bmi.w	8007628 <_vfiprintf_r+0x44>
 80077ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077f0:	e71c      	b.n	800762c <_vfiprintf_r+0x48>
 80077f2:	ab03      	add	r3, sp, #12
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	462a      	mov	r2, r5
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <_vfiprintf_r+0x22c>)
 80077fa:	a904      	add	r1, sp, #16
 80077fc:	4630      	mov	r0, r6
 80077fe:	f000 f879 	bl	80078f4 <_printf_i>
 8007802:	e7e4      	b.n	80077ce <_vfiprintf_r+0x1ea>
 8007804:	0800868f 	.word	0x0800868f
 8007808:	08008699 	.word	0x08008699
 800780c:	00000000 	.word	0x00000000
 8007810:	080075bf 	.word	0x080075bf
 8007814:	08008695 	.word	0x08008695

08007818 <_printf_common>:
 8007818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800781c:	4616      	mov	r6, r2
 800781e:	4699      	mov	r9, r3
 8007820:	688a      	ldr	r2, [r1, #8]
 8007822:	690b      	ldr	r3, [r1, #16]
 8007824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007828:	4293      	cmp	r3, r2
 800782a:	bfb8      	it	lt
 800782c:	4613      	movlt	r3, r2
 800782e:	6033      	str	r3, [r6, #0]
 8007830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007834:	4607      	mov	r7, r0
 8007836:	460c      	mov	r4, r1
 8007838:	b10a      	cbz	r2, 800783e <_printf_common+0x26>
 800783a:	3301      	adds	r3, #1
 800783c:	6033      	str	r3, [r6, #0]
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	0699      	lsls	r1, r3, #26
 8007842:	bf42      	ittt	mi
 8007844:	6833      	ldrmi	r3, [r6, #0]
 8007846:	3302      	addmi	r3, #2
 8007848:	6033      	strmi	r3, [r6, #0]
 800784a:	6825      	ldr	r5, [r4, #0]
 800784c:	f015 0506 	ands.w	r5, r5, #6
 8007850:	d106      	bne.n	8007860 <_printf_common+0x48>
 8007852:	f104 0a19 	add.w	sl, r4, #25
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	6832      	ldr	r2, [r6, #0]
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	42ab      	cmp	r3, r5
 800785e:	dc26      	bgt.n	80078ae <_printf_common+0x96>
 8007860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007864:	1e13      	subs	r3, r2, #0
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	bf18      	it	ne
 800786a:	2301      	movne	r3, #1
 800786c:	0692      	lsls	r2, r2, #26
 800786e:	d42b      	bmi.n	80078c8 <_printf_common+0xb0>
 8007870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007874:	4649      	mov	r1, r9
 8007876:	4638      	mov	r0, r7
 8007878:	47c0      	blx	r8
 800787a:	3001      	adds	r0, #1
 800787c:	d01e      	beq.n	80078bc <_printf_common+0xa4>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	6922      	ldr	r2, [r4, #16]
 8007882:	f003 0306 	and.w	r3, r3, #6
 8007886:	2b04      	cmp	r3, #4
 8007888:	bf02      	ittt	eq
 800788a:	68e5      	ldreq	r5, [r4, #12]
 800788c:	6833      	ldreq	r3, [r6, #0]
 800788e:	1aed      	subeq	r5, r5, r3
 8007890:	68a3      	ldr	r3, [r4, #8]
 8007892:	bf0c      	ite	eq
 8007894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007898:	2500      	movne	r5, #0
 800789a:	4293      	cmp	r3, r2
 800789c:	bfc4      	itt	gt
 800789e:	1a9b      	subgt	r3, r3, r2
 80078a0:	18ed      	addgt	r5, r5, r3
 80078a2:	2600      	movs	r6, #0
 80078a4:	341a      	adds	r4, #26
 80078a6:	42b5      	cmp	r5, r6
 80078a8:	d11a      	bne.n	80078e0 <_printf_common+0xc8>
 80078aa:	2000      	movs	r0, #0
 80078ac:	e008      	b.n	80078c0 <_printf_common+0xa8>
 80078ae:	2301      	movs	r3, #1
 80078b0:	4652      	mov	r2, sl
 80078b2:	4649      	mov	r1, r9
 80078b4:	4638      	mov	r0, r7
 80078b6:	47c0      	blx	r8
 80078b8:	3001      	adds	r0, #1
 80078ba:	d103      	bne.n	80078c4 <_printf_common+0xac>
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	3501      	adds	r5, #1
 80078c6:	e7c6      	b.n	8007856 <_printf_common+0x3e>
 80078c8:	18e1      	adds	r1, r4, r3
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	2030      	movs	r0, #48	; 0x30
 80078ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078d2:	4422      	add	r2, r4
 80078d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078dc:	3302      	adds	r3, #2
 80078de:	e7c7      	b.n	8007870 <_printf_common+0x58>
 80078e0:	2301      	movs	r3, #1
 80078e2:	4622      	mov	r2, r4
 80078e4:	4649      	mov	r1, r9
 80078e6:	4638      	mov	r0, r7
 80078e8:	47c0      	blx	r8
 80078ea:	3001      	adds	r0, #1
 80078ec:	d0e6      	beq.n	80078bc <_printf_common+0xa4>
 80078ee:	3601      	adds	r6, #1
 80078f0:	e7d9      	b.n	80078a6 <_printf_common+0x8e>
	...

080078f4 <_printf_i>:
 80078f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078f8:	7e0f      	ldrb	r7, [r1, #24]
 80078fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078fc:	2f78      	cmp	r7, #120	; 0x78
 80078fe:	4691      	mov	r9, r2
 8007900:	4680      	mov	r8, r0
 8007902:	460c      	mov	r4, r1
 8007904:	469a      	mov	sl, r3
 8007906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800790a:	d807      	bhi.n	800791c <_printf_i+0x28>
 800790c:	2f62      	cmp	r7, #98	; 0x62
 800790e:	d80a      	bhi.n	8007926 <_printf_i+0x32>
 8007910:	2f00      	cmp	r7, #0
 8007912:	f000 80d4 	beq.w	8007abe <_printf_i+0x1ca>
 8007916:	2f58      	cmp	r7, #88	; 0x58
 8007918:	f000 80c0 	beq.w	8007a9c <_printf_i+0x1a8>
 800791c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007924:	e03a      	b.n	800799c <_printf_i+0xa8>
 8007926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800792a:	2b15      	cmp	r3, #21
 800792c:	d8f6      	bhi.n	800791c <_printf_i+0x28>
 800792e:	a101      	add	r1, pc, #4	; (adr r1, 8007934 <_printf_i+0x40>)
 8007930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007934:	0800798d 	.word	0x0800798d
 8007938:	080079a1 	.word	0x080079a1
 800793c:	0800791d 	.word	0x0800791d
 8007940:	0800791d 	.word	0x0800791d
 8007944:	0800791d 	.word	0x0800791d
 8007948:	0800791d 	.word	0x0800791d
 800794c:	080079a1 	.word	0x080079a1
 8007950:	0800791d 	.word	0x0800791d
 8007954:	0800791d 	.word	0x0800791d
 8007958:	0800791d 	.word	0x0800791d
 800795c:	0800791d 	.word	0x0800791d
 8007960:	08007aa5 	.word	0x08007aa5
 8007964:	080079cd 	.word	0x080079cd
 8007968:	08007a5f 	.word	0x08007a5f
 800796c:	0800791d 	.word	0x0800791d
 8007970:	0800791d 	.word	0x0800791d
 8007974:	08007ac7 	.word	0x08007ac7
 8007978:	0800791d 	.word	0x0800791d
 800797c:	080079cd 	.word	0x080079cd
 8007980:	0800791d 	.word	0x0800791d
 8007984:	0800791d 	.word	0x0800791d
 8007988:	08007a67 	.word	0x08007a67
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	602a      	str	r2, [r5, #0]
 8007994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800799c:	2301      	movs	r3, #1
 800799e:	e09f      	b.n	8007ae0 <_printf_i+0x1ec>
 80079a0:	6820      	ldr	r0, [r4, #0]
 80079a2:	682b      	ldr	r3, [r5, #0]
 80079a4:	0607      	lsls	r7, r0, #24
 80079a6:	f103 0104 	add.w	r1, r3, #4
 80079aa:	6029      	str	r1, [r5, #0]
 80079ac:	d501      	bpl.n	80079b2 <_printf_i+0xbe>
 80079ae:	681e      	ldr	r6, [r3, #0]
 80079b0:	e003      	b.n	80079ba <_printf_i+0xc6>
 80079b2:	0646      	lsls	r6, r0, #25
 80079b4:	d5fb      	bpl.n	80079ae <_printf_i+0xba>
 80079b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	da03      	bge.n	80079c6 <_printf_i+0xd2>
 80079be:	232d      	movs	r3, #45	; 0x2d
 80079c0:	4276      	negs	r6, r6
 80079c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c6:	485a      	ldr	r0, [pc, #360]	; (8007b30 <_printf_i+0x23c>)
 80079c8:	230a      	movs	r3, #10
 80079ca:	e012      	b.n	80079f2 <_printf_i+0xfe>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	6820      	ldr	r0, [r4, #0]
 80079d0:	1d19      	adds	r1, r3, #4
 80079d2:	6029      	str	r1, [r5, #0]
 80079d4:	0605      	lsls	r5, r0, #24
 80079d6:	d501      	bpl.n	80079dc <_printf_i+0xe8>
 80079d8:	681e      	ldr	r6, [r3, #0]
 80079da:	e002      	b.n	80079e2 <_printf_i+0xee>
 80079dc:	0641      	lsls	r1, r0, #25
 80079de:	d5fb      	bpl.n	80079d8 <_printf_i+0xe4>
 80079e0:	881e      	ldrh	r6, [r3, #0]
 80079e2:	4853      	ldr	r0, [pc, #332]	; (8007b30 <_printf_i+0x23c>)
 80079e4:	2f6f      	cmp	r7, #111	; 0x6f
 80079e6:	bf0c      	ite	eq
 80079e8:	2308      	moveq	r3, #8
 80079ea:	230a      	movne	r3, #10
 80079ec:	2100      	movs	r1, #0
 80079ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079f2:	6865      	ldr	r5, [r4, #4]
 80079f4:	60a5      	str	r5, [r4, #8]
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	bfa2      	ittt	ge
 80079fa:	6821      	ldrge	r1, [r4, #0]
 80079fc:	f021 0104 	bicge.w	r1, r1, #4
 8007a00:	6021      	strge	r1, [r4, #0]
 8007a02:	b90e      	cbnz	r6, 8007a08 <_printf_i+0x114>
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	d04b      	beq.n	8007aa0 <_printf_i+0x1ac>
 8007a08:	4615      	mov	r5, r2
 8007a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a12:	5dc7      	ldrb	r7, [r0, r7]
 8007a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a18:	4637      	mov	r7, r6
 8007a1a:	42bb      	cmp	r3, r7
 8007a1c:	460e      	mov	r6, r1
 8007a1e:	d9f4      	bls.n	8007a0a <_printf_i+0x116>
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d10b      	bne.n	8007a3c <_printf_i+0x148>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	07de      	lsls	r6, r3, #31
 8007a28:	d508      	bpl.n	8007a3c <_printf_i+0x148>
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	6861      	ldr	r1, [r4, #4]
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	bfde      	ittt	le
 8007a32:	2330      	movle	r3, #48	; 0x30
 8007a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a3c:	1b52      	subs	r2, r2, r5
 8007a3e:	6122      	str	r2, [r4, #16]
 8007a40:	f8cd a000 	str.w	sl, [sp]
 8007a44:	464b      	mov	r3, r9
 8007a46:	aa03      	add	r2, sp, #12
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f7ff fee4 	bl	8007818 <_printf_common>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d14a      	bne.n	8007aea <_printf_i+0x1f6>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	b004      	add	sp, #16
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	f043 0320 	orr.w	r3, r3, #32
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	4833      	ldr	r0, [pc, #204]	; (8007b34 <_printf_i+0x240>)
 8007a68:	2778      	movs	r7, #120	; 0x78
 8007a6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	6829      	ldr	r1, [r5, #0]
 8007a72:	061f      	lsls	r7, r3, #24
 8007a74:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a78:	d402      	bmi.n	8007a80 <_printf_i+0x18c>
 8007a7a:	065f      	lsls	r7, r3, #25
 8007a7c:	bf48      	it	mi
 8007a7e:	b2b6      	uxthmi	r6, r6
 8007a80:	07df      	lsls	r7, r3, #31
 8007a82:	bf48      	it	mi
 8007a84:	f043 0320 	orrmi.w	r3, r3, #32
 8007a88:	6029      	str	r1, [r5, #0]
 8007a8a:	bf48      	it	mi
 8007a8c:	6023      	strmi	r3, [r4, #0]
 8007a8e:	b91e      	cbnz	r6, 8007a98 <_printf_i+0x1a4>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	f023 0320 	bic.w	r3, r3, #32
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	2310      	movs	r3, #16
 8007a9a:	e7a7      	b.n	80079ec <_printf_i+0xf8>
 8007a9c:	4824      	ldr	r0, [pc, #144]	; (8007b30 <_printf_i+0x23c>)
 8007a9e:	e7e4      	b.n	8007a6a <_printf_i+0x176>
 8007aa0:	4615      	mov	r5, r2
 8007aa2:	e7bd      	b.n	8007a20 <_printf_i+0x12c>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	6826      	ldr	r6, [r4, #0]
 8007aa8:	6961      	ldr	r1, [r4, #20]
 8007aaa:	1d18      	adds	r0, r3, #4
 8007aac:	6028      	str	r0, [r5, #0]
 8007aae:	0635      	lsls	r5, r6, #24
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	d501      	bpl.n	8007ab8 <_printf_i+0x1c4>
 8007ab4:	6019      	str	r1, [r3, #0]
 8007ab6:	e002      	b.n	8007abe <_printf_i+0x1ca>
 8007ab8:	0670      	lsls	r0, r6, #25
 8007aba:	d5fb      	bpl.n	8007ab4 <_printf_i+0x1c0>
 8007abc:	8019      	strh	r1, [r3, #0]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	4615      	mov	r5, r2
 8007ac4:	e7bc      	b.n	8007a40 <_printf_i+0x14c>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	1d1a      	adds	r2, r3, #4
 8007aca:	602a      	str	r2, [r5, #0]
 8007acc:	681d      	ldr	r5, [r3, #0]
 8007ace:	6862      	ldr	r2, [r4, #4]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f7f8 fb9c 	bl	8000210 <memchr>
 8007ad8:	b108      	cbz	r0, 8007ade <_printf_i+0x1ea>
 8007ada:	1b40      	subs	r0, r0, r5
 8007adc:	6060      	str	r0, [r4, #4]
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	6123      	str	r3, [r4, #16]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae8:	e7aa      	b.n	8007a40 <_printf_i+0x14c>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	462a      	mov	r2, r5
 8007aee:	4649      	mov	r1, r9
 8007af0:	4640      	mov	r0, r8
 8007af2:	47d0      	blx	sl
 8007af4:	3001      	adds	r0, #1
 8007af6:	d0ad      	beq.n	8007a54 <_printf_i+0x160>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	079b      	lsls	r3, r3, #30
 8007afc:	d413      	bmi.n	8007b26 <_printf_i+0x232>
 8007afe:	68e0      	ldr	r0, [r4, #12]
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	4298      	cmp	r0, r3
 8007b04:	bfb8      	it	lt
 8007b06:	4618      	movlt	r0, r3
 8007b08:	e7a6      	b.n	8007a58 <_printf_i+0x164>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	4649      	mov	r1, r9
 8007b10:	4640      	mov	r0, r8
 8007b12:	47d0      	blx	sl
 8007b14:	3001      	adds	r0, #1
 8007b16:	d09d      	beq.n	8007a54 <_printf_i+0x160>
 8007b18:	3501      	adds	r5, #1
 8007b1a:	68e3      	ldr	r3, [r4, #12]
 8007b1c:	9903      	ldr	r1, [sp, #12]
 8007b1e:	1a5b      	subs	r3, r3, r1
 8007b20:	42ab      	cmp	r3, r5
 8007b22:	dcf2      	bgt.n	8007b0a <_printf_i+0x216>
 8007b24:	e7eb      	b.n	8007afe <_printf_i+0x20a>
 8007b26:	2500      	movs	r5, #0
 8007b28:	f104 0619 	add.w	r6, r4, #25
 8007b2c:	e7f5      	b.n	8007b1a <_printf_i+0x226>
 8007b2e:	bf00      	nop
 8007b30:	080086a0 	.word	0x080086a0
 8007b34:	080086b1 	.word	0x080086b1

08007b38 <__sflush_r>:
 8007b38:	898a      	ldrh	r2, [r1, #12]
 8007b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3e:	4605      	mov	r5, r0
 8007b40:	0710      	lsls	r0, r2, #28
 8007b42:	460c      	mov	r4, r1
 8007b44:	d458      	bmi.n	8007bf8 <__sflush_r+0xc0>
 8007b46:	684b      	ldr	r3, [r1, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc05      	bgt.n	8007b58 <__sflush_r+0x20>
 8007b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	dc02      	bgt.n	8007b58 <__sflush_r+0x20>
 8007b52:	2000      	movs	r0, #0
 8007b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b5a:	2e00      	cmp	r6, #0
 8007b5c:	d0f9      	beq.n	8007b52 <__sflush_r+0x1a>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b64:	682f      	ldr	r7, [r5, #0]
 8007b66:	6a21      	ldr	r1, [r4, #32]
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	d032      	beq.n	8007bd2 <__sflush_r+0x9a>
 8007b6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	075a      	lsls	r2, r3, #29
 8007b72:	d505      	bpl.n	8007b80 <__sflush_r+0x48>
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	1ac0      	subs	r0, r0, r3
 8007b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b7a:	b10b      	cbz	r3, 8007b80 <__sflush_r+0x48>
 8007b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b7e:	1ac0      	subs	r0, r0, r3
 8007b80:	2300      	movs	r3, #0
 8007b82:	4602      	mov	r2, r0
 8007b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b86:	6a21      	ldr	r1, [r4, #32]
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b0      	blx	r6
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	d106      	bne.n	8007ba0 <__sflush_r+0x68>
 8007b92:	6829      	ldr	r1, [r5, #0]
 8007b94:	291d      	cmp	r1, #29
 8007b96:	d82b      	bhi.n	8007bf0 <__sflush_r+0xb8>
 8007b98:	4a29      	ldr	r2, [pc, #164]	; (8007c40 <__sflush_r+0x108>)
 8007b9a:	410a      	asrs	r2, r1
 8007b9c:	07d6      	lsls	r6, r2, #31
 8007b9e:	d427      	bmi.n	8007bf0 <__sflush_r+0xb8>
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	6062      	str	r2, [r4, #4]
 8007ba4:	04d9      	lsls	r1, r3, #19
 8007ba6:	6922      	ldr	r2, [r4, #16]
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	d504      	bpl.n	8007bb6 <__sflush_r+0x7e>
 8007bac:	1c42      	adds	r2, r0, #1
 8007bae:	d101      	bne.n	8007bb4 <__sflush_r+0x7c>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	b903      	cbnz	r3, 8007bb6 <__sflush_r+0x7e>
 8007bb4:	6560      	str	r0, [r4, #84]	; 0x54
 8007bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bb8:	602f      	str	r7, [r5, #0]
 8007bba:	2900      	cmp	r1, #0
 8007bbc:	d0c9      	beq.n	8007b52 <__sflush_r+0x1a>
 8007bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc2:	4299      	cmp	r1, r3
 8007bc4:	d002      	beq.n	8007bcc <__sflush_r+0x94>
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f7ff fbe2 	bl	8007390 <_free_r>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	6360      	str	r0, [r4, #52]	; 0x34
 8007bd0:	e7c0      	b.n	8007b54 <__sflush_r+0x1c>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b0      	blx	r6
 8007bd8:	1c41      	adds	r1, r0, #1
 8007bda:	d1c8      	bne.n	8007b6e <__sflush_r+0x36>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0c5      	beq.n	8007b6e <__sflush_r+0x36>
 8007be2:	2b1d      	cmp	r3, #29
 8007be4:	d001      	beq.n	8007bea <__sflush_r+0xb2>
 8007be6:	2b16      	cmp	r3, #22
 8007be8:	d101      	bne.n	8007bee <__sflush_r+0xb6>
 8007bea:	602f      	str	r7, [r5, #0]
 8007bec:	e7b1      	b.n	8007b52 <__sflush_r+0x1a>
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf4:	81a3      	strh	r3, [r4, #12]
 8007bf6:	e7ad      	b.n	8007b54 <__sflush_r+0x1c>
 8007bf8:	690f      	ldr	r7, [r1, #16]
 8007bfa:	2f00      	cmp	r7, #0
 8007bfc:	d0a9      	beq.n	8007b52 <__sflush_r+0x1a>
 8007bfe:	0793      	lsls	r3, r2, #30
 8007c00:	680e      	ldr	r6, [r1, #0]
 8007c02:	bf08      	it	eq
 8007c04:	694b      	ldreq	r3, [r1, #20]
 8007c06:	600f      	str	r7, [r1, #0]
 8007c08:	bf18      	it	ne
 8007c0a:	2300      	movne	r3, #0
 8007c0c:	eba6 0807 	sub.w	r8, r6, r7
 8007c10:	608b      	str	r3, [r1, #8]
 8007c12:	f1b8 0f00 	cmp.w	r8, #0
 8007c16:	dd9c      	ble.n	8007b52 <__sflush_r+0x1a>
 8007c18:	6a21      	ldr	r1, [r4, #32]
 8007c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c1c:	4643      	mov	r3, r8
 8007c1e:	463a      	mov	r2, r7
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b0      	blx	r6
 8007c24:	2800      	cmp	r0, #0
 8007c26:	dc06      	bgt.n	8007c36 <__sflush_r+0xfe>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c2e:	81a3      	strh	r3, [r4, #12]
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	e78e      	b.n	8007b54 <__sflush_r+0x1c>
 8007c36:	4407      	add	r7, r0
 8007c38:	eba8 0800 	sub.w	r8, r8, r0
 8007c3c:	e7e9      	b.n	8007c12 <__sflush_r+0xda>
 8007c3e:	bf00      	nop
 8007c40:	dfbffffe 	.word	0xdfbffffe

08007c44 <_fflush_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	690b      	ldr	r3, [r1, #16]
 8007c48:	4605      	mov	r5, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	b913      	cbnz	r3, 8007c54 <_fflush_r+0x10>
 8007c4e:	2500      	movs	r5, #0
 8007c50:	4628      	mov	r0, r5
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	b118      	cbz	r0, 8007c5e <_fflush_r+0x1a>
 8007c56:	6a03      	ldr	r3, [r0, #32]
 8007c58:	b90b      	cbnz	r3, 8007c5e <_fflush_r+0x1a>
 8007c5a:	f7ff f977 	bl	8006f4c <__sinit>
 8007c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0f3      	beq.n	8007c4e <_fflush_r+0xa>
 8007c66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c68:	07d0      	lsls	r0, r2, #31
 8007c6a:	d404      	bmi.n	8007c76 <_fflush_r+0x32>
 8007c6c:	0599      	lsls	r1, r3, #22
 8007c6e:	d402      	bmi.n	8007c76 <_fflush_r+0x32>
 8007c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c72:	f7ff fb5f 	bl	8007334 <__retarget_lock_acquire_recursive>
 8007c76:	4628      	mov	r0, r5
 8007c78:	4621      	mov	r1, r4
 8007c7a:	f7ff ff5d 	bl	8007b38 <__sflush_r>
 8007c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c80:	07da      	lsls	r2, r3, #31
 8007c82:	4605      	mov	r5, r0
 8007c84:	d4e4      	bmi.n	8007c50 <_fflush_r+0xc>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	059b      	lsls	r3, r3, #22
 8007c8a:	d4e1      	bmi.n	8007c50 <_fflush_r+0xc>
 8007c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c8e:	f7ff fb52 	bl	8007336 <__retarget_lock_release_recursive>
 8007c92:	e7dd      	b.n	8007c50 <_fflush_r+0xc>

08007c94 <fiprintf>:
 8007c94:	b40e      	push	{r1, r2, r3}
 8007c96:	b503      	push	{r0, r1, lr}
 8007c98:	4601      	mov	r1, r0
 8007c9a:	ab03      	add	r3, sp, #12
 8007c9c:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <fiprintf+0x20>)
 8007c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ca2:	6800      	ldr	r0, [r0, #0]
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	f7ff fc9d 	bl	80075e4 <_vfiprintf_r>
 8007caa:	b002      	add	sp, #8
 8007cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb0:	b003      	add	sp, #12
 8007cb2:	4770      	bx	lr
 8007cb4:	2000009c 	.word	0x2000009c

08007cb8 <__swhatbuf_r>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	460c      	mov	r4, r1
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	b096      	sub	sp, #88	; 0x58
 8007cc4:	4615      	mov	r5, r2
 8007cc6:	461e      	mov	r6, r3
 8007cc8:	da0d      	bge.n	8007ce6 <__swhatbuf_r+0x2e>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007cd0:	f04f 0100 	mov.w	r1, #0
 8007cd4:	bf0c      	ite	eq
 8007cd6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cda:	2340      	movne	r3, #64	; 0x40
 8007cdc:	2000      	movs	r0, #0
 8007cde:	6031      	str	r1, [r6, #0]
 8007ce0:	602b      	str	r3, [r5, #0]
 8007ce2:	b016      	add	sp, #88	; 0x58
 8007ce4:	bd70      	pop	{r4, r5, r6, pc}
 8007ce6:	466a      	mov	r2, sp
 8007ce8:	f000 f848 	bl	8007d7c <_fstat_r>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	dbec      	blt.n	8007cca <__swhatbuf_r+0x12>
 8007cf0:	9901      	ldr	r1, [sp, #4]
 8007cf2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007cf6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007cfa:	4259      	negs	r1, r3
 8007cfc:	4159      	adcs	r1, r3
 8007cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d02:	e7eb      	b.n	8007cdc <__swhatbuf_r+0x24>

08007d04 <__smakebuf_r>:
 8007d04:	898b      	ldrh	r3, [r1, #12]
 8007d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d08:	079d      	lsls	r5, r3, #30
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	d507      	bpl.n	8007d20 <__smakebuf_r+0x1c>
 8007d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	6163      	str	r3, [r4, #20]
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	ab01      	add	r3, sp, #4
 8007d22:	466a      	mov	r2, sp
 8007d24:	f7ff ffc8 	bl	8007cb8 <__swhatbuf_r>
 8007d28:	9900      	ldr	r1, [sp, #0]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7ff fba3 	bl	8007478 <_malloc_r>
 8007d32:	b948      	cbnz	r0, 8007d48 <__smakebuf_r+0x44>
 8007d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d38:	059a      	lsls	r2, r3, #22
 8007d3a:	d4ef      	bmi.n	8007d1c <__smakebuf_r+0x18>
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	f043 0302 	orr.w	r3, r3, #2
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	e7e3      	b.n	8007d10 <__smakebuf_r+0xc>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	6020      	str	r0, [r4, #0]
 8007d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	9b00      	ldr	r3, [sp, #0]
 8007d54:	6163      	str	r3, [r4, #20]
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	6120      	str	r0, [r4, #16]
 8007d5a:	b15b      	cbz	r3, 8007d74 <__smakebuf_r+0x70>
 8007d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 f81d 	bl	8007da0 <_isatty_r>
 8007d66:	b128      	cbz	r0, 8007d74 <__smakebuf_r+0x70>
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	81a3      	strh	r3, [r4, #12]
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	431d      	orrs	r5, r3
 8007d78:	81a5      	strh	r5, [r4, #12]
 8007d7a:	e7cf      	b.n	8007d1c <__smakebuf_r+0x18>

08007d7c <_fstat_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	; (8007d9c <_fstat_r+0x20>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	f7f9 fa7a 	bl	8001282 <_fstat>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d102      	bne.n	8007d98 <_fstat_r+0x1c>
 8007d92:	682b      	ldr	r3, [r5, #0]
 8007d94:	b103      	cbz	r3, 8007d98 <_fstat_r+0x1c>
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20005b98 	.word	0x20005b98

08007da0 <_isatty_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d06      	ldr	r5, [pc, #24]	; (8007dbc <_isatty_r+0x1c>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7f9 fa79 	bl	80012a2 <_isatty>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_isatty_r+0x1a>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_isatty_r+0x1a>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20005b98 	.word	0x20005b98

08007dc0 <_sbrk_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d06      	ldr	r5, [pc, #24]	; (8007ddc <_sbrk_r+0x1c>)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	602b      	str	r3, [r5, #0]
 8007dcc:	f7f9 fa82 	bl	80012d4 <_sbrk>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d102      	bne.n	8007dda <_sbrk_r+0x1a>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	b103      	cbz	r3, 8007dda <_sbrk_r+0x1a>
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	20005b98 	.word	0x20005b98

08007de0 <abort>:
 8007de0:	b508      	push	{r3, lr}
 8007de2:	2006      	movs	r0, #6
 8007de4:	f000 f82c 	bl	8007e40 <raise>
 8007de8:	2001      	movs	r0, #1
 8007dea:	f7f9 f9fb 	bl	80011e4 <_exit>

08007dee <_raise_r>:
 8007dee:	291f      	cmp	r1, #31
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4604      	mov	r4, r0
 8007df4:	460d      	mov	r5, r1
 8007df6:	d904      	bls.n	8007e02 <_raise_r+0x14>
 8007df8:	2316      	movs	r3, #22
 8007dfa:	6003      	str	r3, [r0, #0]
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	bd38      	pop	{r3, r4, r5, pc}
 8007e02:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007e04:	b112      	cbz	r2, 8007e0c <_raise_r+0x1e>
 8007e06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e0a:	b94b      	cbnz	r3, 8007e20 <_raise_r+0x32>
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 f831 	bl	8007e74 <_getpid_r>
 8007e12:	462a      	mov	r2, r5
 8007e14:	4601      	mov	r1, r0
 8007e16:	4620      	mov	r0, r4
 8007e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e1c:	f000 b818 	b.w	8007e50 <_kill_r>
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d00a      	beq.n	8007e3a <_raise_r+0x4c>
 8007e24:	1c59      	adds	r1, r3, #1
 8007e26:	d103      	bne.n	8007e30 <_raise_r+0x42>
 8007e28:	2316      	movs	r3, #22
 8007e2a:	6003      	str	r3, [r0, #0]
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	e7e7      	b.n	8007e00 <_raise_r+0x12>
 8007e30:	2400      	movs	r4, #0
 8007e32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e36:	4628      	mov	r0, r5
 8007e38:	4798      	blx	r3
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e7e0      	b.n	8007e00 <_raise_r+0x12>
	...

08007e40 <raise>:
 8007e40:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <raise+0xc>)
 8007e42:	4601      	mov	r1, r0
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	f7ff bfd2 	b.w	8007dee <_raise_r>
 8007e4a:	bf00      	nop
 8007e4c:	2000009c 	.word	0x2000009c

08007e50 <_kill_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d07      	ldr	r5, [pc, #28]	; (8007e70 <_kill_r+0x20>)
 8007e54:	2300      	movs	r3, #0
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	602b      	str	r3, [r5, #0]
 8007e5e:	f7f9 f9b1 	bl	80011c4 <_kill>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d102      	bne.n	8007e6c <_kill_r+0x1c>
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	b103      	cbz	r3, 8007e6c <_kill_r+0x1c>
 8007e6a:	6023      	str	r3, [r4, #0]
 8007e6c:	bd38      	pop	{r3, r4, r5, pc}
 8007e6e:	bf00      	nop
 8007e70:	20005b98 	.word	0x20005b98

08007e74 <_getpid_r>:
 8007e74:	f7f9 b99e 	b.w	80011b4 <_getpid>

08007e78 <_init>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr

08007e84 <_fini>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	bf00      	nop
 8007e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	469e      	mov	lr, r3
 8007e8e:	4770      	bx	lr
