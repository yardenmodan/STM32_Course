
RTconcepts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa4  08006fa4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fac  08006fac  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fac  08006fac  00016fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad1c  20000084  08007038  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ada0  08007038  0002ada0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3eb  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002475  00000000  00000000  0002e4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  00031588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c9d  00000000  00000000  00031ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dad8  00000000  00000000  00035b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec8f9  00000000  00000000  00043634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ae0  00000000  00000000  0012ff30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00133a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b38 	.word	0x08006b38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006b38 	.word	0x08006b38

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
	department_list[0] = police_dep;
 80005b0:	4b55      	ldr	r3, [pc, #340]	; (8000708 <main+0x15c>)
 80005b2:	4a56      	ldr	r2, [pc, #344]	; (800070c <main+0x160>)
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	4611      	mov	r1, r2
 80005b8:	8019      	strh	r1, [r3, #0]
 80005ba:	3302      	adds	r3, #2
 80005bc:	0c12      	lsrs	r2, r2, #16
 80005be:	701a      	strb	r2, [r3, #0]
	department_list[1] = fire_dep ;
 80005c0:	4b51      	ldr	r3, [pc, #324]	; (8000708 <main+0x15c>)
 80005c2:	4a53      	ldr	r2, [pc, #332]	; (8000710 <main+0x164>)
 80005c4:	3303      	adds	r3, #3
 80005c6:	8811      	ldrh	r1, [r2, #0]
 80005c8:	7892      	ldrb	r2, [r2, #2]
 80005ca:	8019      	strh	r1, [r3, #0]
 80005cc:	709a      	strb	r2, [r3, #2]
	department_list[2] = ambulance_dep;
 80005ce:	4b4e      	ldr	r3, [pc, #312]	; (8000708 <main+0x15c>)
 80005d0:	4a50      	ldr	r2, [pc, #320]	; (8000714 <main+0x168>)
 80005d2:	3306      	adds	r3, #6
 80005d4:	8811      	ldrh	r1, [r2, #0]
 80005d6:	7892      	ldrb	r2, [r2, #2]
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	709a      	strb	r2, [r3, #2]
	department_list[3] = corona_dep;
 80005dc:	4b4a      	ldr	r3, [pc, #296]	; (8000708 <main+0x15c>)
 80005de:	4a4e      	ldr	r2, [pc, #312]	; (8000718 <main+0x16c>)
 80005e0:	3309      	adds	r3, #9
 80005e2:	8811      	ldrh	r1, [r2, #0]
 80005e4:	7892      	ldrb	r2, [r2, #2]
 80005e6:	8019      	strh	r1, [r3, #0]
 80005e8:	709a      	strb	r2, [r3, #2]

	policeMutex=osMutexNew(NULL);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f001 fe94 	bl	8002318 <osMutexNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a4a      	ldr	r2, [pc, #296]	; (800071c <main+0x170>)
 80005f4:	6013      	str	r3, [r2, #0]
	globalMutex=osMutexNew(NULL);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 fe8e 	bl	8002318 <osMutexNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a48      	ldr	r2, [pc, #288]	; (8000720 <main+0x174>)
 8000600:	6013      	str	r3, [r2, #0]

	ambulanceMutex=osMutexNew(NULL);
 8000602:	2000      	movs	r0, #0
 8000604:	f001 fe88 	bl	8002318 <osMutexNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a46      	ldr	r2, [pc, #280]	; (8000724 <main+0x178>)
 800060c:	6013      	str	r3, [r2, #0]
	fireMutex=osMutexNew(NULL);
 800060e:	2000      	movs	r0, #0
 8000610:	f001 fe82 	bl	8002318 <osMutexNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a44      	ldr	r2, [pc, #272]	; (8000728 <main+0x17c>)
 8000618:	6013      	str	r3, [r2, #0]
	coronaMutex=osMutexNew(NULL);
 800061a:	2000      	movs	r0, #0
 800061c:	f001 fe7c 	bl	8002318 <osMutexNew>
 8000620:	4603      	mov	r3, r0
 8000622:	4a42      	ldr	r2, [pc, #264]	; (800072c <main+0x180>)
 8000624:	6013      	str	r3, [r2, #0]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fe42 	bl	80012ae <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800062a:	f000 fcc3 	bl	8000fb4 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f8bd 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000632:	f001 fc59 	bl	8001ee8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of DispatchQueue */
  DispatchQueueHandle = osMessageQueueNew (DISPATCH_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t), &DispatchQueue_attributes);
 8000636:	4a3e      	ldr	r2, [pc, #248]	; (8000730 <main+0x184>)
 8000638:	2104      	movs	r1, #4
 800063a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800063e:	f001 ffb3 	bl	80025a8 <osMessageQueueNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a3b      	ldr	r2, [pc, #236]	; (8000734 <main+0x188>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of AmbulanceQueue */
  AmbulanceQueueHandle = osMessageQueueNew (AMBULANCE_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t), &AmbulanceQueue_attributes);
 8000648:	4a3b      	ldr	r2, [pc, #236]	; (8000738 <main+0x18c>)
 800064a:	2104      	movs	r1, #4
 800064c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000650:	f001 ffaa 	bl	80025a8 <osMessageQueueNew>
 8000654:	4603      	mov	r3, r0
 8000656:	4a39      	ldr	r2, [pc, #228]	; (800073c <main+0x190>)
 8000658:	6013      	str	r3, [r2, #0]

  /* creation of PoliceQueue */
  PoliceQueueHandle = osMessageQueueNew (POLICE_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t), &PoliceQueue_attributes);
 800065a:	4a39      	ldr	r2, [pc, #228]	; (8000740 <main+0x194>)
 800065c:	2104      	movs	r1, #4
 800065e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000662:	f001 ffa1 	bl	80025a8 <osMessageQueueNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a36      	ldr	r2, [pc, #216]	; (8000744 <main+0x198>)
 800066a:	6013      	str	r3, [r2, #0]

  /* creation of FireQueue */
  FireQueueHandle = osMessageQueueNew (FIRE_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t), &FireQueue_attributes);
 800066c:	4a36      	ldr	r2, [pc, #216]	; (8000748 <main+0x19c>)
 800066e:	2104      	movs	r1, #4
 8000670:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000674:	f001 ff98 	bl	80025a8 <osMessageQueueNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a34      	ldr	r2, [pc, #208]	; (800074c <main+0x1a0>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of CoronaQueue */
  CoronaQueueHandle = osMessageQueueNew (CORONA_INIT_BUFF_SIZE_BYTES, sizeof(uint32_t), &CoronaQueue_attributes);
 800067e:	4a34      	ldr	r2, [pc, #208]	; (8000750 <main+0x1a4>)
 8000680:	2104      	movs	r1, #4
 8000682:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000686:	f001 ff8f 	bl	80025a8 <osMessageQueueNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a31      	ldr	r2, [pc, #196]	; (8000754 <main+0x1a8>)
 800068e:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of defaultTask */
 // defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* creation of loggingThread */
  loggingThreadHandle = osThreadNew(loggingStartThread, NULL, &loggingThread_attributes);
 8000690:	4a31      	ldr	r2, [pc, #196]	; (8000758 <main+0x1ac>)
 8000692:	2100      	movs	r1, #0
 8000694:	4831      	ldr	r0, [pc, #196]	; (800075c <main+0x1b0>)
 8000696:	f001 fc91 	bl	8001fbc <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a30      	ldr	r2, [pc, #192]	; (8000760 <main+0x1b4>)
 800069e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  generateThreadHandle = osThreadNew(generateTask, NULL, &generateThread_attributes);
 80006a0:	4a30      	ldr	r2, [pc, #192]	; (8000764 <main+0x1b8>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4830      	ldr	r0, [pc, #192]	; (8000768 <main+0x1bc>)
 80006a6:	f001 fc89 	bl	8001fbc <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a2f      	ldr	r2, [pc, #188]	; (800076c <main+0x1c0>)
 80006ae:	6013      	str	r3, [r2, #0]
  dispatchThreadHandle = osThreadNew(dispatchTask, NULL, &dispatchThread_attributes);
 80006b0:	4a2f      	ldr	r2, [pc, #188]	; (8000770 <main+0x1c4>)
 80006b2:	2100      	movs	r1, #0
 80006b4:	482f      	ldr	r0, [pc, #188]	; (8000774 <main+0x1c8>)
 80006b6:	f001 fc81 	bl	8001fbc <osThreadNew>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a2e      	ldr	r2, [pc, #184]	; (8000778 <main+0x1cc>)
 80006be:	6013      	str	r3, [r2, #0]

  policeThreadHandle = osThreadNew(policeTask, NULL, &policeThread_attributes);
 80006c0:	4a2e      	ldr	r2, [pc, #184]	; (800077c <main+0x1d0>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	482e      	ldr	r0, [pc, #184]	; (8000780 <main+0x1d4>)
 80006c6:	f001 fc79 	bl	8001fbc <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a2d      	ldr	r2, [pc, #180]	; (8000784 <main+0x1d8>)
 80006ce:	6013      	str	r3, [r2, #0]

  fireThreadHandle = osThreadNew(fireTask, NULL, &fireThread_attributes);
 80006d0:	4a2d      	ldr	r2, [pc, #180]	; (8000788 <main+0x1dc>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	482d      	ldr	r0, [pc, #180]	; (800078c <main+0x1e0>)
 80006d6:	f001 fc71 	bl	8001fbc <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <main+0x1e4>)
 80006de:	6013      	str	r3, [r2, #0]
  ambulanceThreadHandle = osThreadNew(ambulanceTask, NULL, &ambulanceThread_attributes);
 80006e0:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <main+0x1e8>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	482c      	ldr	r0, [pc, #176]	; (8000798 <main+0x1ec>)
 80006e6:	f001 fc69 	bl	8001fbc <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a2b      	ldr	r2, [pc, #172]	; (800079c <main+0x1f0>)
 80006ee:	6013      	str	r3, [r2, #0]
  coronaThreadHandle = osThreadNew(coronaTask, NULL, &coronaThread_attributes);
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <main+0x1f4>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	482b      	ldr	r0, [pc, #172]	; (80007a4 <main+0x1f8>)
 80006f6:	f001 fc61 	bl	8001fbc <osThreadNew>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <main+0x1fc>)
 80006fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000700:	f001 fc26 	bl	8001f50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	e7fe      	b.n	8000704 <main+0x158>
 8000706:	bf00      	nop
 8000708:	200000a0 	.word	0x200000a0
 800070c:	20000004 	.word	0x20000004
 8000710:	20000008 	.word	0x20000008
 8000714:	2000000c 	.word	0x2000000c
 8000718:	20000010 	.word	0x20000010
 800071c:	200000ac 	.word	0x200000ac
 8000720:	200000b0 	.word	0x200000b0
 8000724:	200000b4 	.word	0x200000b4
 8000728:	200000b8 	.word	0x200000b8
 800072c:	200000bc 	.word	0x200000bc
 8000730:	08006e3c 	.word	0x08006e3c
 8000734:	20001160 	.word	0x20001160
 8000738:	08006e54 	.word	0x08006e54
 800073c:	200021b4 	.word	0x200021b4
 8000740:	08006e6c 	.word	0x08006e6c
 8000744:	20003208 	.word	0x20003208
 8000748:	08006e84 	.word	0x08006e84
 800074c:	2000425c 	.word	0x2000425c
 8000750:	08006e9c 	.word	0x08006e9c
 8000754:	200052b0 	.word	0x200052b0
 8000758:	08006d40 	.word	0x08006d40
 800075c:	08000f85 	.word	0x08000f85
 8000760:	200000c0 	.word	0x200000c0
 8000764:	08006d64 	.word	0x08006d64
 8000768:	08000865 	.word	0x08000865
 800076c:	20000320 	.word	0x20000320
 8000770:	08006d88 	.word	0x08006d88
 8000774:	080008f5 	.word	0x080008f5
 8000778:	20000580 	.word	0x20000580
 800077c:	08006dac 	.word	0x08006dac
 8000780:	080009c1 	.word	0x080009c1
 8000784:	200007e0 	.word	0x200007e0
 8000788:	08006dd0 	.word	0x08006dd0
 800078c:	08000a31 	.word	0x08000a31
 8000790:	20000a40 	.word	0x20000a40
 8000794:	08006df4 	.word	0x08006df4
 8000798:	080009f9 	.word	0x080009f9
 800079c:	20000ca0 	.word	0x20000ca0
 80007a0:	08006e18 	.word	0x08006e18
 80007a4:	08000a69 	.word	0x08000a69
 80007a8:	20000f00 	.word	0x20000f00

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fba2 	bl	8005f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xb0>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xb0>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xb0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <SystemClock_Config+0xb4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <SystemClock_Config+0xb4>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <SystemClock_Config+0xb4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000810:	2300      	movs	r3, #0
 8000812:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f000 ff07 	bl	800162c <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000824:	f000 fbf2 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f996 	bl	8001b74 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800084e:	f000 fbdd 	bl	800100c <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <generateTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void generateTask(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	while (1){
		department_id dep =rand() % DEPARTMENTS_NUM;
 800086c:	f005 f916 	bl	8005a9c <rand>
 8000870:	4603      	mov	r3, r0
 8000872:	425a      	negs	r2, r3
 8000874:	f003 0303 	and.w	r3, r3, #3
 8000878:	f002 0203 	and.w	r2, r2, #3
 800087c:	bf58      	it	pl
 800087e:	4253      	negpl	r3, r2
 8000880:	77fb      	strb	r3, [r7, #31]
		TickType_t active_time= rand() % XTICKS_MAX;
 8000882:	f005 f90b 	bl	8005a9c <rand>
 8000886:	4601      	mov	r1, r0
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <generateTask+0x84>)
 800088a:	fb83 2301 	smull	r2, r3, r3, r1
 800088e:	105a      	asrs	r2, r3, #1
 8000890:	17cb      	asrs	r3, r1, #31
 8000892:	1ad2      	subs	r2, r2, r3
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	1aca      	subs	r2, r1, r3
 800089c:	61ba      	str	r2, [r7, #24]
		uint8_t vehicle_num_to_dispatch= rand() % MAX_NUM_REQUESTED_VEHICLES;
 800089e:	f005 f8fd 	bl	8005a9c <rand>
 80008a2:	4602      	mov	r2, r0
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <generateTask+0x84>)
 80008a6:	fb83 1302 	smull	r1, r3, r3, r2
 80008aa:	1059      	asrs	r1, r3, #1
 80008ac:	17d3      	asrs	r3, r2, #31
 80008ae:	1ac9      	subs	r1, r1, r3
 80008b0:	460b      	mov	r3, r1
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	1ad1      	subs	r1, r2, r3
 80008b8:	460b      	mov	r3, r1
 80008ba:	75fb      	strb	r3, [r7, #23]
		request req= {dep,active_time,vehicle_num_to_dispatch};
 80008bc:	7ffb      	ldrb	r3, [r7, #31]
 80008be:	733b      	strb	r3, [r7, #12]
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	737b      	strb	r3, [r7, #13]
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	613b      	str	r3, [r7, #16]
		if (osMessageQueuePut(DispatchQueueHandle, &req, DISPATCH_QUEUE_PRIORITY, DISPATCH_QUEUE_TIMEOUT )==osOK){
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <generateTask+0x88>)
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	f107 010c 	add.w	r1, r7, #12
 80008d2:	2300      	movs	r3, #0
 80008d4:	2228      	movs	r2, #40	; 0x28
 80008d6:	f001 feed 	bl	80026b4 <osMessageQueuePut>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1c5      	bne.n	800086c <generateTask+0x8>
			printf("request was put inside dispatch queue!\r\n");
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <generateTask+0x8c>)
 80008e2:	f005 fa2f 	bl	8005d44 <puts>
	while (1){
 80008e6:	e7c1      	b.n	800086c <generateTask+0x8>
 80008e8:	66666667 	.word	0x66666667
 80008ec:	20001160 	.word	0x20001160
 80008f0:	08006c00 	.word	0x08006c00

080008f4 <dispatchTask>:
	}
}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

void dispatchTask(void *argument){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]


	request req;
	while(1){
		if (osMessageQueueGet(DispatchQueueHandle, (void*)&req, 0, 0) == osOK){
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <dispatchTask+0xa8>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	f107 0108 	add.w	r1, r7, #8
 8000904:	2300      	movs	r3, #0
 8000906:	2200      	movs	r2, #0
 8000908:	f001 ff48 	bl	800279c <osMessageQueueGet>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f4      	bne.n	80008fc <dispatchTask+0x8>
			switch(req.dep_id){
 8000912:	7a3b      	ldrb	r3, [r7, #8]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d83b      	bhi.n	8000990 <dispatchTask+0x9c>
 8000918:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <dispatchTask+0x2c>)
 800091a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091e:	bf00      	nop
 8000920:	08000931 	.word	0x08000931
 8000924:	08000949 	.word	0x08000949
 8000928:	08000961 	.word	0x08000961
 800092c:	08000979 	.word	0x08000979
			case (POLICE):
				osMessageQueuePut(PoliceQueueHandle, &req, 0, 0);
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <dispatchTask+0xac>)
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	f107 0108 	add.w	r1, r7, #8
 8000938:	2300      	movs	r3, #0
 800093a:	2200      	movs	r2, #0
 800093c:	f001 feba 	bl	80026b4 <osMessageQueuePut>
				printf("Police request was sent to department!\r\n");
 8000940:	4818      	ldr	r0, [pc, #96]	; (80009a4 <dispatchTask+0xb0>)
 8000942:	f005 f9ff 	bl	8005d44 <puts>
				break;
 8000946:	e024      	b.n	8000992 <dispatchTask+0x9e>

			case (FIRE):
				osMessageQueuePut(FireQueueHandle, &req, 0, 0);
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <dispatchTask+0xb4>)
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	f107 0108 	add.w	r1, r7, #8
 8000950:	2300      	movs	r3, #0
 8000952:	2200      	movs	r2, #0
 8000954:	f001 feae 	bl	80026b4 <osMessageQueuePut>
				printf("Fire request was sent to department!\r\n");
 8000958:	4814      	ldr	r0, [pc, #80]	; (80009ac <dispatchTask+0xb8>)
 800095a:	f005 f9f3 	bl	8005d44 <puts>

				break;
 800095e:	e018      	b.n	8000992 <dispatchTask+0x9e>
			case (AMBULANCE):
				osMessageQueuePut(AmbulanceQueueHandle, &req, 0, 0);
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <dispatchTask+0xbc>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	f107 0108 	add.w	r1, r7, #8
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	f001 fea2 	bl	80026b4 <osMessageQueuePut>
				printf("Ambulance request was sent to department!\r\n");
 8000970:	4810      	ldr	r0, [pc, #64]	; (80009b4 <dispatchTask+0xc0>)
 8000972:	f005 f9e7 	bl	8005d44 <puts>

				break;
 8000976:	e00c      	b.n	8000992 <dispatchTask+0x9e>
			case (CORONA):
				osMessageQueuePut(CoronaQueueHandle, &req, 0, 0);
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <dispatchTask+0xc4>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	f107 0108 	add.w	r1, r7, #8
 8000980:	2300      	movs	r3, #0
 8000982:	2200      	movs	r2, #0
 8000984:	f001 fe96 	bl	80026b4 <osMessageQueuePut>
				printf("Corona request was sent to department!\r\n");
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <dispatchTask+0xc8>)
 800098a:	f005 f9db 	bl	8005d44 <puts>

				break;
 800098e:	e000      	b.n	8000992 <dispatchTask+0x9e>
			default:
				break;
 8000990:	bf00      	nop

			}
			osDelay(XTICKS_DELAY_DEPARTMENT_QUEUE);
 8000992:	2014      	movs	r0, #20
 8000994:	f001 fbb8 	bl	8002108 <osDelay>
		if (osMessageQueueGet(DispatchQueueHandle, (void*)&req, 0, 0) == osOK){
 8000998:	e7b0      	b.n	80008fc <dispatchTask+0x8>
 800099a:	bf00      	nop
 800099c:	20001160 	.word	0x20001160
 80009a0:	20003208 	.word	0x20003208
 80009a4:	08006c28 	.word	0x08006c28
 80009a8:	2000425c 	.word	0x2000425c
 80009ac:	08006c50 	.word	0x08006c50
 80009b0:	200021b4 	.word	0x200021b4
 80009b4:	08006c78 	.word	0x08006c78
 80009b8:	200052b0 	.word	0x200052b0
 80009bc:	08006ca4 	.word	0x08006ca4

080009c0 <policeTask>:
	}
}


void policeTask(void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]


	request police_req;
	while (1){
		if (osMessageQueueGet(PoliceQueueHandle, &police_req, 0, osWaitForever) == osOK){
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <policeTask+0x30>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	f107 0108 	add.w	r1, r7, #8
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	2200      	movs	r2, #0
 80009d6:	f001 fee1 	bl	800279c <osMessageQueueGet>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1f3      	bne.n	80009c8 <policeTask+0x8>

			osThreadNew(ServiceRoutinePolice, (void*)&police_req, NULL);
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <policeTask+0x34>)
 80009ea:	f001 fae7 	bl	8001fbc <osThreadNew>
		if (osMessageQueueGet(PoliceQueueHandle, &police_req, 0, osWaitForever) == osOK){
 80009ee:	e7eb      	b.n	80009c8 <policeTask+0x8>
 80009f0:	20003208 	.word	0x20003208
 80009f4:	08000aa1 	.word	0x08000aa1

080009f8 <ambulanceTask>:

	}

}
void ambulanceTask(void *argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]


	request ambulance_req;
	while (1){
		if (osMessageQueueGet(AmbulanceQueueHandle, &ambulance_req, 0, osWaitForever) == osOK){
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <ambulanceTask+0x30>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	f107 0108 	add.w	r1, r7, #8
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f001 fec5 	bl	800279c <osMessageQueueGet>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f3      	bne.n	8000a00 <ambulanceTask+0x8>

			osThreadNew(ServiceRoutineAmbulance, (void* )&ambulance_req, NULL);
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <ambulanceTask+0x34>)
 8000a22:	f001 facb 	bl	8001fbc <osThreadNew>
		if (osMessageQueueGet(AmbulanceQueueHandle, &ambulance_req, 0, osWaitForever) == osOK){
 8000a26:	e7eb      	b.n	8000a00 <ambulanceTask+0x8>
 8000a28:	200021b4 	.word	0x200021b4
 8000a2c:	08000cf1 	.word	0x08000cf1

08000a30 <fireTask>:

	}

}
void fireTask(void *argument)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]


	request fire_req;
	while (1){
		if (osMessageQueueGet(FireQueueHandle, &fire_req, 0, osWaitForever) == osOK){
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <fireTask+0x30>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	f107 0108 	add.w	r1, r7, #8
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	2200      	movs	r2, #0
 8000a46:	f001 fea9 	bl	800279c <osMessageQueueGet>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1f3      	bne.n	8000a38 <fireTask+0x8>

			osThreadNew(ServiceRoutineFire, (void* )&fire_req, NULL);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	4619      	mov	r1, r3
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <fireTask+0x34>)
 8000a5a:	f001 faaf 	bl	8001fbc <osThreadNew>
		if (osMessageQueueGet(FireQueueHandle, &fire_req, 0, osWaitForever) == osOK){
 8000a5e:	e7eb      	b.n	8000a38 <fireTask+0x8>
 8000a60:	2000425c 	.word	0x2000425c
 8000a64:	08000bc9 	.word	0x08000bc9

08000a68 <coronaTask>:

	}

}
void coronaTask(void *argument)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]


	request corona_req;
	while (1){
		if (osMessageQueueGet(CoronaQueueHandle, &corona_req, 0, osWaitForever) == osOK){
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <coronaTask+0x30>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	f107 0108 	add.w	r1, r7, #8
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f001 fe8d 	bl	800279c <osMessageQueueGet>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1f3      	bne.n	8000a70 <coronaTask+0x8>

			osThreadNew(ServiceRoutineCorona, (void* )&corona_req, NULL);
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <coronaTask+0x34>)
 8000a92:	f001 fa93 	bl	8001fbc <osThreadNew>
		if (osMessageQueueGet(CoronaQueueHandle, &corona_req, 0, osWaitForever) == osOK){
 8000a96:	e7eb      	b.n	8000a70 <coronaTask+0x8>
 8000a98:	200052b0 	.word	0x200052b0
 8000a9c:	08000e19 	.word	0x08000e19

08000aa0 <ServiceRoutinePolice>:

}



void ServiceRoutinePolice(void* argument){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	request* police_req = (request*) argument ;//
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60bb      	str	r3, [r7, #8]
	int i=0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
	while (i<police_req->requested_vehicles){
 8000ab0:	e076      	b.n	8000ba0 <ServiceRoutinePolice+0x100>
		osMutexAcquire(globalMutex,osWaitForever);
 8000ab2:	4b41      	ldr	r3, [pc, #260]	; (8000bb8 <ServiceRoutinePolice+0x118>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fcc6 	bl	800244c <osMutexAcquire>
		osMutexAcquire(policeMutex, osWaitForever);
 8000ac0:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <ServiceRoutinePolice+0x11c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fcbf 	bl	800244c <osMutexAcquire>

		if (department_list[POLICE].available_num>0 && totalVehicles>0 && department_list[POLICE].concurrent_num>0){
 8000ace:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d05a      	beq.n	8000b8c <ServiceRoutinePolice+0xec>
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <ServiceRoutinePolice+0x124>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d056      	beq.n	8000b8c <ServiceRoutinePolice+0xec>
 8000ade:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000ae0:	785b      	ldrb	r3, [r3, #1]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d052      	beq.n	8000b8c <ServiceRoutinePolice+0xec>
			i++;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]

			/*if (osSemaphoreAcquire(PoliceSemaphoreStaticHandle, osWaitForever)==osOK){
			if (osSemaphoreAcquire(TotalSemaphoreDynamicHandle, osWaitForever)==osOK){*/
			totalVehicles--;
 8000aec:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <ServiceRoutinePolice+0x124>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4a34      	ldr	r2, [pc, #208]	; (8000bc4 <ServiceRoutinePolice+0x124>)
 8000af4:	6013      	str	r3, [r2, #0]
			osMutexRelease(globalMutex);
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <ServiceRoutinePolice+0x118>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fd04 	bl	8002508 <osMutexRelease>
			department_list[POLICE].available_num--;
 8000b00:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000b0a:	709a      	strb	r2, [r3, #2]
			department_list[POLICE].concurrent_num--;
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000b0e:	785b      	ldrb	r3, [r3, #1]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000b16:	705a      	strb	r2, [r3, #1]
			osMutexRelease(policeMutex);
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <ServiceRoutinePolice+0x11c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fcf3 	bl	8002508 <osMutexRelease>
			if (i==police_req->requested_vehicles-1){
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d138      	bne.n	8000ba0 <ServiceRoutinePolice+0x100>
				osDelay(police_req->time_to_complete);
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fae8 	bl	8002108 <osDelay>
				//osSemaphoreRelease(PoliceSemaphoreStaticHandle);
				//osSemaphoreRelease(TotalSemaphoreDynamicHandle);
				osMutexAcquire(policeMutex, osWaitForever);
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <ServiceRoutinePolice+0x11c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fc83 	bl	800244c <osMutexAcquire>
				osMutexAcquire(globalMutex, osWaitForever);
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <ServiceRoutinePolice+0x118>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fc7c 	bl	800244c <osMutexAcquire>

				totalVehicles++;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <ServiceRoutinePolice+0x124>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	4a1a      	ldr	r2, [pc, #104]	; (8000bc4 <ServiceRoutinePolice+0x124>)
 8000b5c:	6013      	str	r3, [r2, #0]
				osMutexRelease(globalMutex);
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <ServiceRoutinePolice+0x118>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fcd0 	bl	8002508 <osMutexRelease>
				department_list[POLICE].concurrent_num++;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000b6a:	785b      	ldrb	r3, [r3, #1]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000b72:	705a      	strb	r2, [r3, #1]
				department_list[POLICE].available_num++;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000b76:	789b      	ldrb	r3, [r3, #2]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <ServiceRoutinePolice+0x120>)
 8000b7e:	709a      	strb	r2, [r3, #2]
				osMutexRelease(policeMutex);
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <ServiceRoutinePolice+0x11c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fcbf 	bl	8002508 <osMutexRelease>
			if (i==police_req->requested_vehicles-1){
 8000b8a:	e009      	b.n	8000ba0 <ServiceRoutinePolice+0x100>


			}
		}
		else{
			osMutexRelease(globalMutex);
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <ServiceRoutinePolice+0x118>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fcb9 	bl	8002508 <osMutexRelease>
			osMutexRelease(policeMutex);
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <ServiceRoutinePolice+0x11c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 fcb4 	bl	8002508 <osMutexRelease>
	while (i<police_req->requested_vehicles){
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	db82      	blt.n	8000ab2 <ServiceRoutinePolice+0x12>
		}
	}
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000b0 	.word	0x200000b0
 8000bbc:	200000ac 	.word	0x200000ac
 8000bc0:	200000a0 	.word	0x200000a0
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <ServiceRoutineFire>:


void ServiceRoutineFire(void* argument){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	request * fire_req = (request*) argument ;//
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	60bb      	str	r3, [r7, #8]
	int i=0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
	while (i<fire_req->requested_vehicles){
 8000bd8:	e076      	b.n	8000cc8 <ServiceRoutineFire+0x100>
		osMutexAcquire(globalMutex,osWaitForever);
 8000bda:	4b41      	ldr	r3, [pc, #260]	; (8000ce0 <ServiceRoutineFire+0x118>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f04f 31ff 	mov.w	r1, #4294967295
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fc32 	bl	800244c <osMutexAcquire>
		osMutexAcquire(fireMutex, osWaitForever);
 8000be8:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <ServiceRoutineFire+0x11c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fc2b 	bl	800244c <osMutexAcquire>

		if (department_list[FIRE].available_num>0 && totalVehicles>0 && department_list[FIRE].concurrent_num>0){
 8000bf6:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000bf8:	795b      	ldrb	r3, [r3, #5]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d05a      	beq.n	8000cb4 <ServiceRoutineFire+0xec>
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <ServiceRoutineFire+0x124>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d056      	beq.n	8000cb4 <ServiceRoutineFire+0xec>
 8000c06:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d052      	beq.n	8000cb4 <ServiceRoutineFire+0xec>
			i++;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]

			/*if (osSemaphoreAcquire(PoliceSemaphoreStaticHandle, osWaitForever)==osOK){
			if (osSemaphoreAcquire(TotalSemaphoreDynamicHandle, osWaitForever)==osOK){*/
			totalVehicles--;
 8000c14:	4b35      	ldr	r3, [pc, #212]	; (8000cec <ServiceRoutineFire+0x124>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	4a34      	ldr	r2, [pc, #208]	; (8000cec <ServiceRoutineFire+0x124>)
 8000c1c:	6013      	str	r3, [r2, #0]
			osMutexRelease(globalMutex);
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <ServiceRoutineFire+0x118>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fc70 	bl	8002508 <osMutexRelease>
			department_list[FIRE].available_num--;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000c2a:	795b      	ldrb	r3, [r3, #5]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000c32:	715a      	strb	r2, [r3, #5]
			department_list[FIRE].concurrent_num--;
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000c36:	791b      	ldrb	r3, [r3, #4]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000c3e:	711a      	strb	r2, [r3, #4]
			osMutexRelease(fireMutex);
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <ServiceRoutineFire+0x11c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fc5f 	bl	8002508 <osMutexRelease>
			if (i==fire_req->requested_vehicles-1){
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	785b      	ldrb	r3, [r3, #1]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d138      	bne.n	8000cc8 <ServiceRoutineFire+0x100>
				osDelay(fire_req->time_to_complete);
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fa54 	bl	8002108 <osDelay>
				//osSemaphoreRelease(PoliceSemaphoreStaticHandle);
				//osSemaphoreRelease(TotalSemaphoreDynamicHandle);
				osMutexAcquire(fireMutex, osWaitForever);
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <ServiceRoutineFire+0x11c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fbef 	bl	800244c <osMutexAcquire>
				osMutexAcquire(globalMutex, osWaitForever);
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <ServiceRoutineFire+0x118>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f04f 31ff 	mov.w	r1, #4294967295
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fbe8 	bl	800244c <osMutexAcquire>

				totalVehicles++;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <ServiceRoutineFire+0x124>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <ServiceRoutineFire+0x124>)
 8000c84:	6013      	str	r3, [r2, #0]
				osMutexRelease(globalMutex);
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <ServiceRoutineFire+0x118>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fc3c 	bl	8002508 <osMutexRelease>
				department_list[FIRE].concurrent_num++;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000c9a:	711a      	strb	r2, [r3, #4]
				department_list[FIRE].available_num++;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000c9e:	795b      	ldrb	r3, [r3, #5]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <ServiceRoutineFire+0x120>)
 8000ca6:	715a      	strb	r2, [r3, #5]
				osMutexRelease(fireMutex);
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <ServiceRoutineFire+0x11c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fc2b 	bl	8002508 <osMutexRelease>
			if (i==fire_req->requested_vehicles-1){
 8000cb2:	e009      	b.n	8000cc8 <ServiceRoutineFire+0x100>


			}
		}
		else{
			osMutexRelease(globalMutex);
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <ServiceRoutineFire+0x118>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 fc25 	bl	8002508 <osMutexRelease>
			osMutexRelease(fireMutex);
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <ServiceRoutineFire+0x11c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fc20 	bl	8002508 <osMutexRelease>
	while (i<fire_req->requested_vehicles){
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	db82      	blt.n	8000bda <ServiceRoutineFire+0x12>
		}
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000b0 	.word	0x200000b0
 8000ce4:	200000b8 	.word	0x200000b8
 8000ce8:	200000a0 	.word	0x200000a0
 8000cec:	20000000 	.word	0x20000000

08000cf0 <ServiceRoutineAmbulance>:

void ServiceRoutineAmbulance(void* argument){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	request* ambulance_req = (request*) argument ;//
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	60bb      	str	r3, [r7, #8]
	int i=0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
	while (i<ambulance_req->requested_vehicles){
 8000d00:	e076      	b.n	8000df0 <ServiceRoutineAmbulance+0x100>
		osMutexAcquire(globalMutex,osWaitForever);
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <ServiceRoutineAmbulance+0x118>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fb9e 	bl	800244c <osMutexAcquire>
		osMutexAcquire(ambulanceMutex, osWaitForever);
 8000d10:	4b3e      	ldr	r3, [pc, #248]	; (8000e0c <ServiceRoutineAmbulance+0x11c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fb97 	bl	800244c <osMutexAcquire>

		if (department_list[AMBULANCE].available_num>0 && totalVehicles>0 && department_list[AMBULANCE].concurrent_num>0){
 8000d1e:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000d20:	7a1b      	ldrb	r3, [r3, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d05a      	beq.n	8000ddc <ServiceRoutineAmbulance+0xec>
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <ServiceRoutineAmbulance+0x124>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d056      	beq.n	8000ddc <ServiceRoutineAmbulance+0xec>
 8000d2e:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000d30:	79db      	ldrb	r3, [r3, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d052      	beq.n	8000ddc <ServiceRoutineAmbulance+0xec>
			i++;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]

			/*if (osSemaphoreAcquire(PoliceSemaphoreStaticHandle, osWaitForever)==osOK){
			if (osSemaphoreAcquire(TotalSemaphoreDynamicHandle, osWaitForever)==osOK){*/
			totalVehicles--;
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <ServiceRoutineAmbulance+0x124>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <ServiceRoutineAmbulance+0x124>)
 8000d44:	6013      	str	r3, [r2, #0]
			osMutexRelease(globalMutex);
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <ServiceRoutineAmbulance+0x118>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fbdc 	bl	8002508 <osMutexRelease>
			department_list[AMBULANCE].available_num--;
 8000d50:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000d52:	7a1b      	ldrb	r3, [r3, #8]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000d5a:	721a      	strb	r2, [r3, #8]
			department_list[AMBULANCE].concurrent_num--;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000d5e:	79db      	ldrb	r3, [r3, #7]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000d66:	71da      	strb	r2, [r3, #7]
			osMutexRelease(ambulanceMutex);
 8000d68:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <ServiceRoutineAmbulance+0x11c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fbcb 	bl	8002508 <osMutexRelease>
			if (i==ambulance_req->requested_vehicles-1){
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	785b      	ldrb	r3, [r3, #1]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d138      	bne.n	8000df0 <ServiceRoutineAmbulance+0x100>
				osDelay(ambulance_req->time_to_complete);
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 f9c0 	bl	8002108 <osDelay>
				//osSemaphoreRelease(PoliceSemaphoreStaticHandle);
				//osSemaphoreRelease(TotalSemaphoreDynamicHandle);
				osMutexAcquire(ambulanceMutex, osWaitForever);
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <ServiceRoutineAmbulance+0x11c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 fb5b 	bl	800244c <osMutexAcquire>
				osMutexAcquire(globalMutex, osWaitForever);
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <ServiceRoutineAmbulance+0x118>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 fb54 	bl	800244c <osMutexAcquire>

				totalVehicles++;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <ServiceRoutineAmbulance+0x124>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <ServiceRoutineAmbulance+0x124>)
 8000dac:	6013      	str	r3, [r2, #0]
				osMutexRelease(globalMutex);
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <ServiceRoutineAmbulance+0x118>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fba8 	bl	8002508 <osMutexRelease>
				department_list[AMBULANCE].concurrent_num++;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000dba:	79db      	ldrb	r3, [r3, #7]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000dc2:	71da      	strb	r2, [r3, #7]
				department_list[AMBULANCE].available_num++;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000dc6:	7a1b      	ldrb	r3, [r3, #8]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <ServiceRoutineAmbulance+0x120>)
 8000dce:	721a      	strb	r2, [r3, #8]
				osMutexRelease(ambulanceMutex);
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <ServiceRoutineAmbulance+0x11c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 fb97 	bl	8002508 <osMutexRelease>
			if (i==ambulance_req->requested_vehicles-1){
 8000dda:	e009      	b.n	8000df0 <ServiceRoutineAmbulance+0x100>


			}
		}
		else{
			osMutexRelease(globalMutex);
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <ServiceRoutineAmbulance+0x118>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fb91 	bl	8002508 <osMutexRelease>
			osMutexRelease(ambulanceMutex);
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <ServiceRoutineAmbulance+0x11c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fb8c 	bl	8002508 <osMutexRelease>
	while (i<ambulance_req->requested_vehicles){
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	461a      	mov	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	db82      	blt.n	8000d02 <ServiceRoutineAmbulance+0x12>
		}
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000b0 	.word	0x200000b0
 8000e0c:	200000b4 	.word	0x200000b4
 8000e10:	200000a0 	.word	0x200000a0
 8000e14:	20000000 	.word	0x20000000

08000e18 <ServiceRoutineCorona>:

void ServiceRoutineCorona(void* argument){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	request* corona_req = (request*) argument ;//
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	60bb      	str	r3, [r7, #8]
	int i=0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
	while (i<corona_req->requested_vehicles){
 8000e28:	e076      	b.n	8000f18 <ServiceRoutineCorona+0x100>
		osMutexAcquire(globalMutex,osWaitForever);
 8000e2a:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <ServiceRoutineCorona+0x118>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fb0a 	bl	800244c <osMutexAcquire>
		osMutexAcquire(coronaMutex, osWaitForever);
 8000e38:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <ServiceRoutineCorona+0x11c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fb03 	bl	800244c <osMutexAcquire>

		if (department_list[CORONA].available_num>0 && totalVehicles>0 && department_list[CORONA].concurrent_num>0){
 8000e46:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000e48:	7adb      	ldrb	r3, [r3, #11]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d05a      	beq.n	8000f04 <ServiceRoutineCorona+0xec>
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <ServiceRoutineCorona+0x124>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d056      	beq.n	8000f04 <ServiceRoutineCorona+0xec>
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000e58:	7a9b      	ldrb	r3, [r3, #10]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d052      	beq.n	8000f04 <ServiceRoutineCorona+0xec>
			i++;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]

			/*if (osSemaphoreAcquire(PoliceSemaphoreStaticHandle, osWaitForever)==osOK){
			if (osSemaphoreAcquire(TotalSemaphoreDynamicHandle, osWaitForever)==osOK){*/
			totalVehicles--;
 8000e64:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <ServiceRoutineCorona+0x124>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	4a34      	ldr	r2, [pc, #208]	; (8000f3c <ServiceRoutineCorona+0x124>)
 8000e6c:	6013      	str	r3, [r2, #0]
			osMutexRelease(globalMutex);
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <ServiceRoutineCorona+0x118>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fb48 	bl	8002508 <osMutexRelease>
			department_list[CORONA].available_num--;
 8000e78:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000e7a:	7adb      	ldrb	r3, [r3, #11]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000e82:	72da      	strb	r2, [r3, #11]
			department_list[CORONA].concurrent_num--;
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000e86:	7a9b      	ldrb	r3, [r3, #10]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000e8e:	729a      	strb	r2, [r3, #10]
			osMutexRelease(coronaMutex);
 8000e90:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <ServiceRoutineCorona+0x11c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fb37 	bl	8002508 <osMutexRelease>
			if (i==corona_req->requested_vehicles-1){
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d138      	bne.n	8000f18 <ServiceRoutineCorona+0x100>
				osDelay(corona_req->time_to_complete);
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 f92c 	bl	8002108 <osDelay>
				//osSemaphoreRelease(PoliceSemaphoreStaticHandle);
				//osSemaphoreRelease(TotalSemaphoreDynamicHandle);
				osMutexAcquire(coronaMutex, osWaitForever);
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <ServiceRoutineCorona+0x11c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fac7 	bl	800244c <osMutexAcquire>
				osMutexAcquire(globalMutex, osWaitForever);
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <ServiceRoutineCorona+0x118>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fac0 	bl	800244c <osMutexAcquire>

				totalVehicles++;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <ServiceRoutineCorona+0x124>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <ServiceRoutineCorona+0x124>)
 8000ed4:	6013      	str	r3, [r2, #0]
				osMutexRelease(globalMutex);
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <ServiceRoutineCorona+0x118>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fb14 	bl	8002508 <osMutexRelease>
				department_list[CORONA].concurrent_num++;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000ee2:	7a9b      	ldrb	r3, [r3, #10]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000eea:	729a      	strb	r2, [r3, #10]
				department_list[CORONA].available_num++;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000eee:	7adb      	ldrb	r3, [r3, #11]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <ServiceRoutineCorona+0x120>)
 8000ef6:	72da      	strb	r2, [r3, #11]
				osMutexRelease(coronaMutex);
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <ServiceRoutineCorona+0x11c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fb03 	bl	8002508 <osMutexRelease>
			if (i==corona_req->requested_vehicles-1){
 8000f02:	e009      	b.n	8000f18 <ServiceRoutineCorona+0x100>


			}
		}
		else{
			osMutexRelease(globalMutex);
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <ServiceRoutineCorona+0x118>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fafd 	bl	8002508 <osMutexRelease>
			osMutexRelease(coronaMutex);
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <ServiceRoutineCorona+0x11c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 faf8 	bl	8002508 <osMutexRelease>
	while (i<corona_req->requested_vehicles){
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	db82      	blt.n	8000e2a <ServiceRoutineCorona+0x12>
		}
	}
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000b0 	.word	0x200000b0
 8000f34:	200000bc 	.word	0x200000bc
 8000f38:	200000a0 	.word	0x200000a0
 8000f3c:	20000000 	.word	0x20000000

08000f40 <timerCallback>:

  /* USER CODE END 5 */

void timerCallback(void *argument){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	printf("Dispatcher initial size: %d\r\n", INIT_DISPATCHER_SIZE);
 8000f48:	2132      	movs	r1, #50	; 0x32
 8000f4a:	480a      	ldr	r0, [pc, #40]	; (8000f74 <timerCallback+0x34>)
 8000f4c:	f004 fe94 	bl	8005c78 <iprintf>
	printf("Dispatcher free size: %d\r\n", dispatch_data.available_num);
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <timerCallback+0x38>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <timerCallback+0x3c>)
 8000f58:	f004 fe8e 	bl	8005c78 <iprintf>
	printf("Dispatcher occupied size: %d\r\n", INIT_DISPATCHER_SIZE-dispatch_data.available_num);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <timerCallback+0x38>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <timerCallback+0x40>)
 8000f68:	f004 fe86 	bl	8005c78 <iprintf>



}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08006ccc 	.word	0x08006ccc
 8000f78:	20000014 	.word	0x20000014
 8000f7c:	08006cec 	.word	0x08006cec
 8000f80:	08006d08 	.word	0x08006d08

08000f84 <loggingStartThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_loggingStartThread */
void loggingStartThread(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN loggingStartThread */
  /* Infinite loop */
	osTimerId_t log_timer= osTimerNew(timerCallback, osTimerPeriodic , NULL, NULL);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2101      	movs	r1, #1
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <loggingStartThread+0x2c>)
 8000f94:	f001 f8fc 	bl	8002190 <osTimerNew>
 8000f98:	60f8      	str	r0, [r7, #12]
	osStatus_t status = osTimerStart(log_timer, LOG_TIME_INTERVAL);
 8000f9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f001 f97a 	bl	8002298 <osTimerStart>
 8000fa4:	60b8      	str	r0, [r7, #8]

}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	08000f41 	.word	0x08000f41

08000fb4 <MPU_Config>:

/* MPU Configuration */

void MPU_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fc6:	f000 fab5 	bl	8001534 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fd6:	231f      	movs	r3, #31
 8000fd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fda:	2387      	movs	r3, #135	; 0x87
 8000fdc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fea:	2301      	movs	r3, #1
 8000fec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fad3 	bl	80015a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ffe:	2004      	movs	r0, #4
 8001000:	f000 fab0 	bl	8001564 <HAL_MPU_Enable>

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	e7fe      	b.n	8001014 <Error_Handler+0x8>
	...

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_MspInit+0x4c>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_MspInit+0x4c>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	210f      	movs	r1, #15
 8001052:	f06f 0001 	mvn.w	r0, #1
 8001056:	f000 fa44 	bl	80014e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001098:	f000 f946 	bl	8001328 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800109c:	f003 fade 	bl	800465c <xTaskGetSchedulerState>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d001      	beq.n	80010aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010a6:	f004 fa7f 	bl	80055a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  return 1;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_kill>:

int _kill(int pid, int sig)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010c8:	f004 ff6a 	bl	8005fa0 <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2216      	movs	r2, #22
 80010d0:	601a      	str	r2, [r3, #0]
  return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_exit>:

void _exit (int status)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010e6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffe7 	bl	80010be <_kill>
  while (1) {}    /* Make sure we hang here */
 80010f0:	e7fe      	b.n	80010f0 <_exit+0x12>

080010f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e00a      	b.n	800111a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001104:	f3af 8000 	nop.w
 8001108:	4601      	mov	r1, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	60ba      	str	r2, [r7, #8]
 8001110:	b2ca      	uxtb	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	dbf0      	blt.n	8001104 <_read+0x12>
  }

  return len;
 8001122:	687b      	ldr	r3, [r7, #4]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e009      	b.n	8001152 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	60ba      	str	r2, [r7, #8]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	dbf1      	blt.n	800113e <_write+0x12>
  }
  return len;
 800115a:	687b      	ldr	r3, [r7, #4]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_close>:

int _close(int file)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118c:	605a      	str	r2, [r3, #4]
  return 0;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_isatty>:

int _isatty(int file)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a4:	2301      	movs	r3, #1
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b085      	sub	sp, #20
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f004 fed0 	bl	8005fa0 <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20050000 	.word	0x20050000
 800122c:	00000400 	.word	0x00000400
 8001230:	20006304 	.word	0x20006304
 8001234:	2000ada0 	.word	0x2000ada0

08001238 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001286:	f7ff ffd7 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f004 fe8f 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff f98d 	bl	80005ac <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80012a0:	08006fb4 	.word	0x08006fb4
  ldr r2, =_sbss
 80012a4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80012a8:	2000ada0 	.word	0x2000ada0

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>

080012ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f90a 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b8:	200f      	movs	r0, #15
 80012ba:	f000 f805 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012be:	f7ff feab 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f917 	bl	800151a <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f8ed 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000018 	.word	0x20000018
 8001320:	20000020 	.word	0x20000020
 8001324:	2000001c 	.word	0x2000001c

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000020 	.word	0x20000020
 800134c:	20006308 	.word	0x20006308

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20006308 	.word	0x20006308

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <__NVIC_SetPriorityGrouping+0x40>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	4313      	orrs	r3, r2
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	05fa0000 	.word	0x05fa0000

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff47 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff5c 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff8e 	bl	8001420 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffb0 	bl	8001488 <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001538:	f3bf 8f5f 	dmb	sy
}
 800153c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800153e:	4b07      	ldr	r3, [pc, #28]	; (800155c <HAL_MPU_Disable+0x28>)
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_MPU_Disable+0x28>)
 8001544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001548:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_MPU_Disable+0x2c>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	e000ed90 	.word	0xe000ed90

08001564 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_MPU_Enable+0x38>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_MPU_Enable+0x3c>)
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_MPU_Enable+0x3c>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001582:	f3bf 8f4f 	dsb	sy
}
 8001586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001588:	f3bf 8f6f 	isb	sy
}
 800158c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed90 	.word	0xe000ed90
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	785a      	ldrb	r2, [r3, #1]
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_MPU_ConfigRegion+0x84>)
 80015b2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d029      	beq.n	8001610 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80015bc:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_MPU_ConfigRegion+0x84>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7b1b      	ldrb	r3, [r3, #12]
 80015c8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7adb      	ldrb	r3, [r3, #11]
 80015ce:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7a9b      	ldrb	r3, [r3, #10]
 80015d6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7b9b      	ldrb	r3, [r3, #14]
 80015e6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7bdb      	ldrb	r3, [r3, #15]
 80015ee:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7a5b      	ldrb	r3, [r3, #9]
 80015f6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7a1b      	ldrb	r3, [r3, #8]
 80015fe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001600:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800160a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800160c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800160e:	e005      	b.n	800161c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_MPU_ConfigRegion+0x84>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HAL_MPU_ConfigRegion+0x84>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed90 	.word	0xe000ed90

0800162c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e291      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8087 	beq.w	800175e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001650:	4b96      	ldr	r3, [pc, #600]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b04      	cmp	r3, #4
 800165a:	d00c      	beq.n	8001676 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165c:	4b93      	ldr	r3, [pc, #588]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d112      	bne.n	800168e <HAL_RCC_OscConfig+0x62>
 8001668:	4b90      	ldr	r3, [pc, #576]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001674:	d10b      	bne.n	800168e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001676:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d06c      	beq.n	800175c <HAL_RCC_OscConfig+0x130>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d168      	bne.n	800175c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e26b      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x7a>
 8001698:	4b84      	ldr	r3, [pc, #528]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a83      	ldr	r2, [pc, #524]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e02e      	b.n	8001704 <HAL_RCC_OscConfig+0xd8>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x9c>
 80016ae:	4b7f      	ldr	r3, [pc, #508]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7e      	ldr	r2, [pc, #504]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b7c      	ldr	r3, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a7b      	ldr	r2, [pc, #492]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e01d      	b.n	8001704 <HAL_RCC_OscConfig+0xd8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0xc0>
 80016d2:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a75      	ldr	r2, [pc, #468]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a72      	ldr	r2, [pc, #456]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0xd8>
 80016ec:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6b      	ldr	r2, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fe20 	bl	8001350 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fe1c 	bl	8001350 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e21f      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b61      	ldr	r3, [pc, #388]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0xe8>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fe0c 	bl	8001350 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fe08 	bl	8001350 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e20b      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x110>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d069      	beq.n	800183e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800176a:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b08      	cmp	r3, #8
 8001780:	d11c      	bne.n	80017bc <HAL_RCC_OscConfig+0x190>
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1df      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	493d      	ldr	r1, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e040      	b.n	800183e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d023      	beq.n	800180c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a38      	ldr	r2, [pc, #224]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fdbe 	bl	8001350 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fdba 	bl	8001350 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1bd      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	4929      	ldr	r1, [pc, #164]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
 800180a:	e018      	b.n	800183e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a26      	ldr	r2, [pc, #152]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fd9a 	bl	8001350 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fd96 	bl	8001350 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e199      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d038      	beq.n	80018bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d019      	beq.n	8001886 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fd77 	bl	8001350 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001866:	f7ff fd73 	bl	8001350 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e176      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x23a>
 8001884:	e01a      	b.n	80018bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fd5d 	bl	8001350 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189a:	f7ff fd59 	bl	8001350 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d903      	bls.n	80018b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e15c      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
 80018ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 80018b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a4 	beq.w	8001a12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10d      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f2:	4b82      	ldr	r3, [pc, #520]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d118      	bne.n	8001930 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018fe:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7e      	ldr	r2, [pc, #504]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190a:	f7ff fd21 	bl	8001350 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001912:	f7ff fd1d 	bl	8001350 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b64      	cmp	r3, #100	; 0x64
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e120      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x4d0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x31a>
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	e02d      	b.n	80019a2 <HAL_RCC_OscConfig+0x376>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x33c>
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001952:	4a69      	ldr	r2, [pc, #420]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	; 0x70
 800195a:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a66      	ldr	r2, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	e01c      	b.n	80019a2 <HAL_RCC_OscConfig+0x376>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d10c      	bne.n	800198a <HAL_RCC_OscConfig+0x35e>
 8001970:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a60      	ldr	r2, [pc, #384]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a5d      	ldr	r2, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	e00b      	b.n	80019a2 <HAL_RCC_OscConfig+0x376>
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff fcd1 	bl	8001350 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff fccd 	bl	8001350 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0ce      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCC_OscConfig+0x386>
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff fcbb 	bl	8001350 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fcb7 	bl	8001350 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a06:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a3b      	ldr	r2, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80a4 	beq.w	8001b64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1c:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d06b      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d149      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a30      	ldr	r2, [pc, #192]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc88 	bl	8001350 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff fc84 	bl	8001350 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e087      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	4313      	orrs	r3, r2
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fc58 	bl	8001350 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff fc54 	bl	8001350 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e057      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x478>
 8001ac2:	e04f      	b.n	8001b64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fc3e 	bl	8001350 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff fc3a 	bl	8001350 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e03d      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCC_OscConfig+0x4cc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4ac>
 8001af6:	e035      	b.n	8001b64 <HAL_RCC_OscConfig+0x538>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x544>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d028      	beq.n	8001b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d121      	bne.n	8001b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d111      	bne.n	8001b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0d0      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d910      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 020f 	bic.w	r2, r3, #15
 8001ba2:	4965      	ldr	r1, [pc, #404]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b8      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	494d      	ldr	r1, [pc, #308]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d040      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d115      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e07f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e073      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e06b      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4936      	ldr	r1, [pc, #216]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c68:	f7ff fb72 	bl	8001350 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7ff fb6e 	bl	8001350 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e053      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d210      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 020f 	bic.w	r2, r3, #15
 8001cae:	4922      	ldr	r1, [pc, #136]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e032      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4916      	ldr	r1, [pc, #88]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d06:	f000 f821 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	490a      	ldr	r1, [pc, #40]	; (8001d40 <HAL_RCC_ClockConfig+0x1cc>)
 8001d18:	5ccb      	ldrb	r3, [r1, r3]
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1d0>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1d4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff face 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	08006eb4 	.word	0x08006eb4
 8001d44:	20000018 	.word	0x20000018
 8001d48:	2000001c 	.word	0x2000001c

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d50:	b090      	sub	sp, #64	; 0x40
 8001d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
 8001d58:	2300      	movs	r3, #0
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d00d      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x40>
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	f200 80a1 	bhi.w	8001eb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x34>
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d7e:	e09b      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d84:	e09b      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d8a:	e098      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d96:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d028      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da2:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	2200      	movs	r2, #0
 8001daa:	623b      	str	r3, [r7, #32]
 8001dac:	627a      	str	r2, [r7, #36]	; 0x24
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001db4:	2100      	movs	r1, #0
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001db8:	fb03 f201 	mul.w	r2, r3, r1
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	fb00 f303 	mul.w	r3, r0, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a43      	ldr	r2, [pc, #268]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dc6:	fba0 1202 	umull	r1, r2, r0, r2
 8001dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dcc:	460a      	mov	r2, r1
 8001dce:	62ba      	str	r2, [r7, #40]	; 0x28
 8001dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd2:	4413      	add	r3, r2
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	2200      	movs	r2, #0
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	61fa      	str	r2, [r7, #28]
 8001dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001de6:	f7fe fa63 	bl	80002b0 <__aeabi_uldivmod>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4613      	mov	r3, r2
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df2:	e053      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	617a      	str	r2, [r7, #20]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e06:	f04f 0b00 	mov.w	fp, #0
 8001e0a:	4652      	mov	r2, sl
 8001e0c:	465b      	mov	r3, fp
 8001e0e:	f04f 0000 	mov.w	r0, #0
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	0159      	lsls	r1, r3, #5
 8001e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e1c:	0150      	lsls	r0, r2, #5
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	ebb2 080a 	subs.w	r8, r2, sl
 8001e26:	eb63 090b 	sbc.w	r9, r3, fp
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e3e:	ebb2 0408 	subs.w	r4, r2, r8
 8001e42:	eb63 0509 	sbc.w	r5, r3, r9
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	00eb      	lsls	r3, r5, #3
 8001e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e54:	00e2      	lsls	r2, r4, #3
 8001e56:	4614      	mov	r4, r2
 8001e58:	461d      	mov	r5, r3
 8001e5a:	eb14 030a 	adds.w	r3, r4, sl
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	eb45 030b 	adc.w	r3, r5, fp
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e72:	4629      	mov	r1, r5
 8001e74:	028b      	lsls	r3, r1, #10
 8001e76:	4621      	mov	r1, r4
 8001e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	028a      	lsls	r2, r1, #10
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	2200      	movs	r2, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e90:	f7fe fa0e 	bl	80002b0 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001eb6:	e002      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3740      	adds	r7, #64	; 0x40
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	017d7840 	.word	0x017d7840

08001ed8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eee:	f3ef 8305 	mrs	r3, IPSR
 8001ef2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001efa:	f3ef 8310 	mrs	r3, PRIMASK
 8001efe:	607b      	str	r3, [r7, #4]
  return(result);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f06:	f3ef 8311 	mrs	r3, BASEPRI
 8001f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <osKernelInitialize+0x3a>
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <osKernelInitialize+0x64>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d103      	bne.n	8001f22 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001f1a:	f06f 0305 	mvn.w	r3, #5
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e00c      	b.n	8001f3c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <osKernelInitialize+0x64>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <osKernelInitialize+0x64>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	e002      	b.n	8001f3c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	2000630c 	.word	0x2000630c

08001f50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f56:	f3ef 8305 	mrs	r3, IPSR
 8001f5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f62:	f3ef 8310 	mrs	r3, PRIMASK
 8001f66:	607b      	str	r3, [r7, #4]
  return(result);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8001f72:	603b      	str	r3, [r7, #0]
  return(result);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <osKernelStart+0x3a>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <osKernelStart+0x68>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d103      	bne.n	8001f8a <osKernelStart+0x3a>
    stat = osErrorISR;
 8001f82:	f06f 0305 	mvn.w	r3, #5
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e010      	b.n	8001fac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <osKernelStart+0x68>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d109      	bne.n	8001fa6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f92:	f7ff ffa1 	bl	8001ed8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <osKernelStart+0x68>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f9c:	f001 fef0 	bl	8003d80 <vTaskStartScheduler>
      stat = osOK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e002      	b.n	8001fac <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fac:	68fb      	ldr	r3, [r7, #12]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000630c 	.word	0x2000630c

08001fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b090      	sub	sp, #64	; 0x40
 8001fc0:	af04      	add	r7, sp, #16
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fcc:	f3ef 8305 	mrs	r3, IPSR
 8001fd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8001fd2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f040 808f 	bne.w	80020f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fda:	f3ef 8310 	mrs	r3, PRIMASK
 8001fde:	61bb      	str	r3, [r7, #24]
  return(result);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8001fea:	617b      	str	r3, [r7, #20]
  return(result);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <osThreadNew+0x3e>
 8001ff2:	4b44      	ldr	r3, [pc, #272]	; (8002104 <osThreadNew+0x148>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d07e      	beq.n	80020f8 <osThreadNew+0x13c>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d07b      	beq.n	80020f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002004:	2318      	movs	r3, #24
 8002006:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002008:	2300      	movs	r3, #0
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
 8002010:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d045      	beq.n	80020a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <osThreadNew+0x6a>
        name = attr->name;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <osThreadNew+0x90>
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	2b38      	cmp	r3, #56	; 0x38
 800203e:	d805      	bhi.n	800204c <osThreadNew+0x90>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <osThreadNew+0x94>
        return (NULL);
 800204c:	2300      	movs	r3, #0
 800204e:	e054      	b.n	80020fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <osThreadNew+0xca>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b5b      	cmp	r3, #91	; 0x5b
 800206e:	d90a      	bls.n	8002086 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <osThreadNew+0xca>
        mem = 1;
 8002080:	2301      	movs	r3, #1
 8002082:	623b      	str	r3, [r7, #32]
 8002084:	e010      	b.n	80020a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <osThreadNew+0xec>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d108      	bne.n	80020a8 <osThreadNew+0xec>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <osThreadNew+0xec>
          mem = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
 80020a2:	e001      	b.n	80020a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d110      	bne.n	80020d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020b6:	9202      	str	r2, [sp, #8]
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f001 fc7b 	bl	80039c0 <xTaskCreateStatic>
 80020ca:	4603      	mov	r3, r0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e013      	b.n	80020f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d110      	bne.n	80020f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	b29a      	uxth	r2, r3
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f001 fccc 	bl	8003a86 <xTaskCreate>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d001      	beq.n	80020f8 <osThreadNew+0x13c>
          hTask = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020f8:	693b      	ldr	r3, [r7, #16]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3730      	adds	r7, #48	; 0x30
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000630c 	.word	0x2000630c

08002108 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002110:	f3ef 8305 	mrs	r3, IPSR
 8002114:	613b      	str	r3, [r7, #16]
  return(result);
 8002116:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10f      	bne.n	800213c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211c:	f3ef 8310 	mrs	r3, PRIMASK
 8002120:	60fb      	str	r3, [r7, #12]
  return(result);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002128:	f3ef 8311 	mrs	r3, BASEPRI
 800212c:	60bb      	str	r3, [r7, #8]
  return(result);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <osDelay+0x3c>
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <osDelay+0x58>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d103      	bne.n	8002144 <osDelay+0x3c>
    stat = osErrorISR;
 800213c:	f06f 0305 	mvn.w	r3, #5
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e007      	b.n	8002154 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <osDelay+0x4c>
      vTaskDelay(ticks);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f001 fde0 	bl	8003d14 <vTaskDelay>
    }
  }

  return (stat);
 8002154:	697b      	ldr	r3, [r7, #20]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	2000630c 	.word	0x2000630c

08002164 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f003 f857 	bl	8005220 <pvTimerGetTimerID>
 8002172:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <TimerCallback+0x22>
    callb->func (callb->arg);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	6852      	ldr	r2, [r2, #4]
 8002182:	4610      	mov	r0, r2
 8002184:	4798      	blx	r3
  }
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	460b      	mov	r3, r1
 800219e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021a4:	f3ef 8305 	mrs	r3, IPSR
 80021a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80021aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d16a      	bne.n	8002286 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b0:	f3ef 8310 	mrs	r3, PRIMASK
 80021b4:	617b      	str	r3, [r7, #20]
  return(result);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021bc:	f3ef 8311 	mrs	r3, BASEPRI
 80021c0:	613b      	str	r3, [r7, #16]
  return(result);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <osTimerNew+0x40>
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <osTimerNew+0x100>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d05a      	beq.n	8002286 <osTimerNew+0xf6>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d057      	beq.n	8002286 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80021d6:	2008      	movs	r0, #8
 80021d8:	f003 fa7c 	bl	80056d4 <pvPortMalloc>
 80021dc:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d050      	beq.n	8002286 <osTimerNew+0xf6>
      callb->func = func;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <osTimerNew+0x6c>
        reload = pdFALSE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e001      	b.n	8002200 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	623b      	str	r3, [r7, #32]
      name = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01c      	beq.n	800224a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <osTimerNew+0x8e>
          name = attr->name;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <osTimerNew+0xa4>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b2b      	cmp	r3, #43	; 0x2b
 800222c:	d902      	bls.n	8002234 <osTimerNew+0xa4>
          mem = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	623b      	str	r3, [r7, #32]
 8002232:	e00c      	b.n	800224e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d108      	bne.n	800224e <osTimerNew+0xbe>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <osTimerNew+0xbe>
            mem = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	e001      	b.n	800224e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10c      	bne.n	800226e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <osTimerNew+0x104>)
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002262:	2101      	movs	r1, #1
 8002264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002266:	f002 fc4a 	bl	8004afe <xTimerCreateStatic>
 800226a:	62b8      	str	r0, [r7, #40]	; 0x28
 800226c:	e00b      	b.n	8002286 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <osTimerNew+0x104>)
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	2101      	movs	r1, #1
 800227e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002280:	f002 fc1c 	bl	8004abc <xTimerCreate>
 8002284:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002288:	4618      	mov	r0, r3
 800228a:	3730      	adds	r7, #48	; 0x30
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2000630c 	.word	0x2000630c
 8002294:	08002165 	.word	0x08002165

08002298 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a6:	f3ef 8305 	mrs	r3, IPSR
 80022aa:	617b      	str	r3, [r7, #20]
  return(result);
 80022ac:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b2:	f3ef 8310 	mrs	r3, PRIMASK
 80022b6:	613b      	str	r3, [r7, #16]
  return(result);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022be:	f3ef 8311 	mrs	r3, BASEPRI
 80022c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <osTimerStart+0x42>
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <osTimerStart+0x7c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d103      	bne.n	80022da <osTimerStart+0x42>
    stat = osErrorISR;
 80022d2:	f06f 0305 	mvn.w	r3, #5
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e017      	b.n	800230a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <osTimerStart+0x50>
    stat = osErrorParameter;
 80022e0:	f06f 0303 	mvn.w	r3, #3
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	e010      	b.n	800230a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2300      	movs	r3, #0
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	2104      	movs	r1, #4
 80022f2:	69b8      	ldr	r0, [r7, #24]
 80022f4:	f002 fc82 	bl	8004bfc <xTimerGenericCommand>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d102      	bne.n	8002304 <osTimerStart+0x6c>
      stat = osOK;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e002      	b.n	800230a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8002304:	f06f 0302 	mvn.w	r3, #2
 8002308:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800230a:	69fb      	ldr	r3, [r7, #28]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000630c 	.word	0x2000630c

08002318 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002324:	f3ef 8305 	mrs	r3, IPSR
 8002328:	613b      	str	r3, [r7, #16]
  return(result);
 800232a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 8085 	bne.w	800243c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002332:	f3ef 8310 	mrs	r3, PRIMASK
 8002336:	60fb      	str	r3, [r7, #12]
  return(result);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800233e:	f3ef 8311 	mrs	r3, BASEPRI
 8002342:	60bb      	str	r3, [r7, #8]
  return(result);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <osMutexNew+0x3a>
 800234a:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <osMutexNew+0x130>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d074      	beq.n	800243c <osMutexNew+0x124>
    if (attr != NULL) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	e001      	b.n	8002364 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <osMutexNew+0x5c>
      rmtx = 1U;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e001      	b.n	8002378 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d15c      	bne.n	800243c <osMutexNew+0x124>
      mem = -1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d015      	beq.n	80023ba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <osMutexNew+0x8c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b4f      	cmp	r3, #79	; 0x4f
 800239c:	d902      	bls.n	80023a4 <osMutexNew+0x8c>
          mem = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	e00c      	b.n	80023be <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d108      	bne.n	80023be <osMutexNew+0xa6>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <osMutexNew+0xa6>
            mem = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e001      	b.n	80023be <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d112      	bne.n	80023ea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	4619      	mov	r1, r3
 80023d0:	2004      	movs	r0, #4
 80023d2:	f000 fcc0 	bl	8002d56 <xQueueCreateMutexStatic>
 80023d6:	6278      	str	r0, [r7, #36]	; 0x24
 80023d8:	e016      	b.n	8002408 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4619      	mov	r1, r3
 80023e0:	2001      	movs	r0, #1
 80023e2:	f000 fcb8 	bl	8002d56 <xQueueCreateMutexStatic>
 80023e6:	6278      	str	r0, [r7, #36]	; 0x24
 80023e8:	e00e      	b.n	8002408 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80023f6:	2004      	movs	r0, #4
 80023f8:	f000 fc95 	bl	8002d26 <xQueueCreateMutex>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24
 80023fe:	e003      	b.n	8002408 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8002400:	2001      	movs	r0, #1
 8002402:	f000 fc90 	bl	8002d26 <xQueueCreateMutex>
 8002406:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00c      	beq.n	8002428 <osMutexNew+0x110>
        if (attr != NULL) {
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <osMutexNew+0x104>
          name = attr->name;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e001      	b.n	8002420 <osMutexNew+0x108>
        } else {
          name = NULL;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8002420:	6979      	ldr	r1, [r7, #20]
 8002422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002424:	f001 fa6e 	bl	8003904 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <osMutexNew+0x124>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800243e:	4618      	mov	r0, r3
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000630c 	.word	0x2000630c

0800244c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800246a:	f3ef 8305 	mrs	r3, IPSR
 800246e:	613b      	str	r3, [r7, #16]
  return(result);
 8002470:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002476:	f3ef 8310 	mrs	r3, PRIMASK
 800247a:	60fb      	str	r3, [r7, #12]
  return(result);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002482:	f3ef 8311 	mrs	r3, BASEPRI
 8002486:	60bb      	str	r3, [r7, #8]
  return(result);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <osMutexAcquire+0x52>
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <osMutexAcquire+0xb8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d103      	bne.n	800249e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8002496:	f06f 0305 	mvn.w	r3, #5
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	e02c      	b.n	80024f8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80024a4:	f06f 0303 	mvn.w	r3, #3
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e025      	b.n	80024f8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d011      	beq.n	80024d6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	69b8      	ldr	r0, [r7, #24]
 80024b6:	f000 fc9f 	bl	8002df8 <xQueueTakeMutexRecursive>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d01b      	beq.n	80024f8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80024c6:	f06f 0301 	mvn.w	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	e014      	b.n	80024f8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80024ce:	f06f 0302 	mvn.w	r3, #2
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	e010      	b.n	80024f8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	69b8      	ldr	r0, [r7, #24]
 80024da:	f000 ff51 	bl	8003380 <xQueueSemaphoreTake>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d009      	beq.n	80024f8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80024ea:	f06f 0301 	mvn.w	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	e002      	b.n	80024f8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80024f2:	f06f 0302 	mvn.w	r3, #2
 80024f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80024f8:	69fb      	ldr	r3, [r7, #28]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000630c 	.word	0x2000630c

08002508 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002524:	f3ef 8305 	mrs	r3, IPSR
 8002528:	613b      	str	r3, [r7, #16]
  return(result);
 800252a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10f      	bne.n	8002550 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002530:	f3ef 8310 	mrs	r3, PRIMASK
 8002534:	60fb      	str	r3, [r7, #12]
  return(result);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800253c:	f3ef 8311 	mrs	r3, BASEPRI
 8002540:	60bb      	str	r3, [r7, #8]
  return(result);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <osMutexRelease+0x50>
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <osMutexRelease+0x9c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d103      	bne.n	8002558 <osMutexRelease+0x50>
    stat = osErrorISR;
 8002550:	f06f 0305 	mvn.w	r3, #5
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e01f      	b.n	8002598 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800255e:	f06f 0303 	mvn.w	r3, #3
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	e018      	b.n	8002598 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800256c:	69b8      	ldr	r0, [r7, #24]
 800256e:	f000 fc0d 	bl	8002d8c <xQueueGiveMutexRecursive>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d00f      	beq.n	8002598 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002578:	f06f 0302 	mvn.w	r3, #2
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e00b      	b.n	8002598 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002580:	2300      	movs	r3, #0
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	69b8      	ldr	r0, [r7, #24]
 8002588:	f000 fc6e 	bl	8002e68 <xQueueGenericSend>
 800258c:	4603      	mov	r3, r0
 800258e:	2b01      	cmp	r3, #1
 8002590:	d002      	beq.n	8002598 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002592:	f06f 0302 	mvn.w	r3, #2
 8002596:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8002598:	69fb      	ldr	r3, [r7, #28]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000630c 	.word	0x2000630c

080025a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08c      	sub	sp, #48	; 0x30
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b8:	f3ef 8305 	mrs	r3, IPSR
 80025bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80025be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d16f      	bne.n	80026a4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c4:	f3ef 8310 	mrs	r3, PRIMASK
 80025c8:	617b      	str	r3, [r7, #20]
  return(result);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025d0:	f3ef 8311 	mrs	r3, BASEPRI
 80025d4:	613b      	str	r3, [r7, #16]
  return(result);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <osMessageQueueNew+0x3c>
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <osMessageQueueNew+0x108>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d05f      	beq.n	80026a4 <osMessageQueueNew+0xfc>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d05c      	beq.n	80026a4 <osMessageQueueNew+0xfc>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d059      	beq.n	80026a4 <osMessageQueueNew+0xfc>
    mem = -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
 80025f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d029      	beq.n	8002650 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <osMessageQueueNew+0x82>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b4f      	cmp	r3, #79	; 0x4f
 800260a:	d90e      	bls.n	800262a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	429a      	cmp	r2, r3
 8002622:	d302      	bcc.n	800262a <osMessageQueueNew+0x82>
        mem = 1;
 8002624:	2301      	movs	r3, #1
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	e014      	b.n	8002654 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d110      	bne.n	8002654 <osMessageQueueNew+0xac>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <osMessageQueueNew+0xac>
          mem = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
 800264e:	e001      	b.n	8002654 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d10b      	bne.n	8002672 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2100      	movs	r1, #0
 8002664:	9100      	str	r1, [sp, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa5b 	bl	8002b24 <xQueueGenericCreateStatic>
 800266e:	6278      	str	r0, [r7, #36]	; 0x24
 8002670:	e008      	b.n	8002684 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002678:	2200      	movs	r2, #0
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fad3 	bl	8002c28 <xQueueGenericCreate>
 8002682:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <osMessageQueueNew+0xf0>
        name = attr->name;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e001      	b.n	800269c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800269c:	69f9      	ldr	r1, [r7, #28]
 800269e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026a0:	f001 f930 	bl	8003904 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000630c 	.word	0x2000630c

080026b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026cc:	f3ef 8305 	mrs	r3, IPSR
 80026d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80026d2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10f      	bne.n	80026f8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d8:	f3ef 8310 	mrs	r3, PRIMASK
 80026dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026e4:	f3ef 8311 	mrs	r3, BASEPRI
 80026e8:	617b      	str	r3, [r7, #20]
  return(result);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d02c      	beq.n	800274a <osMessageQueuePut+0x96>
 80026f0:	4b28      	ldr	r3, [pc, #160]	; (8002794 <osMessageQueuePut+0xe0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d128      	bne.n	800274a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <osMessageQueuePut+0x56>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <osMessageQueuePut+0x56>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800270a:	f06f 0303 	mvn.w	r3, #3
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002710:	e039      	b.n	8002786 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002716:	f107 0210 	add.w	r2, r7, #16
 800271a:	2300      	movs	r3, #0
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	6a38      	ldr	r0, [r7, #32]
 8002720:	f000 fca8 	bl	8003074 <xQueueGenericSendFromISR>
 8002724:	4603      	mov	r3, r0
 8002726:	2b01      	cmp	r3, #1
 8002728:	d003      	beq.n	8002732 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800272a:	f06f 0302 	mvn.w	r3, #2
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002730:	e029      	b.n	8002786 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d026      	beq.n	8002786 <osMessageQueuePut+0xd2>
 8002738:	4b17      	ldr	r3, [pc, #92]	; (8002798 <osMessageQueuePut+0xe4>)
 800273a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002748:	e01d      	b.n	8002786 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <osMessageQueuePut+0xa2>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002756:	f06f 0303 	mvn.w	r3, #3
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	e014      	b.n	8002788 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800275e:	2300      	movs	r3, #0
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	6a38      	ldr	r0, [r7, #32]
 8002766:	f000 fb7f 	bl	8002e68 <xQueueGenericSend>
 800276a:	4603      	mov	r3, r0
 800276c:	2b01      	cmp	r3, #1
 800276e:	d00b      	beq.n	8002788 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002776:	f06f 0301 	mvn.w	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
 800277c:	e004      	b.n	8002788 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800277e:	f06f 0302 	mvn.w	r3, #2
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	e000      	b.n	8002788 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002786:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800278a:	4618      	mov	r0, r3
 800278c:	3728      	adds	r7, #40	; 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2000630c 	.word	0x2000630c
 8002798:	e000ed04 	.word	0xe000ed04

0800279c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b2:	f3ef 8305 	mrs	r3, IPSR
 80027b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80027b8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027be:	f3ef 8310 	mrs	r3, PRIMASK
 80027c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d105      	bne.n	80027d6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027ca:	f3ef 8311 	mrs	r3, BASEPRI
 80027ce:	617b      	str	r3, [r7, #20]
  return(result);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d02c      	beq.n	8002830 <osMessageQueueGet+0x94>
 80027d6:	4b28      	ldr	r3, [pc, #160]	; (8002878 <osMessageQueueGet+0xdc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d128      	bne.n	8002830 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <osMessageQueueGet+0x54>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <osMessageQueueGet+0x54>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80027f0:	f06f 0303 	mvn.w	r3, #3
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027f6:	e038      	b.n	800286a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	461a      	mov	r2, r3
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	6a38      	ldr	r0, [r7, #32]
 8002806:	f000 fecf 	bl	80035a8 <xQueueReceiveFromISR>
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d003      	beq.n	8002818 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002810:	f06f 0302 	mvn.w	r3, #2
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002816:	e028      	b.n	800286a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d025      	beq.n	800286a <osMessageQueueGet+0xce>
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <osMessageQueueGet+0xe0>)
 8002820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800282e:	e01c      	b.n	800286a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <osMessageQueueGet+0xa0>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800283c:	f06f 0303 	mvn.w	r3, #3
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e013      	b.n	800286c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	6a38      	ldr	r0, [r7, #32]
 800284a:	f000 fcb3 	bl	80031b4 <xQueueReceive>
 800284e:	4603      	mov	r3, r0
 8002850:	2b01      	cmp	r3, #1
 8002852:	d00b      	beq.n	800286c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800285a:	f06f 0301 	mvn.w	r3, #1
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
 8002860:	e004      	b.n	800286c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002862:	f06f 0302 	mvn.w	r3, #2
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	e000      	b.n	800286c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800286a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800286e:	4618      	mov	r0, r3
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000630c 	.word	0x2000630c
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <vApplicationGetIdleTaskMemory+0x2c>)
 8002890:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <vApplicationGetIdleTaskMemory+0x30>)
 8002896:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	601a      	str	r2, [r3, #0]
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20006310 	.word	0x20006310
 80028b0:	2000636c 	.word	0x2000636c

080028b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80028c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <vApplicationGetTimerTaskMemory+0x30>)
 80028ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	2000656c 	.word	0x2000656c
 80028e4:	200065c8 	.word	0x200065c8

080028e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f103 0208 	add.w	r2, r3, #8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f103 0208 	add.w	r2, r3, #8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f103 0208 	add.w	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002942:	b480      	push	{r7}
 8002944:	b085      	sub	sp, #20
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d103      	bne.n	80029aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e00c      	b.n	80029c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3308      	adds	r3, #8
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e002      	b.n	80029b8 <vListInsert+0x2e>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d2f6      	bcs.n	80029b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	601a      	str	r2, [r3, #0]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6852      	ldr	r2, [r2, #4]
 8002a1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d103      	bne.n	8002a30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1e5a      	subs	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10c      	bne.n	8002a7e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	b672      	cpsid	i
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	b662      	cpsie	i
 8002a78:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8002a7e:	f002 fcfd 	bl	800547c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	68f9      	ldr	r1, [r7, #12]
 8002a8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	441a      	add	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	441a      	add	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d114      	bne.n	8002afe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01a      	beq.n	8002b12 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3310      	adds	r3, #16
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 fbe5 	bl	80042b0 <xTaskRemoveFromEventList>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <xQueueGenericReset+0xd0>)
 8002aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	e009      	b.n	8002b12 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3310      	adds	r3, #16
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fef0 	bl	80028e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3324      	adds	r3, #36	; 0x24
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff feeb 	bl	80028e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b12:	f002 fce7 	bl	80054e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	e000ed04 	.word	0xe000ed04

08002b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10c      	bne.n	8002b52 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	b672      	cpsid	i
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	b662      	cpsie	i
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10c      	bne.n	8002b72 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	b672      	cpsid	i
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	b662      	cpsie	i
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <xQueueGenericCreateStatic+0x5a>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <xQueueGenericCreateStatic+0x5e>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueGenericCreateStatic+0x60>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10c      	bne.n	8002ba2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	b672      	cpsid	i
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	b662      	cpsie	i
 8002b9c:	623b      	str	r3, [r7, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <xQueueGenericCreateStatic+0x8a>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <xQueueGenericCreateStatic+0x8e>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <xQueueGenericCreateStatic+0x90>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10c      	bne.n	8002bd2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	b672      	cpsid	i
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	b662      	cpsie	i
 8002bcc:	61fb      	str	r3, [r7, #28]
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bd2:	2350      	movs	r3, #80	; 0x50
 8002bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b50      	cmp	r3, #80	; 0x50
 8002bda:	d00c      	beq.n	8002bf6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	b672      	cpsid	i
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	b662      	cpsie	i
 8002bf0:	61bb      	str	r3, [r7, #24]
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002bf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f847 	bl	8002cac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3730      	adds	r7, #48	; 0x30
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10c      	bne.n	8002c56 <xQueueGenericCreate+0x2e>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	b672      	cpsid	i
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	b662      	cpsie	i
 8002c50:	613b      	str	r3, [r7, #16]
}
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	e004      	b.n	8002c6c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	3350      	adds	r3, #80	; 0x50
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 fd2f 	bl	80056d4 <pvPortMalloc>
 8002c76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d011      	beq.n	8002ca2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3350      	adds	r3, #80	; 0x50
 8002c86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c90:	79fa      	ldrb	r2, [r7, #7]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f805 	bl	8002cac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e002      	b.n	8002cce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cda:	2101      	movs	r1, #1
 8002cdc:	69b8      	ldr	r0, [r7, #24]
 8002cde:	f7ff feb7 	bl	8002a50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002d12:	2300      	movs	r3, #0
 8002d14:	2200      	movs	r2, #0
 8002d16:	2100      	movs	r1, #0
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f8a5 	bl	8002e68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d30:	2301      	movs	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6939      	ldr	r1, [r7, #16]
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f7ff ff72 	bl	8002c28 <xQueueGenericCreate>
 8002d44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff ffd3 	bl	8002cf2 <prvInitialiseMutex>

		return xNewQueue;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
	}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b088      	sub	sp, #32
 8002d5a:	af02      	add	r7, sp, #8
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	6039      	str	r1, [r7, #0]
 8002d60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002d62:	2301      	movs	r3, #1
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2200      	movs	r2, #0
 8002d72:	6939      	ldr	r1, [r7, #16]
 8002d74:	6978      	ldr	r0, [r7, #20]
 8002d76:	f7ff fed5 	bl	8002b24 <xQueueGenericCreateStatic>
 8002d7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff ffb8 	bl	8002cf2 <prvInitialiseMutex>

		return xNewQueue;
 8002d82:	68fb      	ldr	r3, [r7, #12]
	}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	b672      	cpsid	i
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	b662      	cpsie	i
 8002db2:	60fb      	str	r3, [r7, #12]
}
 8002db4:	bf00      	nop
 8002db6:	e7fe      	b.n	8002db6 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	689c      	ldr	r4, [r3, #8]
 8002dbc:	f001 fc3e 	bl	800463c <xTaskGetCurrentTaskHandle>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	d111      	bne.n	8002dea <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2100      	movs	r1, #0
 8002dde:	6938      	ldr	r0, [r7, #16]
 8002de0:	f000 f842 	bl	8002e68 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002de4:	2301      	movs	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e001      	b.n	8002dee <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002dee:	697b      	ldr	r3, [r7, #20]
	}
 8002df0:	4618      	mov	r0, r3
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}

08002df8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10c      	bne.n	8002e26 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	b672      	cpsid	i
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	b662      	cpsie	i
 8002e20:	60fb      	str	r3, [r7, #12]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	689c      	ldr	r4, [r3, #8]
 8002e2a:	f001 fc07 	bl	800463c <xTaskGetCurrentTaskHandle>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	429c      	cmp	r4, r3
 8002e32:	d107      	bne.n	8002e44 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e00c      	b.n	8002e5e <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	6938      	ldr	r0, [r7, #16]
 8002e48:	f000 fa9a 	bl	8003380 <xQueueSemaphoreTake>
 8002e4c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002e5e:	697b      	ldr	r3, [r7, #20]
	}
 8002e60:	4618      	mov	r0, r3
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd90      	pop	{r4, r7, pc}

08002e68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	; 0x38
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e76:	2300      	movs	r3, #0
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10c      	bne.n	8002e9e <xQueueGenericSend+0x36>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	b672      	cpsid	i
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	b662      	cpsie	i
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <xQueueGenericSend+0x44>
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <xQueueGenericSend+0x48>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <xQueueGenericSend+0x4a>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <xQueueGenericSend+0x68>
	__asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	b672      	cpsid	i
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	b662      	cpsie	i
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ecc:	bf00      	nop
 8002ece:	e7fe      	b.n	8002ece <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d103      	bne.n	8002ede <xQueueGenericSend+0x76>
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <xQueueGenericSend+0x7a>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <xQueueGenericSend+0x7c>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10c      	bne.n	8002f02 <xQueueGenericSend+0x9a>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	b672      	cpsid	i
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	b662      	cpsie	i
 8002efc:	623b      	str	r3, [r7, #32]
}
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f02:	f001 fbab 	bl	800465c <xTaskGetSchedulerState>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <xQueueGenericSend+0xaa>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <xQueueGenericSend+0xae>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <xQueueGenericSend+0xb0>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10c      	bne.n	8002f36 <xQueueGenericSend+0xce>
	__asm volatile
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	b672      	cpsid	i
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	b662      	cpsie	i
 8002f30:	61fb      	str	r3, [r7, #28]
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f36:	f002 faa1 	bl	800547c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <xQueueGenericSend+0xe4>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d129      	bne.n	8002fa0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f52:	f000 fbc7 	bl	80036e4 <prvCopyDataToQueue>
 8002f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f001 f9a3 	bl	80042b0 <xTaskRemoveFromEventList>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <xQueueGenericSend+0x208>)
 8002f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	e00a      	b.n	8002f98 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <xQueueGenericSend+0x208>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f98:	f002 faa4 	bl	80054e4 <vPortExitCritical>
				return pdPASS;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e063      	b.n	8003068 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fa6:	f002 fa9d 	bl	80054e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e05c      	b.n	8003068 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 f9df 	bl	800437c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fc2:	f002 fa8f 	bl	80054e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fc6:	f000 ff45 	bl	8003e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fca:	f002 fa57 	bl	800547c <vPortEnterCritical>
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd4:	b25b      	sxtb	r3, r3
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d103      	bne.n	8002fe4 <xQueueGenericSend+0x17c>
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fea:	b25b      	sxtb	r3, r3
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d103      	bne.n	8002ffa <xQueueGenericSend+0x192>
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ffa:	f002 fa73 	bl	80054e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ffe:	1d3a      	adds	r2, r7, #4
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f001 f9ce 	bl	80043a8 <xTaskCheckForTimeOut>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d124      	bne.n	800305c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003014:	f000 fc5e 	bl	80038d4 <prvIsQueueFull>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	3310      	adds	r3, #16
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f001 f8ee 	bl	8004208 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800302c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800302e:	f000 fbe9 	bl	8003804 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003032:	f000 ff1d 	bl	8003e70 <xTaskResumeAll>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f af7c 	bne.w	8002f36 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <xQueueGenericSend+0x208>)
 8003040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	e772      	b.n	8002f36 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003052:	f000 fbd7 	bl	8003804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003056:	f000 ff0b 	bl	8003e70 <xTaskResumeAll>
 800305a:	e76c      	b.n	8002f36 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800305c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305e:	f000 fbd1 	bl	8003804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003062:	f000 ff05 	bl	8003e70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003068:	4618      	mov	r0, r3
 800306a:	3738      	adds	r7, #56	; 0x38
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08e      	sub	sp, #56	; 0x38
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10c      	bne.n	80030a6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	b672      	cpsid	i
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	b662      	cpsie	i
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <xQueueGenericSendFromISR+0x40>
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <xQueueGenericSendFromISR+0x44>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <xQueueGenericSendFromISR+0x46>
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	b672      	cpsid	i
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	b662      	cpsie	i
 80030d2:	623b      	str	r3, [r7, #32]
}
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d103      	bne.n	80030e6 <xQueueGenericSendFromISR+0x72>
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <xQueueGenericSendFromISR+0x76>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <xQueueGenericSendFromISR+0x78>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10c      	bne.n	800310a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	b672      	cpsid	i
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	b662      	cpsie	i
 8003104:	61fb      	str	r3, [r7, #28]
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800310a:	f002 fa9f 	bl	800564c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800310e:	f3ef 8211 	mrs	r2, BASEPRI
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	b672      	cpsid	i
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	b662      	cpsie	i
 8003126:	61ba      	str	r2, [r7, #24]
 8003128:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800312a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <xQueueGenericSendFromISR+0xcc>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d12c      	bne.n	800319a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003150:	f000 fac8 	bl	80036e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003154:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d112      	bne.n	8003184 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	3324      	adds	r3, #36	; 0x24
 800316a:	4618      	mov	r0, r3
 800316c:	f001 f8a0 	bl	80042b0 <xTaskRemoveFromEventList>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e007      	b.n	8003194 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003184:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003188:	3301      	adds	r3, #1
 800318a:	b2db      	uxtb	r3, r3
 800318c:	b25a      	sxtb	r2, r3
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003194:	2301      	movs	r3, #1
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003198:	e001      	b.n	800319e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800319a:	2300      	movs	r3, #0
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3738      	adds	r7, #56	; 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <xQueueReceive+0x34>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	b672      	cpsid	i
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	b662      	cpsie	i
 80031e2:	623b      	str	r3, [r7, #32]
}
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <xQueueReceive+0x42>
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <xQueueReceive+0x46>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <xQueueReceive+0x48>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10c      	bne.n	800321a <xQueueReceive+0x66>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	b672      	cpsid	i
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	b662      	cpsie	i
 8003214:	61fb      	str	r3, [r7, #28]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800321a:	f001 fa1f 	bl	800465c <xTaskGetSchedulerState>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <xQueueReceive+0x76>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <xQueueReceive+0x7a>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueReceive+0x7c>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10c      	bne.n	800324e <xQueueReceive+0x9a>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	b672      	cpsid	i
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	b662      	cpsie	i
 8003248:	61bb      	str	r3, [r7, #24]
}
 800324a:	bf00      	nop
 800324c:	e7fe      	b.n	800324c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800324e:	f002 f915 	bl	800547c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01f      	beq.n	800329e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003262:	f000 faa9 	bl	80037b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00f      	beq.n	8003296 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	3310      	adds	r3, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f001 f818 	bl	80042b0 <xTaskRemoveFromEventList>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003286:	4b3d      	ldr	r3, [pc, #244]	; (800337c <xQueueReceive+0x1c8>)
 8003288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003296:	f002 f925 	bl	80054e4 <vPortExitCritical>
				return pdPASS;
 800329a:	2301      	movs	r3, #1
 800329c:	e069      	b.n	8003372 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d103      	bne.n	80032ac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032a4:	f002 f91e 	bl	80054e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e062      	b.n	8003372 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032b2:	f107 0310 	add.w	r3, r7, #16
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 f860 	bl	800437c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032bc:	2301      	movs	r3, #1
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032c0:	f002 f910 	bl	80054e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032c4:	f000 fdc6 	bl	8003e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032c8:	f002 f8d8 	bl	800547c <vPortEnterCritical>
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d2:	b25b      	sxtb	r3, r3
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d103      	bne.n	80032e2 <xQueueReceive+0x12e>
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e8:	b25b      	sxtb	r3, r3
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d103      	bne.n	80032f8 <xQueueReceive+0x144>
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f8:	f002 f8f4 	bl	80054e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032fc:	1d3a      	adds	r2, r7, #4
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f001 f84f 	bl	80043a8 <xTaskCheckForTimeOut>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d123      	bne.n	8003358 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003312:	f000 fac9 	bl	80038a8 <prvIsQueueEmpty>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d017      	beq.n	800334c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	3324      	adds	r3, #36	; 0x24
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 ff6f 	bl	8004208 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800332a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332c:	f000 fa6a 	bl	8003804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003330:	f000 fd9e 	bl	8003e70 <xTaskResumeAll>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d189      	bne.n	800324e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <xQueueReceive+0x1c8>)
 800333c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	e780      	b.n	800324e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800334c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800334e:	f000 fa59 	bl	8003804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003352:	f000 fd8d 	bl	8003e70 <xTaskResumeAll>
 8003356:	e77a      	b.n	800324e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800335a:	f000 fa53 	bl	8003804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800335e:	f000 fd87 	bl	8003e70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003364:	f000 faa0 	bl	80038a8 <prvIsQueueEmpty>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	f43f af6f 	beq.w	800324e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003372:	4618      	mov	r0, r3
 8003374:	3730      	adds	r7, #48	; 0x30
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08e      	sub	sp, #56	; 0x38
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003392:	2300      	movs	r3, #0
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10c      	bne.n	80033b6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	b672      	cpsid	i
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	b662      	cpsie	i
 80033b0:	623b      	str	r3, [r7, #32]
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	b672      	cpsid	i
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	b662      	cpsie	i
 80033d2:	61fb      	str	r3, [r7, #28]
}
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d8:	f001 f940 	bl	800465c <xTaskGetSchedulerState>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <xQueueSemaphoreTake+0x68>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <xQueueSemaphoreTake+0x6c>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <xQueueSemaphoreTake+0x6e>
 80033ec:	2300      	movs	r3, #0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	b672      	cpsid	i
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	b662      	cpsie	i
 8003406:	61bb      	str	r3, [r7, #24]
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800340c:	f002 f836 	bl	800547c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d024      	beq.n	8003466 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	1e5a      	subs	r2, r3, #1
 8003420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003422:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800342c:	f001 fa94 	bl	8004958 <pvTaskIncrementMutexHeldCount>
 8003430:	4602      	mov	r2, r0
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00f      	beq.n	800345e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	3310      	adds	r3, #16
 8003442:	4618      	mov	r0, r3
 8003444:	f000 ff34 	bl	80042b0 <xTaskRemoveFromEventList>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800344e:	4b55      	ldr	r3, [pc, #340]	; (80035a4 <xQueueSemaphoreTake+0x224>)
 8003450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800345e:	f002 f841 	bl	80054e4 <vPortExitCritical>
				return pdPASS;
 8003462:	2301      	movs	r3, #1
 8003464:	e099      	b.n	800359a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d113      	bne.n	8003494 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	b672      	cpsid	i
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	b662      	cpsie	i
 8003486:	617b      	str	r3, [r7, #20]
}
 8003488:	bf00      	nop
 800348a:	e7fe      	b.n	800348a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800348c:	f002 f82a 	bl	80054e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003490:	2300      	movs	r3, #0
 8003492:	e082      	b.n	800359a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 ff6c 	bl	800437c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034a8:	f002 f81c 	bl	80054e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034ac:	f000 fcd2 	bl	8003e54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034b0:	f001 ffe4 	bl	800547c <vPortEnterCritical>
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ba:	b25b      	sxtb	r3, r3
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d103      	bne.n	80034ca <xQueueSemaphoreTake+0x14a>
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d0:	b25b      	sxtb	r3, r3
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	d103      	bne.n	80034e0 <xQueueSemaphoreTake+0x160>
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034e0:	f002 f800 	bl	80054e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034e4:	463a      	mov	r2, r7
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 ff5b 	bl	80043a8 <xTaskCheckForTimeOut>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d132      	bne.n	800355e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034fa:	f000 f9d5 	bl	80038a8 <prvIsQueueEmpty>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d026      	beq.n	8003552 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800350c:	f001 ffb6 	bl	800547c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f001 f8bf 	bl	8004698 <xTaskPriorityInherit>
 800351a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800351c:	f001 ffe2 	bl	80054e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	3324      	adds	r3, #36	; 0x24
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fe6d 	bl	8004208 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800352e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003530:	f000 f968 	bl	8003804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003534:	f000 fc9c 	bl	8003e70 <xTaskResumeAll>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	f47f af66 	bne.w	800340c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <xQueueSemaphoreTake+0x224>)
 8003542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	e75c      	b.n	800340c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003554:	f000 f956 	bl	8003804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003558:	f000 fc8a 	bl	8003e70 <xTaskResumeAll>
 800355c:	e756      	b.n	800340c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800355e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003560:	f000 f950 	bl	8003804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003564:	f000 fc84 	bl	8003e70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800356a:	f000 f99d 	bl	80038a8 <prvIsQueueEmpty>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	f43f af4b 	beq.w	800340c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800357c:	f001 ff7e 	bl	800547c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003582:	f000 f897 	bl	80036b4 <prvGetDisinheritPriorityAfterTimeout>
 8003586:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800358e:	4618      	mov	r0, r3
 8003590:	f001 f95c 	bl	800484c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003594:	f001 ffa6 	bl	80054e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800359a:	4618      	mov	r0, r3
 800359c:	3738      	adds	r7, #56	; 0x38
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	e000ed04 	.word	0xe000ed04

080035a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08e      	sub	sp, #56	; 0x38
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	b672      	cpsid	i
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	b662      	cpsie	i
 80035d2:	623b      	str	r3, [r7, #32]
}
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <xQueueReceiveFromISR+0x3e>
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <xQueueReceiveFromISR+0x42>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <xQueueReceiveFromISR+0x44>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10c      	bne.n	800360a <xQueueReceiveFromISR+0x62>
	__asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	b672      	cpsid	i
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	b662      	cpsie	i
 8003604:	61fb      	str	r3, [r7, #28]
}
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800360a:	f002 f81f 	bl	800564c <vPortValidateInterruptPriority>
	__asm volatile
 800360e:	f3ef 8211 	mrs	r2, BASEPRI
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	b672      	cpsid	i
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	b662      	cpsie	i
 8003626:	61ba      	str	r2, [r7, #24]
 8003628:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800362a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02f      	beq.n	800369a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003648:	f000 f8b6 	bl	80037b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003654:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d112      	bne.n	8003684 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	3310      	adds	r3, #16
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fe20 	bl	80042b0 <xTaskRemoveFromEventList>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e007      	b.n	8003694 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003688:	3301      	adds	r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	b25a      	sxtb	r2, r3
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003694:	2301      	movs	r3, #1
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
 8003698:	e001      	b.n	800369e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800369a:	2300      	movs	r3, #0
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f383 8811 	msr	BASEPRI, r3
}
 80036a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3738      	adds	r7, #56	; 0x38
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e001      	b.n	80036d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036d6:	68fb      	ldr	r3, [r7, #12]
	}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d14d      	bne.n	80037a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f82a 	bl	8004768 <xTaskPriorityDisinherit>
 8003714:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	e043      	b.n	80037a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d119      	bne.n	8003758 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6858      	ldr	r0, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	461a      	mov	r2, r3
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	f002 fc62 	bl	8005ff8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	441a      	add	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	d32b      	bcc.n	80037a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e026      	b.n	80037a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68d8      	ldr	r0, [r3, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	f002 fc48 	bl	8005ff8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	425b      	negs	r3, r3
 8003772:	441a      	add	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d207      	bcs.n	8003794 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	425b      	negs	r3, r3
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d105      	bne.n	80037a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037ae:	697b      	ldr	r3, [r7, #20]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	441a      	add	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d303      	bcc.n	80037ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68d9      	ldr	r1, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	461a      	mov	r2, r3
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f002 fbfe 	bl	8005ff8 <memcpy>
	}
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800380c:	f001 fe36 	bl	800547c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003816:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003818:	e011      	b.n	800383e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3324      	adds	r3, #36	; 0x24
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fd42 	bl	80042b0 <xTaskRemoveFromEventList>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003832:	f000 fe1f 	bl	8004474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	3b01      	subs	r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	dce9      	bgt.n	800381a <prvUnlockQueue+0x16>
 8003846:	e000      	b.n	800384a <prvUnlockQueue+0x46>
					break;
 8003848:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	22ff      	movs	r2, #255	; 0xff
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003852:	f001 fe47 	bl	80054e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003856:	f001 fe11 	bl	800547c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003860:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003862:	e011      	b.n	8003888 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3310      	adds	r3, #16
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fd1d 	bl	80042b0 <xTaskRemoveFromEventList>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800387c:	f000 fdfa 	bl	8004474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	3b01      	subs	r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800388c:	2b00      	cmp	r3, #0
 800388e:	dce9      	bgt.n	8003864 <prvUnlockQueue+0x60>
 8003890:	e000      	b.n	8003894 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003892:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	22ff      	movs	r2, #255	; 0xff
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800389c:	f001 fe22 	bl	80054e4 <vPortExitCritical>
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b0:	f001 fde4 	bl	800547c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e001      	b.n	80038c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038c6:	f001 fe0d 	bl	80054e4 <vPortExitCritical>

	return xReturn;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038dc:	f001 fdce 	bl	800547c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d102      	bne.n	80038f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e001      	b.n	80038f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038f6:	f001 fdf5 	bl	80054e4 <vPortExitCritical>

	return xReturn;
 80038fa:	68fb      	ldr	r3, [r7, #12]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e014      	b.n	800393e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003914:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <vQueueAddToRegistry+0x50>)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003920:	490c      	ldr	r1, [pc, #48]	; (8003954 <vQueueAddToRegistry+0x50>)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <vQueueAddToRegistry+0x50>)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003936:	e006      	b.n	8003946 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3301      	adds	r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b07      	cmp	r3, #7
 8003942:	d9e7      	bls.n	8003914 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	200069c8 	.word	0x200069c8

08003958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003968:	f001 fd88 	bl	800547c <vPortEnterCritical>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003972:	b25b      	sxtb	r3, r3
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d103      	bne.n	8003982 <vQueueWaitForMessageRestricted+0x2a>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003988:	b25b      	sxtb	r3, r3
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d103      	bne.n	8003998 <vQueueWaitForMessageRestricted+0x40>
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003998:	f001 fda4 	bl	80054e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3324      	adds	r3, #36	; 0x24
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fc51 	bl	8004254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f7ff ff26 	bl	8003804 <prvUnlockQueue>
	}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08e      	sub	sp, #56	; 0x38
 80039c4:	af04      	add	r7, sp, #16
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10c      	bne.n	80039ee <xTaskCreateStatic+0x2e>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	b672      	cpsid	i
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	b662      	cpsie	i
 80039e8:	623b      	str	r3, [r7, #32]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10c      	bne.n	8003a0e <xTaskCreateStatic+0x4e>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	b672      	cpsid	i
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	b662      	cpsie	i
 8003a08:	61fb      	str	r3, [r7, #28]
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a0e:	235c      	movs	r3, #92	; 0x5c
 8003a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b5c      	cmp	r3, #92	; 0x5c
 8003a16:	d00c      	beq.n	8003a32 <xTaskCreateStatic+0x72>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	b672      	cpsid	i
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	b662      	cpsie	i
 8003a2c:	61bb      	str	r3, [r7, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	e7fe      	b.n	8003a30 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01e      	beq.n	8003a78 <xTaskCreateStatic+0xb8>
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a52:	2300      	movs	r3, #0
 8003a54:	9303      	str	r3, [sp, #12]
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	9302      	str	r3, [sp, #8]
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f850 	bl	8003b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a72:	f000 f8df 	bl	8003c34 <prvAddNewTaskToReadyList>
 8003a76:	e001      	b.n	8003a7c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a7c:	697b      	ldr	r3, [r7, #20]
	}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3728      	adds	r7, #40	; 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08c      	sub	sp, #48	; 0x30
 8003a8a:	af04      	add	r7, sp, #16
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 fe1a 	bl	80056d4 <pvPortMalloc>
 8003aa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aa8:	205c      	movs	r0, #92	; 0x5c
 8003aaa:	f001 fe13 	bl	80056d4 <pvPortMalloc>
 8003aae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
 8003abc:	e005      	b.n	8003aca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003abe:	6978      	ldr	r0, [r7, #20]
 8003ac0:	f001 fed2 	bl	8005868 <vPortFree>
 8003ac4:	e001      	b.n	8003aca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d017      	beq.n	8003b00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	9302      	str	r3, [sp, #8]
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f80e 	bl	8003b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af4:	69f8      	ldr	r0, [r7, #28]
 8003af6:	f000 f89d 	bl	8003c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e002      	b.n	8003b06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b06:	69bb      	ldr	r3, [r7, #24]
	}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	461a      	mov	r2, r3
 8003b28:	21a5      	movs	r1, #165	; 0xa5
 8003b2a:	f002 f9eb 	bl	8005f04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003b38:	440b      	add	r3, r1
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f023 0307 	bic.w	r3, r3, #7
 8003b46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00c      	beq.n	8003b6c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	b672      	cpsid	i
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	b662      	cpsie	i
 8003b66:	617b      	str	r3, [r7, #20]
}
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01f      	beq.n	8003bb2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e012      	b.n	8003b9e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	7819      	ldrb	r1, [r3, #0]
 8003b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	3334      	adds	r3, #52	; 0x34
 8003b88:	460a      	mov	r2, r1
 8003b8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b0f      	cmp	r3, #15
 8003ba2:	d9e9      	bls.n	8003b78 <prvInitialiseNewTask+0x68>
 8003ba4:	e000      	b.n	8003ba8 <prvInitialiseNewTask+0x98>
			{
				break;
 8003ba6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb0:	e003      	b.n	8003bba <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	2b37      	cmp	r3, #55	; 0x37
 8003bbe:	d901      	bls.n	8003bc4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bc0:	2337      	movs	r3, #55	; 0x37
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fea4 	bl	8002928 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	3318      	adds	r3, #24
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fe9f 	bl	8002928 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	2200      	movs	r2, #0
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	68f9      	ldr	r1, [r7, #12]
 8003c12:	69b8      	ldr	r0, [r7, #24]
 8003c14:	f001 fb26 	bl	8005264 <pxPortInitialiseStack>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c3c:	f001 fc1e 	bl	800547c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c40:	4b2d      	ldr	r3, [pc, #180]	; (8003cf8 <prvAddNewTaskToReadyList+0xc4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <prvAddNewTaskToReadyList+0xc4>)
 8003c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c52:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <prvAddNewTaskToReadyList+0xc4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d110      	bne.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c60:	f000 fc2c 	bl	80044bc <prvInitialiseTaskLists>
 8003c64:	e00d      	b.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c66:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <prvAddNewTaskToReadyList+0xcc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d802      	bhi.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <prvAddNewTaskToReadyList+0xd0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <prvAddNewTaskToReadyList+0xd0>)
 8003c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <prvAddNewTaskToReadyList+0xd0>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <prvAddNewTaskToReadyList+0xd4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d903      	bls.n	8003ca8 <prvAddNewTaskToReadyList+0x74>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <prvAddNewTaskToReadyList+0xd4>)
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <prvAddNewTaskToReadyList+0xd8>)
 8003cb6:	441a      	add	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7fe fe3f 	bl	8002942 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cc4:	f001 fc0e 	bl	80054e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <prvAddNewTaskToReadyList+0xcc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00e      	beq.n	8003cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d207      	bcs.n	8003cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <prvAddNewTaskToReadyList+0xdc>)
 8003ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20006edc 	.word	0x20006edc
 8003cfc:	20006a08 	.word	0x20006a08
 8003d00:	20006ee8 	.word	0x20006ee8
 8003d04:	20006ef8 	.word	0x20006ef8
 8003d08:	20006ee4 	.word	0x20006ee4
 8003d0c:	20006a0c 	.word	0x20006a0c
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d019      	beq.n	8003d5a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <vTaskDelay+0x64>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00c      	beq.n	8003d48 <vTaskDelay+0x34>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	b672      	cpsid	i
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	b662      	cpsie	i
 8003d42:	60bb      	str	r3, [r7, #8]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003d48:	f000 f884 	bl	8003e54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fe16 	bl	8004980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d54:	f000 f88c 	bl	8003e70 <xTaskResumeAll>
 8003d58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d107      	bne.n	8003d70 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <vTaskDelay+0x68>)
 8003d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20006f04 	.word	0x20006f04
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d8e:	463a      	mov	r2, r7
 8003d90:	1d39      	adds	r1, r7, #4
 8003d92:	f107 0308 	add.w	r3, r7, #8
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fd72 	bl	8002880 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	9202      	str	r2, [sp, #8]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	2300      	movs	r3, #0
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2300      	movs	r3, #0
 8003dac:	460a      	mov	r2, r1
 8003dae:	4923      	ldr	r1, [pc, #140]	; (8003e3c <vTaskStartScheduler+0xbc>)
 8003db0:	4823      	ldr	r0, [pc, #140]	; (8003e40 <vTaskStartScheduler+0xc0>)
 8003db2:	f7ff fe05 	bl	80039c0 <xTaskCreateStatic>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4a22      	ldr	r2, [pc, #136]	; (8003e44 <vTaskStartScheduler+0xc4>)
 8003dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <vTaskStartScheduler+0xc4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e001      	b.n	8003dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d102      	bne.n	8003dda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003dd4:	f000 fe28 	bl	8004a28 <xTimerCreateTimerTask>
 8003dd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d118      	bne.n	8003e12 <vTaskStartScheduler+0x92>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	b672      	cpsid	i
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	b662      	cpsie	i
 8003df4:	613b      	str	r3, [r7, #16]
}
 8003df6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003df8:	4b13      	ldr	r3, [pc, #76]	; (8003e48 <vTaskStartScheduler+0xc8>)
 8003dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e00:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <vTaskStartScheduler+0xcc>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <vTaskStartScheduler+0xd0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e0c:	f001 fab8 	bl	8005380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e10:	e010      	b.n	8003e34 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d10c      	bne.n	8003e34 <vTaskStartScheduler+0xb4>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	b672      	cpsid	i
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	b662      	cpsie	i
 8003e2e:	60fb      	str	r3, [r7, #12]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <vTaskStartScheduler+0xb2>
}
 8003e34:	bf00      	nop
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	08006d28 	.word	0x08006d28
 8003e40:	0800448d 	.word	0x0800448d
 8003e44:	20006f00 	.word	0x20006f00
 8003e48:	20006efc 	.word	0x20006efc
 8003e4c:	20006ee8 	.word	0x20006ee8
 8003e50:	20006ee0 	.word	0x20006ee0

08003e54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <vTaskSuspendAll+0x18>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	4a03      	ldr	r2, [pc, #12]	; (8003e6c <vTaskSuspendAll+0x18>)
 8003e60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	20006f04 	.word	0x20006f04

08003e70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e7e:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <xTaskResumeAll+0x11c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <xTaskResumeAll+0x30>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	b672      	cpsid	i
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	b662      	cpsie	i
 8003e9a:	603b      	str	r3, [r7, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ea0:	f001 faec 	bl	800547c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <xTaskResumeAll+0x11c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <xTaskResumeAll+0x11c>)
 8003eac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eae:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <xTaskResumeAll+0x11c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d162      	bne.n	8003f7c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eb6:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <xTaskResumeAll+0x120>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d05e      	beq.n	8003f7c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ebe:	e02f      	b.n	8003f20 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec0:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <xTaskResumeAll+0x124>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3318      	adds	r3, #24
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe fd95 	bl	80029fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fd90 	bl	80029fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <xTaskResumeAll+0x128>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d903      	bls.n	8003ef0 <xTaskResumeAll+0x80>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <xTaskResumeAll+0x128>)
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <xTaskResumeAll+0x12c>)
 8003efe:	441a      	add	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f7fe fd1b 	bl	8002942 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <xTaskResumeAll+0x130>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <xTaskResumeAll+0x134>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f20:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <xTaskResumeAll+0x124>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1cb      	bne.n	8003ec0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f2e:	f000 fb65 	bl	80045fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <xTaskResumeAll+0x138>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d010      	beq.n	8003f60 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f3e:	f000 f847 	bl	8003fd0 <xTaskIncrementTick>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <xTaskResumeAll+0x134>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f1      	bne.n	8003f3e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <xTaskResumeAll+0x138>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f60:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <xTaskResumeAll+0x134>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d009      	beq.n	8003f7c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <xTaskResumeAll+0x13c>)
 8003f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f7c:	f001 fab2 	bl	80054e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003f80:	68bb      	ldr	r3, [r7, #8]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20006f04 	.word	0x20006f04
 8003f90:	20006edc 	.word	0x20006edc
 8003f94:	20006e9c 	.word	0x20006e9c
 8003f98:	20006ee4 	.word	0x20006ee4
 8003f9c:	20006a0c 	.word	0x20006a0c
 8003fa0:	20006a08 	.word	0x20006a08
 8003fa4:	20006ef0 	.word	0x20006ef0
 8003fa8:	20006eec 	.word	0x20006eec
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <xTaskGetTickCount+0x1c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fbc:	687b      	ldr	r3, [r7, #4]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20006ee0 	.word	0x20006ee0

08003fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fda:	4b50      	ldr	r3, [pc, #320]	; (800411c <xTaskIncrementTick+0x14c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 808b 	bne.w	80040fa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fe4:	4b4e      	ldr	r3, [pc, #312]	; (8004120 <xTaskIncrementTick+0x150>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fec:	4a4c      	ldr	r2, [pc, #304]	; (8004120 <xTaskIncrementTick+0x150>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d122      	bne.n	800403e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ff8:	4b4a      	ldr	r3, [pc, #296]	; (8004124 <xTaskIncrementTick+0x154>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00c      	beq.n	800401c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	b672      	cpsid	i
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	b662      	cpsie	i
 8004016:	603b      	str	r3, [r7, #0]
}
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <xTaskIncrementTick+0x4a>
 800401c:	4b41      	ldr	r3, [pc, #260]	; (8004124 <xTaskIncrementTick+0x154>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4b41      	ldr	r3, [pc, #260]	; (8004128 <xTaskIncrementTick+0x158>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3f      	ldr	r2, [pc, #252]	; (8004124 <xTaskIncrementTick+0x154>)
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <xTaskIncrementTick+0x158>)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b3e      	ldr	r3, [pc, #248]	; (800412c <xTaskIncrementTick+0x15c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	4a3d      	ldr	r2, [pc, #244]	; (800412c <xTaskIncrementTick+0x15c>)
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	f000 fadf 	bl	80045fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800403e:	4b3c      	ldr	r3, [pc, #240]	; (8004130 <xTaskIncrementTick+0x160>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	429a      	cmp	r2, r3
 8004046:	d349      	bcc.n	80040dc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <xTaskIncrementTick+0x154>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	4b37      	ldr	r3, [pc, #220]	; (8004130 <xTaskIncrementTick+0x160>)
 8004054:	f04f 32ff 	mov.w	r2, #4294967295
 8004058:	601a      	str	r2, [r3, #0]
					break;
 800405a:	e03f      	b.n	80040dc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800405c:	4b31      	ldr	r3, [pc, #196]	; (8004124 <xTaskIncrementTick+0x154>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d203      	bcs.n	800407c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004074:	4a2e      	ldr	r2, [pc, #184]	; (8004130 <xTaskIncrementTick+0x160>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800407a:	e02f      	b.n	80040dc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3304      	adds	r3, #4
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fcbb 	bl	80029fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3318      	adds	r3, #24
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fcb2 	bl	80029fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	4b25      	ldr	r3, [pc, #148]	; (8004134 <xTaskIncrementTick+0x164>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d903      	bls.n	80040ac <xTaskIncrementTick+0xdc>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	4a22      	ldr	r2, [pc, #136]	; (8004134 <xTaskIncrementTick+0x164>)
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <xTaskIncrementTick+0x168>)
 80040ba:	441a      	add	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f7fe fc3d 	bl	8002942 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <xTaskIncrementTick+0x16c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d3b8      	bcc.n	8004048 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80040d6:	2301      	movs	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040da:	e7b5      	b.n	8004048 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040dc:	4b17      	ldr	r3, [pc, #92]	; (800413c <xTaskIncrementTick+0x16c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	4915      	ldr	r1, [pc, #84]	; (8004138 <xTaskIncrementTick+0x168>)
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d907      	bls.n	8004104 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	e004      	b.n	8004104 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <xTaskIncrementTick+0x170>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3301      	adds	r3, #1
 8004100:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <xTaskIncrementTick+0x170>)
 8004102:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <xTaskIncrementTick+0x174>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800410c:	2301      	movs	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004110:	697b      	ldr	r3, [r7, #20]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20006f04 	.word	0x20006f04
 8004120:	20006ee0 	.word	0x20006ee0
 8004124:	20006e94 	.word	0x20006e94
 8004128:	20006e98 	.word	0x20006e98
 800412c:	20006ef4 	.word	0x20006ef4
 8004130:	20006efc 	.word	0x20006efc
 8004134:	20006ee4 	.word	0x20006ee4
 8004138:	20006a0c 	.word	0x20006a0c
 800413c:	20006a08 	.word	0x20006a08
 8004140:	20006eec 	.word	0x20006eec
 8004144:	20006ef0 	.word	0x20006ef0

08004148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800414e:	4b29      	ldr	r3, [pc, #164]	; (80041f4 <vTaskSwitchContext+0xac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004156:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <vTaskSwitchContext+0xb0>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800415c:	e043      	b.n	80041e6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800415e:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <vTaskSwitchContext+0xb0>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <vTaskSwitchContext+0xb4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e012      	b.n	8004192 <vTaskSwitchContext+0x4a>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10c      	bne.n	800418c <vTaskSwitchContext+0x44>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	b672      	cpsid	i
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	b662      	cpsie	i
 8004186:	607b      	str	r3, [r7, #4]
}
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <vTaskSwitchContext+0x42>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3b01      	subs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	491b      	ldr	r1, [pc, #108]	; (8004200 <vTaskSwitchContext+0xb8>)
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0e2      	beq.n	800416c <vTaskSwitchContext+0x24>
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <vTaskSwitchContext+0xb8>)
 80041b2:	4413      	add	r3, r2
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	3308      	adds	r3, #8
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d104      	bne.n	80041d6 <vTaskSwitchContext+0x8e>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a09      	ldr	r2, [pc, #36]	; (8004204 <vTaskSwitchContext+0xbc>)
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4a06      	ldr	r2, [pc, #24]	; (80041fc <vTaskSwitchContext+0xb4>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6013      	str	r3, [r2, #0]
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20006f04 	.word	0x20006f04
 80041f8:	20006ef0 	.word	0x20006ef0
 80041fc:	20006ee4 	.word	0x20006ee4
 8004200:	20006a0c 	.word	0x20006a0c
 8004204:	20006a08 	.word	0x20006a08

08004208 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10c      	bne.n	8004232 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	b672      	cpsid	i
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	b662      	cpsie	i
 800422c:	60fb      	str	r3, [r7, #12]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <vTaskPlaceOnEventList+0x48>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3318      	adds	r3, #24
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fe fba5 	bl	800298a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004240:	2101      	movs	r1, #1
 8004242:	6838      	ldr	r0, [r7, #0]
 8004244:	f000 fb9c 	bl	8004980 <prvAddCurrentTaskToDelayedList>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20006a08 	.word	0x20006a08

08004254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	b672      	cpsid	i
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	b662      	cpsie	i
 800427a:	617b      	str	r3, [r7, #20]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <vTaskPlaceOnEventListRestricted+0x58>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3318      	adds	r3, #24
 8004286:	4619      	mov	r1, r3
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7fe fb5a 	bl	8002942 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8004294:	f04f 33ff 	mov.w	r3, #4294967295
 8004298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	68b8      	ldr	r0, [r7, #8]
 800429e:	f000 fb6f 	bl	8004980 <prvAddCurrentTaskToDelayedList>
	}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20006a08 	.word	0x20006a08

080042b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10c      	bne.n	80042e0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	b672      	cpsid	i
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	b662      	cpsie	i
 80042da:	60fb      	str	r3, [r7, #12]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	3318      	adds	r3, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe fb89 	bl	80029fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ea:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <xTaskRemoveFromEventList+0xb4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11d      	bne.n	800432e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe fb80 	bl	80029fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <xTaskRemoveFromEventList+0xb8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d903      	bls.n	8004310 <xTaskRemoveFromEventList+0x60>
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4a16      	ldr	r2, [pc, #88]	; (8004368 <xTaskRemoveFromEventList+0xb8>)
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4a13      	ldr	r2, [pc, #76]	; (800436c <xTaskRemoveFromEventList+0xbc>)
 800431e:	441a      	add	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fe fb0b 	bl	8002942 <vListInsertEnd>
 800432c:	e005      	b.n	800433a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3318      	adds	r3, #24
 8004332:	4619      	mov	r1, r3
 8004334:	480e      	ldr	r0, [pc, #56]	; (8004370 <xTaskRemoveFromEventList+0xc0>)
 8004336:	f7fe fb04 	bl	8002942 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <xTaskRemoveFromEventList+0xc4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	429a      	cmp	r2, r3
 8004346:	d905      	bls.n	8004354 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <xTaskRemoveFromEventList+0xc8>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e001      	b.n	8004358 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004358:	697b      	ldr	r3, [r7, #20]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20006f04 	.word	0x20006f04
 8004368:	20006ee4 	.word	0x20006ee4
 800436c:	20006a0c 	.word	0x20006a0c
 8004370:	20006e9c 	.word	0x20006e9c
 8004374:	20006a08 	.word	0x20006a08
 8004378:	20006ef0 	.word	0x20006ef0

0800437c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <vTaskInternalSetTimeOutState+0x24>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <vTaskInternalSetTimeOutState+0x28>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	605a      	str	r2, [r3, #4]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20006ef4 	.word	0x20006ef4
 80043a4:	20006ee0 	.word	0x20006ee0

080043a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10c      	bne.n	80043d2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	b672      	cpsid	i
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	b662      	cpsie	i
 80043cc:	613b      	str	r3, [r7, #16]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10c      	bne.n	80043f2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	b672      	cpsid	i
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	b662      	cpsie	i
 80043ec:	60fb      	str	r3, [r7, #12]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80043f2:	f001 f843 	bl	800547c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <xTaskCheckForTimeOut+0xc4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d102      	bne.n	8004416 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	e023      	b.n	800445e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <xTaskCheckForTimeOut+0xc8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d007      	beq.n	8004432 <xTaskCheckForTimeOut+0x8a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800442c:	2301      	movs	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e015      	b.n	800445e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	429a      	cmp	r2, r3
 800443a:	d20b      	bcs.n	8004454 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff ff97 	bl	800437c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e004      	b.n	800445e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800445a:	2301      	movs	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800445e:	f001 f841 	bl	80054e4 <vPortExitCritical>

	return xReturn;
 8004462:	69fb      	ldr	r3, [r7, #28]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20006ee0 	.word	0x20006ee0
 8004470:	20006ef4 	.word	0x20006ef4

08004474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <vTaskMissedYield+0x14>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
}
 800447e:	bf00      	nop
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20006ef0 	.word	0x20006ef0

0800448c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004494:	f000 f852 	bl	800453c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <prvIdleTask+0x28>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d9f9      	bls.n	8004494 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <prvIdleTask+0x2c>)
 80044a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044b0:	e7f0      	b.n	8004494 <prvIdleTask+0x8>
 80044b2:	bf00      	nop
 80044b4:	20006a0c 	.word	0x20006a0c
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	e00c      	b.n	80044e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4a12      	ldr	r2, [pc, #72]	; (800451c <prvInitialiseTaskLists+0x60>)
 80044d4:	4413      	add	r3, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe fa06 	bl	80028e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3301      	adds	r3, #1
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b37      	cmp	r3, #55	; 0x37
 80044e6:	d9ef      	bls.n	80044c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044e8:	480d      	ldr	r0, [pc, #52]	; (8004520 <prvInitialiseTaskLists+0x64>)
 80044ea:	f7fe f9fd 	bl	80028e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ee:	480d      	ldr	r0, [pc, #52]	; (8004524 <prvInitialiseTaskLists+0x68>)
 80044f0:	f7fe f9fa 	bl	80028e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044f4:	480c      	ldr	r0, [pc, #48]	; (8004528 <prvInitialiseTaskLists+0x6c>)
 80044f6:	f7fe f9f7 	bl	80028e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044fa:	480c      	ldr	r0, [pc, #48]	; (800452c <prvInitialiseTaskLists+0x70>)
 80044fc:	f7fe f9f4 	bl	80028e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004500:	480b      	ldr	r0, [pc, #44]	; (8004530 <prvInitialiseTaskLists+0x74>)
 8004502:	f7fe f9f1 	bl	80028e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <prvInitialiseTaskLists+0x78>)
 8004508:	4a05      	ldr	r2, [pc, #20]	; (8004520 <prvInitialiseTaskLists+0x64>)
 800450a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <prvInitialiseTaskLists+0x7c>)
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <prvInitialiseTaskLists+0x68>)
 8004510:	601a      	str	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20006a0c 	.word	0x20006a0c
 8004520:	20006e6c 	.word	0x20006e6c
 8004524:	20006e80 	.word	0x20006e80
 8004528:	20006e9c 	.word	0x20006e9c
 800452c:	20006eb0 	.word	0x20006eb0
 8004530:	20006ec8 	.word	0x20006ec8
 8004534:	20006e94 	.word	0x20006e94
 8004538:	20006e98 	.word	0x20006e98

0800453c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004542:	e019      	b.n	8004578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004544:	f000 ff9a 	bl	800547c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <prvCheckTasksWaitingTermination+0x50>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe fa51 	bl	80029fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800455a:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <prvCheckTasksWaitingTermination+0x54>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3b01      	subs	r3, #1
 8004560:	4a0b      	ldr	r2, [pc, #44]	; (8004590 <prvCheckTasksWaitingTermination+0x54>)
 8004562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <prvCheckTasksWaitingTermination+0x58>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3b01      	subs	r3, #1
 800456a:	4a0a      	ldr	r2, [pc, #40]	; (8004594 <prvCheckTasksWaitingTermination+0x58>)
 800456c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800456e:	f000 ffb9 	bl	80054e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f810 	bl	8004598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <prvCheckTasksWaitingTermination+0x58>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e1      	bne.n	8004544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20006eb0 	.word	0x20006eb0
 8004590:	20006edc 	.word	0x20006edc
 8004594:	20006ec4 	.word	0x20006ec4

08004598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d108      	bne.n	80045bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 f95a 	bl	8005868 <vPortFree>
				vPortFree( pxTCB );
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f001 f957 	bl	8005868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045ba:	e01a      	b.n	80045f2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d103      	bne.n	80045ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 f94e 	bl	8005868 <vPortFree>
	}
 80045cc:	e011      	b.n	80045f2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d00c      	beq.n	80045f2 <prvDeleteTCB+0x5a>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	b672      	cpsid	i
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	b662      	cpsie	i
 80045ec:	60fb      	str	r3, [r7, #12]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <prvDeleteTCB+0x58>
	}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <prvResetNextTaskUnblockTime+0x38>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <prvResetNextTaskUnblockTime+0x3c>)
 800460e:	f04f 32ff 	mov.w	r2, #4294967295
 8004612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004614:	e008      	b.n	8004628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <prvResetNextTaskUnblockTime+0x38>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a04      	ldr	r2, [pc, #16]	; (8004638 <prvResetNextTaskUnblockTime+0x3c>)
 8004626:	6013      	str	r3, [r2, #0]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20006e94 	.word	0x20006e94
 8004638:	20006efc 	.word	0x20006efc

0800463c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <xTaskGetCurrentTaskHandle+0x1c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004648:	687b      	ldr	r3, [r7, #4]
	}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20006a08 	.word	0x20006a08

0800465c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <xTaskGetSchedulerState+0x34>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800466a:	2301      	movs	r3, #1
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	e008      	b.n	8004682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <xTaskGetSchedulerState+0x38>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004678:	2302      	movs	r3, #2
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e001      	b.n	8004682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004682:	687b      	ldr	r3, [r7, #4]
	}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20006ee8 	.word	0x20006ee8
 8004694:	20006f04 	.word	0x20006f04

08004698 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d051      	beq.n	8004752 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <xTaskPriorityInherit+0xc4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d241      	bcs.n	8004740 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db06      	blt.n	80046d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <xTaskPriorityInherit+0xc4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6959      	ldr	r1, [r3, #20]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <xTaskPriorityInherit+0xc8>)
 80046e4:	4413      	add	r3, r2
 80046e6:	4299      	cmp	r1, r3
 80046e8:	d122      	bne.n	8004730 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe f984 	bl	80029fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <xTaskPriorityInherit+0xc4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	4b18      	ldr	r3, [pc, #96]	; (8004764 <xTaskPriorityInherit+0xcc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d903      	bls.n	8004712 <xTaskPriorityInherit+0x7a>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	4a15      	ldr	r2, [pc, #84]	; (8004764 <xTaskPriorityInherit+0xcc>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <xTaskPriorityInherit+0xc8>)
 8004720:	441a      	add	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	3304      	adds	r3, #4
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f7fe f90a 	bl	8002942 <vListInsertEnd>
 800472e:	e004      	b.n	800473a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <xTaskPriorityInherit+0xc4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800473a:	2301      	movs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e008      	b.n	8004752 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <xTaskPriorityInherit+0xc4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	429a      	cmp	r2, r3
 800474c:	d201      	bcs.n	8004752 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004752:	68fb      	ldr	r3, [r7, #12]
	}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20006a08 	.word	0x20006a08
 8004760:	20006a0c 	.word	0x20006a0c
 8004764:	20006ee4 	.word	0x20006ee4

08004768 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d05a      	beq.n	8004834 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800477e:	4b30      	ldr	r3, [pc, #192]	; (8004840 <xTaskPriorityDisinherit+0xd8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d00c      	beq.n	80047a2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	b672      	cpsid	i
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	b662      	cpsie	i
 800479c:	60fb      	str	r3, [r7, #12]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	b672      	cpsid	i
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	b662      	cpsie	i
 80047be:	60bb      	str	r3, [r7, #8]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c8:	1e5a      	subs	r2, r3, #1
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d02c      	beq.n	8004834 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d128      	bne.n	8004834 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe f908 	bl	80029fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <xTaskPriorityDisinherit+0xdc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d903      	bls.n	8004814 <xTaskPriorityDisinherit+0xac>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <xTaskPriorityDisinherit+0xdc>)
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4a09      	ldr	r2, [pc, #36]	; (8004848 <xTaskPriorityDisinherit+0xe0>)
 8004822:	441a      	add	r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3304      	adds	r3, #4
 8004828:	4619      	mov	r1, r3
 800482a:	4610      	mov	r0, r2
 800482c:	f7fe f889 	bl	8002942 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004834:	697b      	ldr	r3, [r7, #20]
	}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20006a08 	.word	0x20006a08
 8004844:	20006ee4 	.word	0x20006ee4
 8004848:	20006a0c 	.word	0x20006a0c

0800484c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800485a:	2301      	movs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d06e      	beq.n	8004942 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10c      	bne.n	8004886 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	b672      	cpsid	i
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	b662      	cpsie	i
 8004880:	60fb      	str	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d902      	bls.n	8004896 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e002      	b.n	800489c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d04d      	beq.n	8004942 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d148      	bne.n	8004942 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80048b0:	4b26      	ldr	r3, [pc, #152]	; (800494c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d10c      	bne.n	80048d4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	b672      	cpsid	i
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	b662      	cpsie	i
 80048ce:	60bb      	str	r3, [r7, #8]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	db04      	blt.n	80048f2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	6959      	ldr	r1, [r3, #20]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4a13      	ldr	r2, [pc, #76]	; (8004950 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004902:	4413      	add	r3, r2
 8004904:	4299      	cmp	r1, r3
 8004906:	d11c      	bne.n	8004942 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	3304      	adds	r3, #4
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe f875 	bl	80029fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d903      	bls.n	8004926 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a0c      	ldr	r2, [pc, #48]	; (8004954 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4a07      	ldr	r2, [pc, #28]	; (8004950 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004934:	441a      	add	r2, r3
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7fe f800 	bl	8002942 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004942:	bf00      	nop
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20006a08 	.word	0x20006a08
 8004950:	20006a0c 	.word	0x20006a0c
 8004954:	20006ee4 	.word	0x20006ee4

08004958 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <pvTaskIncrementMutexHeldCount+0x24>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <pvTaskIncrementMutexHeldCount+0x24>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800496a:	3201      	adds	r2, #1
 800496c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800496e:	4b03      	ldr	r3, [pc, #12]	; (800497c <pvTaskIncrementMutexHeldCount+0x24>)
 8004970:	681b      	ldr	r3, [r3, #0]
	}
 8004972:	4618      	mov	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20006a08 	.word	0x20006a08

08004980 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800498a:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <prvAddCurrentTaskToDelayedList+0x90>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004990:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <prvAddCurrentTaskToDelayedList+0x94>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3304      	adds	r3, #4
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe f830 	bl	80029fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d10a      	bne.n	80049ba <prvAddCurrentTaskToDelayedList+0x3a>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049aa:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4819      	ldr	r0, [pc, #100]	; (8004a18 <prvAddCurrentTaskToDelayedList+0x98>)
 80049b4:	f7fd ffc5 	bl	8002942 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049b8:	e026      	b.n	8004a08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d209      	bcs.n	80049e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d2:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <prvAddCurrentTaskToDelayedList+0x9c>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f7fd ffd3 	bl	800298a <vListInsert>
}
 80049e4:	e010      	b.n	8004a08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7fd ffc9 	bl	800298a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049f8:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d202      	bcs.n	8004a08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a02:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6013      	str	r3, [r2, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20006ee0 	.word	0x20006ee0
 8004a14:	20006a08 	.word	0x20006a08
 8004a18:	20006ec8 	.word	0x20006ec8
 8004a1c:	20006e98 	.word	0x20006e98
 8004a20:	20006e94 	.word	0x20006e94
 8004a24:	20006efc 	.word	0x20006efc

08004a28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a32:	f000 fbb5 	bl	80051a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a36:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <xTimerCreateTimerTask+0x84>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d021      	beq.n	8004a82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a46:	1d3a      	adds	r2, r7, #4
 8004a48:	f107 0108 	add.w	r1, r7, #8
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fd ff2f 	bl	80028b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	9202      	str	r2, [sp, #8]
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	2302      	movs	r3, #2
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	2300      	movs	r3, #0
 8004a66:	460a      	mov	r2, r1
 8004a68:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <xTimerCreateTimerTask+0x88>)
 8004a6a:	4812      	ldr	r0, [pc, #72]	; (8004ab4 <xTimerCreateTimerTask+0x8c>)
 8004a6c:	f7fe ffa8 	bl	80039c0 <xTaskCreateStatic>
 8004a70:	4603      	mov	r3, r0
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <xTimerCreateTimerTask+0x90>)
 8004a74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <xTimerCreateTimerTask+0x90>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	b672      	cpsid	i
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	b662      	cpsie	i
 8004a9c:	613b      	str	r3, [r7, #16]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8004aa2:	697b      	ldr	r3, [r7, #20]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20006f38 	.word	0x20006f38
 8004ab0:	08006d30 	.word	0x08006d30
 8004ab4:	08004d39 	.word	0x08004d39
 8004ab8:	20006f3c 	.word	0x20006f3c

08004abc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004aca:	202c      	movs	r0, #44	; 0x2c
 8004acc:	f000 fe02 	bl	80056d4 <pvPortMalloc>
 8004ad0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f847 	bl	8004b82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004af4:	697b      	ldr	r3, [r7, #20]
	}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b08a      	sub	sp, #40	; 0x28
 8004b02:	af02      	add	r7, sp, #8
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004b0c:	232c      	movs	r3, #44	; 0x2c
 8004b0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b2c      	cmp	r3, #44	; 0x2c
 8004b14:	d00c      	beq.n	8004b30 <xTimerCreateStatic+0x32>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	b672      	cpsid	i
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	b662      	cpsie	i
 8004b2a:	61bb      	str	r3, [r7, #24]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10c      	bne.n	8004b52 <xTimerCreateStatic+0x54>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	b672      	cpsid	i
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	b662      	cpsie	i
 8004b4c:	617b      	str	r3, [r7, #20]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00d      	beq.n	8004b78 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f805 	bl	8004b82 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004b78:	69fb      	ldr	r3, [r7, #28]
	}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	b672      	cpsid	i
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	b662      	cpsie	i
 8004baa:	617b      	str	r3, [r7, #20]
}
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01e      	beq.n	8004bf4 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004bb6:	f000 faf3 	bl	80051a0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fd fea6 	bl	8002928 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be8:	f043 0304 	orr.w	r3, r3, #4
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004bf4:	bf00      	nop
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10c      	bne.n	8004c2e <xTimerGenericCommand+0x32>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	b672      	cpsid	i
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	b662      	cpsie	i
 8004c28:	623b      	str	r3, [r7, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c2e:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <xTimerGenericCommand+0x9c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d02a      	beq.n	8004c8c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	dc18      	bgt.n	8004c7a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c48:	f7ff fd08 	bl	800465c <xTaskGetSchedulerState>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d109      	bne.n	8004c66 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <xTimerGenericCommand+0x9c>)
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	f107 0110 	add.w	r1, r7, #16
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5e:	f7fe f903 	bl	8002e68 <xQueueGenericSend>
 8004c62:	6278      	str	r0, [r7, #36]	; 0x24
 8004c64:	e012      	b.n	8004c8c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c66:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <xTimerGenericCommand+0x9c>)
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	f107 0110 	add.w	r1, r7, #16
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2200      	movs	r2, #0
 8004c72:	f7fe f8f9 	bl	8002e68 <xQueueGenericSend>
 8004c76:	6278      	str	r0, [r7, #36]	; 0x24
 8004c78:	e008      	b.n	8004c8c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <xTimerGenericCommand+0x9c>)
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	f107 0110 	add.w	r1, r7, #16
 8004c82:	2300      	movs	r3, #0
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	f7fe f9f5 	bl	8003074 <xQueueGenericSendFromISR>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3728      	adds	r7, #40	; 0x28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20006f38 	.word	0x20006f38

08004c9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca6:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <prvProcessExpiredTimer+0x98>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd fea1 	bl	80029fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d024      	beq.n	8004d12 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	699a      	ldr	r2, [r3, #24]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	18d1      	adds	r1, r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	6978      	ldr	r0, [r7, #20]
 8004cd6:	f000 f8d3 	bl	8004e80 <prvInsertTimerInActiveList>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d021      	beq.n	8004d24 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	2100      	movs	r1, #0
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f7ff ff86 	bl	8004bfc <xTimerGenericCommand>
 8004cf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d115      	bne.n	8004d24 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	b672      	cpsid	i
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	b662      	cpsie	i
 8004d0c:	60fb      	str	r3, [r7, #12]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	4798      	blx	r3
}
 8004d2c:	bf00      	nop
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20006f30 	.word	0x20006f30

08004d38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d40:	f107 0308 	add.w	r3, r7, #8
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f857 	bl	8004df8 <prvGetNextExpireTime>
 8004d4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f803 	bl	8004d5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d56:	f000 f8d5 	bl	8004f04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d5a:	e7f1      	b.n	8004d40 <prvTimerTask+0x8>

08004d5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d66:	f7ff f875 	bl	8003e54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f866 	bl	8004e40 <prvSampleTimeNow>
 8004d74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d130      	bne.n	8004dde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <prvProcessTimerOrBlockTask+0x3c>
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d806      	bhi.n	8004d98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d8a:	f7ff f871 	bl	8003e70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ff83 	bl	8004c9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d96:	e024      	b.n	8004de2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d9e:	4b13      	ldr	r3, [pc, #76]	; (8004dec <prvProcessTimerOrBlockTask+0x90>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <prvProcessTimerOrBlockTask+0x50>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <prvProcessTimerOrBlockTask+0x52>
 8004dac:	2300      	movs	r3, #0
 8004dae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <prvProcessTimerOrBlockTask+0x94>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f7fe fdcb 	bl	8003958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004dc2:	f7ff f855 	bl	8003e70 <xTaskResumeAll>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <prvProcessTimerOrBlockTask+0x98>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	f3bf 8f6f 	isb	sy
}
 8004ddc:	e001      	b.n	8004de2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dde:	f7ff f847 	bl	8003e70 <xTaskResumeAll>
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20006f34 	.word	0x20006f34
 8004df0:	20006f38 	.word	0x20006f38
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e00:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <prvGetNextExpireTime+0x44>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <prvGetNextExpireTime+0x16>
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	e000      	b.n	8004e10 <prvGetNextExpireTime+0x18>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <prvGetNextExpireTime+0x44>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e001      	b.n	8004e2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20006f30 	.word	0x20006f30

08004e40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e48:	f7ff f8b2 	bl	8003fb0 <xTaskGetTickCount>
 8004e4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <prvSampleTimeNow+0x3c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d205      	bcs.n	8004e64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e58:	f000 f93c 	bl	80050d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e002      	b.n	8004e6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e6a:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <prvSampleTimeNow+0x3c>)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e70:	68fb      	ldr	r3, [r7, #12]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20006f40 	.word	0x20006f40

08004e80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d812      	bhi.n	8004ecc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e01b      	b.n	8004ef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <prvInsertTimerInActiveList+0x7c>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7fd fd60 	bl	800298a <vListInsert>
 8004eca:	e012      	b.n	8004ef2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d206      	bcs.n	8004ee2 <prvInsertTimerInActiveList+0x62>
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d302      	bcc.n	8004ee2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e007      	b.n	8004ef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <prvInsertTimerInActiveList+0x80>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fd fd4c 	bl	800298a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ef2:	697b      	ldr	r3, [r7, #20]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20006f34 	.word	0x20006f34
 8004f00:	20006f30 	.word	0x20006f30

08004f04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08e      	sub	sp, #56	; 0x38
 8004f08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f0a:	e0d0      	b.n	80050ae <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da1a      	bge.n	8004f48 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f12:	1d3b      	adds	r3, r7, #4
 8004f14:	3304      	adds	r3, #4
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	b672      	cpsid	i
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	b662      	cpsie	i
 8004f32:	61fb      	str	r3, [r7, #28]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f3e:	6850      	ldr	r0, [r2, #4]
 8004f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f42:	6892      	ldr	r2, [r2, #8]
 8004f44:	4611      	mov	r1, r2
 8004f46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f2c0 80af 	blt.w	80050ae <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d004      	beq.n	8004f66 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fd fd4b 	bl	80029fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f66:	463b      	mov	r3, r7
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff69 	bl	8004e40 <prvSampleTimeNow>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	f200 809a 	bhi.w	80050ac <prvProcessReceivedCommands+0x1a8>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <prvProcessReceivedCommands+0x7c>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fa9 	.word	0x08004fa9
 8004f8c:	08005021 	.word	0x08005021
 8004f90:	08005035 	.word	0x08005035
 8004f94:	08005083 	.word	0x08005083
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fa9 	.word	0x08004fa9
 8004fa0:	08005021 	.word	0x08005021
 8004fa4:	08005035 	.word	0x08005035
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	18d1      	adds	r1, r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc8:	f7ff ff5a 	bl	8004e80 <prvInsertTimerInActiveList>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d06d      	beq.n	80050ae <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d062      	beq.n	80050ae <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	441a      	add	r2, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffa:	f7ff fdff 	bl	8004bfc <xTimerGenericCommand>
 8004ffe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d153      	bne.n	80050ae <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	b672      	cpsid	i
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	b662      	cpsie	i
 800501a:	61bb      	str	r3, [r7, #24]
}
 800501c:	bf00      	nop
 800501e:	e7fe      	b.n	800501e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005026:	f023 0301 	bic.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005032:	e03c      	b.n	80050ae <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10c      	bne.n	800506e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	b672      	cpsid	i
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	b662      	cpsie	i
 8005068:	617b      	str	r3, [r7, #20]
}
 800506a:	bf00      	nop
 800506c:	e7fe      	b.n	800506c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	18d1      	adds	r1, r2, r3
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507c:	f7ff ff00 	bl	8004e80 <prvInsertTimerInActiveList>
					break;
 8005080:	e015      	b.n	80050ae <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8005090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005092:	f000 fbe9 	bl	8005868 <vPortFree>
 8005096:	e00a      	b.n	80050ae <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050aa:	e000      	b.n	80050ae <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80050ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ae:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <prvProcessReceivedCommands+0x1cc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	1d39      	adds	r1, r7, #4
 80050b4:	2200      	movs	r2, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe f87c 	bl	80031b4 <xQueueReceive>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f47f af24 	bne.w	8004f0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	3730      	adds	r7, #48	; 0x30
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20006f38 	.word	0x20006f38

080050d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050da:	e04a      	b.n	8005172 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050dc:	4b2e      	ldr	r3, [pc, #184]	; (8005198 <prvSwitchTimerLists+0xc4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e6:	4b2c      	ldr	r3, [pc, #176]	; (8005198 <prvSwitchTimerLists+0xc4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fd fc81 	bl	80029fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d030      	beq.n	8005172 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4413      	add	r3, r2
 8005118:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	429a      	cmp	r2, r3
 8005120:	d90e      	bls.n	8005140 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <prvSwitchTimerLists+0xc4>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f7fd fc26 	bl	800298a <vListInsert>
 800513e:	e018      	b.n	8005172 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005140:	2300      	movs	r3, #0
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	2100      	movs	r1, #0
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff fd56 	bl	8004bfc <xTimerGenericCommand>
 8005150:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10c      	bne.n	8005172 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	b672      	cpsid	i
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	b662      	cpsie	i
 800516c:	603b      	str	r3, [r7, #0]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <prvSwitchTimerLists+0xc4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1af      	bne.n	80050dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <prvSwitchTimerLists+0xc4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <prvSwitchTimerLists+0xc8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a04      	ldr	r2, [pc, #16]	; (8005198 <prvSwitchTimerLists+0xc4>)
 8005188:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800518a:	4a04      	ldr	r2, [pc, #16]	; (800519c <prvSwitchTimerLists+0xc8>)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	bf00      	nop
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20006f30 	.word	0x20006f30
 800519c:	20006f34 	.word	0x20006f34

080051a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051a6:	f000 f969 	bl	800547c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <prvCheckForValidListAndQueue+0x60>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d120      	bne.n	80051f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80051b2:	4814      	ldr	r0, [pc, #80]	; (8005204 <prvCheckForValidListAndQueue+0x64>)
 80051b4:	f7fd fb98 	bl	80028e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051b8:	4813      	ldr	r0, [pc, #76]	; (8005208 <prvCheckForValidListAndQueue+0x68>)
 80051ba:	f7fd fb95 	bl	80028e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051be:	4b13      	ldr	r3, [pc, #76]	; (800520c <prvCheckForValidListAndQueue+0x6c>)
 80051c0:	4a10      	ldr	r2, [pc, #64]	; (8005204 <prvCheckForValidListAndQueue+0x64>)
 80051c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <prvCheckForValidListAndQueue+0x70>)
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <prvCheckForValidListAndQueue+0x68>)
 80051c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051ca:	2300      	movs	r3, #0
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <prvCheckForValidListAndQueue+0x74>)
 80051d0:	4a11      	ldr	r2, [pc, #68]	; (8005218 <prvCheckForValidListAndQueue+0x78>)
 80051d2:	2110      	movs	r1, #16
 80051d4:	200a      	movs	r0, #10
 80051d6:	f7fd fca5 	bl	8002b24 <xQueueGenericCreateStatic>
 80051da:	4603      	mov	r3, r0
 80051dc:	4a08      	ldr	r2, [pc, #32]	; (8005200 <prvCheckForValidListAndQueue+0x60>)
 80051de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <prvCheckForValidListAndQueue+0x60>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <prvCheckForValidListAndQueue+0x60>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	490b      	ldr	r1, [pc, #44]	; (800521c <prvCheckForValidListAndQueue+0x7c>)
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fb88 	bl	8003904 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051f4:	f000 f976 	bl	80054e4 <vPortExitCritical>
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20006f38 	.word	0x20006f38
 8005204:	20006f08 	.word	0x20006f08
 8005208:	20006f1c 	.word	0x20006f1c
 800520c:	20006f30 	.word	0x20006f30
 8005210:	20006f34 	.word	0x20006f34
 8005214:	20006fe4 	.word	0x20006fe4
 8005218:	20006f44 	.word	0x20006f44
 800521c:	08006d38 	.word	0x08006d38

08005220 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10c      	bne.n	800524c <pvTimerGetTimerID+0x2c>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	b672      	cpsid	i
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	b662      	cpsie	i
 8005246:	60fb      	str	r3, [r7, #12]
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800524c:	f000 f916 	bl	800547c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005256:	f000 f945 	bl	80054e4 <vPortExitCritical>

	return pvReturn;
 800525a:	693b      	ldr	r3, [r7, #16]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3b04      	subs	r3, #4
 8005274:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800527c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b04      	subs	r3, #4
 8005282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f023 0201 	bic.w	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3b04      	subs	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005294:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <pxPortInitialiseStack+0x64>)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b14      	subs	r3, #20
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b04      	subs	r3, #4
 80052aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f06f 0202 	mvn.w	r2, #2
 80052b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3b20      	subs	r3, #32
 80052b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052ba:	68fb      	ldr	r3, [r7, #12]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	080052cd 	.word	0x080052cd

080052cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052d6:	4b14      	ldr	r3, [pc, #80]	; (8005328 <prvTaskExitError+0x5c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052de:	d00c      	beq.n	80052fa <prvTaskExitError+0x2e>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	b672      	cpsid	i
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	b662      	cpsie	i
 80052f4:	60fb      	str	r3, [r7, #12]
}
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <prvTaskExitError+0x2c>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	b672      	cpsid	i
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	b662      	cpsie	i
 800530e:	60bb      	str	r3, [r7, #8]
}
 8005310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005312:	bf00      	nop
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0fc      	beq.n	8005314 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	20000024 	.word	0x20000024
 800532c:	00000000 	.word	0x00000000

08005330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <pxCurrentTCBConst2>)
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	6808      	ldr	r0, [r1, #0]
 8005336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	f380 8809 	msr	PSP, r0
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f380 8811 	msr	BASEPRI, r0
 800534a:	4770      	bx	lr
 800534c:	f3af 8000 	nop.w

08005350 <pxCurrentTCBConst2>:
 8005350:	20006a08 	.word	0x20006a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop

08005358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005358:	4808      	ldr	r0, [pc, #32]	; (800537c <prvPortStartFirstTask+0x24>)
 800535a:	6800      	ldr	r0, [r0, #0]
 800535c:	6800      	ldr	r0, [r0, #0]
 800535e:	f380 8808 	msr	MSP, r0
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	f380 8814 	msr	CONTROL, r0
 800536a:	b662      	cpsie	i
 800536c:	b661      	cpsie	f
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	df00      	svc	0
 8005378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800537a:	bf00      	nop
 800537c:	e000ed08 	.word	0xe000ed08

08005380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <xPortStartScheduler+0xe4>)
 8005388:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	22ff      	movs	r2, #255	; 0xff
 8005396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <xPortStartScheduler+0xe8>)
 80053ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053ae:	4b2f      	ldr	r3, [pc, #188]	; (800546c <xPortStartScheduler+0xec>)
 80053b0:	2207      	movs	r2, #7
 80053b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053b4:	e009      	b.n	80053ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80053b6:	4b2d      	ldr	r3, [pc, #180]	; (800546c <xPortStartScheduler+0xec>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	4a2b      	ldr	r2, [pc, #172]	; (800546c <xPortStartScheduler+0xec>)
 80053be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	d0ef      	beq.n	80053b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053d6:	4b25      	ldr	r3, [pc, #148]	; (800546c <xPortStartScheduler+0xec>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f1c3 0307 	rsb	r3, r3, #7
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d00c      	beq.n	80053fc <xPortStartScheduler+0x7c>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	b672      	cpsid	i
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	b662      	cpsie	i
 80053f6:	60bb      	str	r3, [r7, #8]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <xPortStartScheduler+0xec>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <xPortStartScheduler+0xec>)
 8005404:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005406:	4b19      	ldr	r3, [pc, #100]	; (800546c <xPortStartScheduler+0xec>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800540e:	4a17      	ldr	r2, [pc, #92]	; (800546c <xPortStartScheduler+0xec>)
 8005410:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <xPortStartScheduler+0xf0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a14      	ldr	r2, [pc, #80]	; (8005470 <xPortStartScheduler+0xf0>)
 8005420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005424:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <xPortStartScheduler+0xf0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a11      	ldr	r2, [pc, #68]	; (8005470 <xPortStartScheduler+0xf0>)
 800542c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005430:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005432:	f000 f8dd 	bl	80055f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <xPortStartScheduler+0xf4>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800543c:	f000 f8fc 	bl	8005638 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005440:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <xPortStartScheduler+0xf8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0c      	ldr	r2, [pc, #48]	; (8005478 <xPortStartScheduler+0xf8>)
 8005446:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800544a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800544c:	f7ff ff84 	bl	8005358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005450:	f7fe fe7a 	bl	8004148 <vTaskSwitchContext>
	prvTaskExitError();
 8005454:	f7ff ff3a 	bl	80052cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	e000e400 	.word	0xe000e400
 8005468:	20007034 	.word	0x20007034
 800546c:	20007038 	.word	0x20007038
 8005470:	e000ed20 	.word	0xe000ed20
 8005474:	20000024 	.word	0x20000024
 8005478:	e000ef34 	.word	0xe000ef34

0800547c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	b672      	cpsid	i
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	b662      	cpsie	i
 8005496:	607b      	str	r3, [r7, #4]
}
 8005498:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <vPortEnterCritical+0x60>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3301      	adds	r3, #1
 80054a0:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <vPortEnterCritical+0x60>)
 80054a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054a4:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <vPortEnterCritical+0x60>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d111      	bne.n	80054d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <vPortEnterCritical+0x64>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <vPortEnterCritical+0x54>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	b672      	cpsid	i
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	b662      	cpsie	i
 80054ca:	603b      	str	r3, [r7, #0]
}
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <vPortEnterCritical+0x52>
	}
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000024 	.word	0x20000024
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <vPortExitCritical+0x54>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10c      	bne.n	800550c <vPortExitCritical+0x28>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	b672      	cpsid	i
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	b662      	cpsie	i
 8005506:	607b      	str	r3, [r7, #4]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <vPortExitCritical+0x54>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3b01      	subs	r3, #1
 8005512:	4a09      	ldr	r2, [pc, #36]	; (8005538 <vPortExitCritical+0x54>)
 8005514:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005516:	4b08      	ldr	r3, [pc, #32]	; (8005538 <vPortExitCritical+0x54>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d105      	bne.n	800552a <vPortExitCritical+0x46>
 800551e:	2300      	movs	r3, #0
 8005520:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f383 8811 	msr	BASEPRI, r3
}
 8005528:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000024 	.word	0x20000024
 800553c:	00000000 	.word	0x00000000

08005540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005540:	f3ef 8009 	mrs	r0, PSP
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <pxCurrentTCBConst>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	f01e 0f10 	tst.w	lr, #16
 8005550:	bf08      	it	eq
 8005552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	6010      	str	r0, [r2, #0]
 800555c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005564:	b672      	cpsid	i
 8005566:	f380 8811 	msr	BASEPRI, r0
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	b662      	cpsie	i
 8005574:	f7fe fde8 	bl	8004148 <vTaskSwitchContext>
 8005578:	f04f 0000 	mov.w	r0, #0
 800557c:	f380 8811 	msr	BASEPRI, r0
 8005580:	bc09      	pop	{r0, r3}
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	6808      	ldr	r0, [r1, #0]
 8005586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558a:	f01e 0f10 	tst.w	lr, #16
 800558e:	bf08      	it	eq
 8005590:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005594:	f380 8809 	msr	PSP, r0
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <pxCurrentTCBConst>:
 80055a0:	20006a08 	.word	0x20006a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop

080055a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	b672      	cpsid	i
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	b662      	cpsie	i
 80055c2:	607b      	str	r3, [r7, #4]
}
 80055c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055c6:	f7fe fd03 	bl	8003fd0 <xTaskIncrementTick>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <xPortSysTickHandler+0x44>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	2300      	movs	r3, #0
 80055da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f383 8811 	msr	BASEPRI, r3
}
 80055e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <vPortSetupTimerInterrupt+0x34>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <vPortSetupTimerInterrupt+0x38>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <vPortSetupTimerInterrupt+0x3c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <vPortSetupTimerInterrupt+0x40>)
 8005606:	fba2 2303 	umull	r2, r3, r2, r3
 800560a:	099b      	lsrs	r3, r3, #6
 800560c:	4a09      	ldr	r2, [pc, #36]	; (8005634 <vPortSetupTimerInterrupt+0x44>)
 800560e:	3b01      	subs	r3, #1
 8005610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005612:	4b04      	ldr	r3, [pc, #16]	; (8005624 <vPortSetupTimerInterrupt+0x34>)
 8005614:	2207      	movs	r2, #7
 8005616:	601a      	str	r2, [r3, #0]
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	e000e010 	.word	0xe000e010
 8005628:	e000e018 	.word	0xe000e018
 800562c:	20000018 	.word	0x20000018
 8005630:	10624dd3 	.word	0x10624dd3
 8005634:	e000e014 	.word	0xe000e014

08005638 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005638:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005648 <vPortEnableVFP+0x10>
 800563c:	6801      	ldr	r1, [r0, #0]
 800563e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005642:	6001      	str	r1, [r0, #0]
 8005644:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005646:	bf00      	nop
 8005648:	e000ed88 	.word	0xe000ed88

0800564c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005652:	f3ef 8305 	mrs	r3, IPSR
 8005656:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d916      	bls.n	800568c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800565e:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <vPortValidateInterruptPriority+0x78>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005668:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <vPortValidateInterruptPriority+0x7c>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	7afa      	ldrb	r2, [r7, #11]
 800566e:	429a      	cmp	r2, r3
 8005670:	d20c      	bcs.n	800568c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	b672      	cpsid	i
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	b662      	cpsie	i
 8005686:	607b      	str	r3, [r7, #4]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <vPortValidateInterruptPriority+0x80>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <vPortValidateInterruptPriority+0x84>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d90c      	bls.n	80056b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	b672      	cpsid	i
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	b662      	cpsie	i
 80056b0:	603b      	str	r3, [r7, #0]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <vPortValidateInterruptPriority+0x68>
	}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000e3f0 	.word	0xe000e3f0
 80056c8:	20007034 	.word	0x20007034
 80056cc:	e000ed0c 	.word	0xe000ed0c
 80056d0:	20007038 	.word	0x20007038

080056d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	; 0x28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056e0:	f7fe fbb8 	bl	8003e54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056e4:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <pvPortMalloc+0x180>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056ec:	f000 f91a 	bl	8005924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056f0:	4b59      	ldr	r3, [pc, #356]	; (8005858 <pvPortMalloc+0x184>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 8092 	bne.w	8005822 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01f      	beq.n	8005744 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005704:	2208      	movs	r2, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4413      	add	r3, r2
 800570a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	2b00      	cmp	r3, #0
 8005714:	d016      	beq.n	8005744 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f023 0307 	bic.w	r3, r3, #7
 800571c:	3308      	adds	r3, #8
 800571e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <pvPortMalloc+0x70>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	b672      	cpsid	i
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	b662      	cpsie	i
 800573e:	617b      	str	r3, [r7, #20]
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d06b      	beq.n	8005822 <pvPortMalloc+0x14e>
 800574a:	4b44      	ldr	r3, [pc, #272]	; (800585c <pvPortMalloc+0x188>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d866      	bhi.n	8005822 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005754:	4b42      	ldr	r3, [pc, #264]	; (8005860 <pvPortMalloc+0x18c>)
 8005756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005758:	4b41      	ldr	r3, [pc, #260]	; (8005860 <pvPortMalloc+0x18c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800575e:	e004      	b.n	800576a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d903      	bls.n	800577c <pvPortMalloc+0xa8>
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f1      	bne.n	8005760 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800577c:	4b35      	ldr	r3, [pc, #212]	; (8005854 <pvPortMalloc+0x180>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	429a      	cmp	r2, r3
 8005784:	d04d      	beq.n	8005822 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2208      	movs	r2, #8
 800578c:	4413      	add	r3, r2
 800578e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	2308      	movs	r3, #8
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d921      	bls.n	80057ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <pvPortMalloc+0x100>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	b672      	cpsid	i
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	b662      	cpsie	i
 80057ce:	613b      	str	r3, [r7, #16]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	1ad2      	subs	r2, r2, r3
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057e6:	69b8      	ldr	r0, [r7, #24]
 80057e8:	f000 f8fe 	bl	80059e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <pvPortMalloc+0x188>)
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	4a19      	ldr	r2, [pc, #100]	; (800585c <pvPortMalloc+0x188>)
 80057f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057fa:	4b18      	ldr	r3, [pc, #96]	; (800585c <pvPortMalloc+0x188>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b19      	ldr	r3, [pc, #100]	; (8005864 <pvPortMalloc+0x190>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d203      	bcs.n	800580e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005806:	4b15      	ldr	r3, [pc, #84]	; (800585c <pvPortMalloc+0x188>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <pvPortMalloc+0x190>)
 800580c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	4b11      	ldr	r3, [pc, #68]	; (8005858 <pvPortMalloc+0x184>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	431a      	orrs	r2, r3
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005822:	f7fe fb25 	bl	8003e70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <pvPortMalloc+0x176>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	b672      	cpsid	i
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	b662      	cpsie	i
 8005844:	60fb      	str	r3, [r7, #12]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <pvPortMalloc+0x174>
	return pvReturn;
 800584a:	69fb      	ldr	r3, [r7, #28]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3728      	adds	r7, #40	; 0x28
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	2000ac44 	.word	0x2000ac44
 8005858:	2000ac50 	.word	0x2000ac50
 800585c:	2000ac48 	.word	0x2000ac48
 8005860:	2000ac3c 	.word	0x2000ac3c
 8005864:	2000ac4c 	.word	0x2000ac4c

08005868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d04c      	beq.n	8005914 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800587a:	2308      	movs	r3, #8
 800587c:	425b      	negs	r3, r3
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4413      	add	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4b23      	ldr	r3, [pc, #140]	; (800591c <vPortFree+0xb4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10c      	bne.n	80058b0 <vPortFree+0x48>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	b672      	cpsid	i
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	b662      	cpsie	i
 80058aa:	60fb      	str	r3, [r7, #12]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00c      	beq.n	80058d2 <vPortFree+0x6a>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	b672      	cpsid	i
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	b662      	cpsie	i
 80058cc:	60bb      	str	r3, [r7, #8]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <vPortFree+0xb4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d019      	beq.n	8005914 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d115      	bne.n	8005914 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <vPortFree+0xb4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058f8:	f7fe faac 	bl	8003e54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <vPortFree+0xb8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4413      	add	r3, r2
 8005906:	4a06      	ldr	r2, [pc, #24]	; (8005920 <vPortFree+0xb8>)
 8005908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800590a:	6938      	ldr	r0, [r7, #16]
 800590c:	f000 f86c 	bl	80059e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005910:	f7fe faae 	bl	8003e70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005914:	bf00      	nop
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	2000ac50 	.word	0x2000ac50
 8005920:	2000ac48 	.word	0x2000ac48

08005924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800592a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800592e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <prvHeapInit+0xac>)
 8005932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00c      	beq.n	8005958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3307      	adds	r3, #7
 8005942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 0307 	bic.w	r3, r3, #7
 800594a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <prvHeapInit+0xac>)
 8005954:	4413      	add	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800595c:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <prvHeapInit+0xb0>)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <prvHeapInit+0xb0>)
 8005964:	2200      	movs	r2, #0
 8005966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	4413      	add	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005970:	2208      	movs	r2, #8
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <prvHeapInit+0xb4>)
 8005984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <prvHeapInit+0xb4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <prvHeapInit+0xb4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	1ad2      	subs	r2, r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <prvHeapInit+0xb4>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <prvHeapInit+0xb8>)
 80059b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <prvHeapInit+0xbc>)
 80059ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <prvHeapInit+0xc0>)
 80059be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059c2:	601a      	str	r2, [r3, #0]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	2000703c 	.word	0x2000703c
 80059d4:	2000ac3c 	.word	0x2000ac3c
 80059d8:	2000ac44 	.word	0x2000ac44
 80059dc:	2000ac4c 	.word	0x2000ac4c
 80059e0:	2000ac48 	.word	0x2000ac48
 80059e4:	2000ac50 	.word	0x2000ac50

080059e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059f0:	4b28      	ldr	r3, [pc, #160]	; (8005a94 <prvInsertBlockIntoFreeList+0xac>)
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e002      	b.n	80059fc <prvInsertBlockIntoFreeList+0x14>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d8f7      	bhi.n	80059f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4413      	add	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d108      	bne.n	8005a2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	441a      	add	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	441a      	add	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d118      	bne.n	8005a70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <prvInsertBlockIntoFreeList+0xb0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d00d      	beq.n	8005a66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	441a      	add	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	e008      	b.n	8005a78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <prvInsertBlockIntoFreeList+0xb0>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	e003      	b.n	8005a78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d002      	beq.n	8005a86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	2000ac3c 	.word	0x2000ac3c
 8005a98:	2000ac44 	.word	0x2000ac44

08005a9c <rand>:
 8005a9c:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <rand+0x5c>)
 8005a9e:	b510      	push	{r4, lr}
 8005aa0:	681c      	ldr	r4, [r3, #0]
 8005aa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005aa4:	b9b3      	cbnz	r3, 8005ad4 <rand+0x38>
 8005aa6:	2018      	movs	r0, #24
 8005aa8:	f000 fb1e 	bl	80060e8 <malloc>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6320      	str	r0, [r4, #48]	; 0x30
 8005ab0:	b920      	cbnz	r0, 8005abc <rand+0x20>
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <rand+0x60>)
 8005ab4:	4812      	ldr	r0, [pc, #72]	; (8005b00 <rand+0x64>)
 8005ab6:	2152      	movs	r1, #82	; 0x52
 8005ab8:	f000 faac 	bl	8006014 <__assert_func>
 8005abc:	4911      	ldr	r1, [pc, #68]	; (8005b04 <rand+0x68>)
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <rand+0x6c>)
 8005ac0:	e9c0 1300 	strd	r1, r3, [r0]
 8005ac4:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <rand+0x70>)
 8005ac6:	6083      	str	r3, [r0, #8]
 8005ac8:	230b      	movs	r3, #11
 8005aca:	8183      	strh	r3, [r0, #12]
 8005acc:	2100      	movs	r1, #0
 8005ace:	2001      	movs	r0, #1
 8005ad0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005ad4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005ad6:	480e      	ldr	r0, [pc, #56]	; (8005b10 <rand+0x74>)
 8005ad8:	690b      	ldr	r3, [r1, #16]
 8005ada:	694c      	ldr	r4, [r1, #20]
 8005adc:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <rand+0x78>)
 8005ade:	4358      	muls	r0, r3
 8005ae0:	fb02 0004 	mla	r0, r2, r4, r0
 8005ae4:	fba3 3202 	umull	r3, r2, r3, r2
 8005ae8:	3301      	adds	r3, #1
 8005aea:	eb40 0002 	adc.w	r0, r0, r2
 8005aee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005af2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005af6:	bd10      	pop	{r4, pc}
 8005af8:	20000080 	.word	0x20000080
 8005afc:	08006ec4 	.word	0x08006ec4
 8005b00:	08006edb 	.word	0x08006edb
 8005b04:	abcd330e 	.word	0xabcd330e
 8005b08:	e66d1234 	.word	0xe66d1234
 8005b0c:	0005deec 	.word	0x0005deec
 8005b10:	5851f42d 	.word	0x5851f42d
 8005b14:	4c957f2d 	.word	0x4c957f2d

08005b18 <std>:
 8005b18:	2300      	movs	r3, #0
 8005b1a:	b510      	push	{r4, lr}
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b26:	6083      	str	r3, [r0, #8]
 8005b28:	8181      	strh	r1, [r0, #12]
 8005b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b2c:	81c2      	strh	r2, [r0, #14]
 8005b2e:	6183      	str	r3, [r0, #24]
 8005b30:	4619      	mov	r1, r3
 8005b32:	2208      	movs	r2, #8
 8005b34:	305c      	adds	r0, #92	; 0x5c
 8005b36:	f000 f9e5 	bl	8005f04 <memset>
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <std+0x38>)
 8005b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b3e:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <std+0x3c>)
 8005b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <std+0x40>)
 8005b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <std+0x44>)
 8005b48:	6224      	str	r4, [r4, #32]
 8005b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	08005d55 	.word	0x08005d55
 8005b54:	08005d77 	.word	0x08005d77
 8005b58:	08005daf 	.word	0x08005daf
 8005b5c:	08005dd3 	.word	0x08005dd3

08005b60 <stdio_exit_handler>:
 8005b60:	4a02      	ldr	r2, [pc, #8]	; (8005b6c <stdio_exit_handler+0xc>)
 8005b62:	4903      	ldr	r1, [pc, #12]	; (8005b70 <stdio_exit_handler+0x10>)
 8005b64:	4803      	ldr	r0, [pc, #12]	; (8005b74 <stdio_exit_handler+0x14>)
 8005b66:	f000 b869 	b.w	8005c3c <_fwalk_sglue>
 8005b6a:	bf00      	nop
 8005b6c:	20000028 	.word	0x20000028
 8005b70:	08006905 	.word	0x08006905
 8005b74:	20000034 	.word	0x20000034

08005b78 <cleanup_stdio>:
 8005b78:	6841      	ldr	r1, [r0, #4]
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <cleanup_stdio+0x34>)
 8005b7c:	4299      	cmp	r1, r3
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	4604      	mov	r4, r0
 8005b82:	d001      	beq.n	8005b88 <cleanup_stdio+0x10>
 8005b84:	f000 febe 	bl	8006904 <_fflush_r>
 8005b88:	68a1      	ldr	r1, [r4, #8]
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <cleanup_stdio+0x38>)
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d002      	beq.n	8005b96 <cleanup_stdio+0x1e>
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 feb7 	bl	8006904 <_fflush_r>
 8005b96:	68e1      	ldr	r1, [r4, #12]
 8005b98:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <cleanup_stdio+0x3c>)
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	d004      	beq.n	8005ba8 <cleanup_stdio+0x30>
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba4:	f000 beae 	b.w	8006904 <_fflush_r>
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	bf00      	nop
 8005bac:	2000ac54 	.word	0x2000ac54
 8005bb0:	2000acbc 	.word	0x2000acbc
 8005bb4:	2000ad24 	.word	0x2000ad24

08005bb8 <global_stdio_init.part.0>:
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <global_stdio_init.part.0+0x30>)
 8005bbc:	4c0b      	ldr	r4, [pc, #44]	; (8005bec <global_stdio_init.part.0+0x34>)
 8005bbe:	4a0c      	ldr	r2, [pc, #48]	; (8005bf0 <global_stdio_init.part.0+0x38>)
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	f7ff ffa6 	bl	8005b18 <std>
 8005bcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	2109      	movs	r1, #9
 8005bd4:	f7ff ffa0 	bl	8005b18 <std>
 8005bd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005bdc:	2202      	movs	r2, #2
 8005bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be2:	2112      	movs	r1, #18
 8005be4:	f7ff bf98 	b.w	8005b18 <std>
 8005be8:	2000ad8c 	.word	0x2000ad8c
 8005bec:	2000ac54 	.word	0x2000ac54
 8005bf0:	08005b61 	.word	0x08005b61

08005bf4 <__sfp_lock_acquire>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__sfp_lock_acquire+0x8>)
 8005bf6:	f000 b9fd 	b.w	8005ff4 <__retarget_lock_acquire_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	2000ad95 	.word	0x2000ad95

08005c00 <__sfp_lock_release>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sfp_lock_release+0x8>)
 8005c02:	f000 b9f8 	b.w	8005ff6 <__retarget_lock_release_recursive>
 8005c06:	bf00      	nop
 8005c08:	2000ad95 	.word	0x2000ad95

08005c0c <__sinit>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	f7ff fff0 	bl	8005bf4 <__sfp_lock_acquire>
 8005c14:	6a23      	ldr	r3, [r4, #32]
 8005c16:	b11b      	cbz	r3, 8005c20 <__sinit+0x14>
 8005c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1c:	f7ff bff0 	b.w	8005c00 <__sfp_lock_release>
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <__sinit+0x28>)
 8005c22:	6223      	str	r3, [r4, #32]
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <__sinit+0x2c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f5      	bne.n	8005c18 <__sinit+0xc>
 8005c2c:	f7ff ffc4 	bl	8005bb8 <global_stdio_init.part.0>
 8005c30:	e7f2      	b.n	8005c18 <__sinit+0xc>
 8005c32:	bf00      	nop
 8005c34:	08005b79 	.word	0x08005b79
 8005c38:	2000ad8c 	.word	0x2000ad8c

08005c3c <_fwalk_sglue>:
 8005c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	4607      	mov	r7, r0
 8005c42:	4688      	mov	r8, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	2600      	movs	r6, #0
 8005c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c50:	d505      	bpl.n	8005c5e <_fwalk_sglue+0x22>
 8005c52:	6824      	ldr	r4, [r4, #0]
 8005c54:	2c00      	cmp	r4, #0
 8005c56:	d1f7      	bne.n	8005c48 <_fwalk_sglue+0xc>
 8005c58:	4630      	mov	r0, r6
 8005c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d907      	bls.n	8005c74 <_fwalk_sglue+0x38>
 8005c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	d003      	beq.n	8005c74 <_fwalk_sglue+0x38>
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4638      	mov	r0, r7
 8005c70:	47c0      	blx	r8
 8005c72:	4306      	orrs	r6, r0
 8005c74:	3568      	adds	r5, #104	; 0x68
 8005c76:	e7e9      	b.n	8005c4c <_fwalk_sglue+0x10>

08005c78 <iprintf>:
 8005c78:	b40f      	push	{r0, r1, r2, r3}
 8005c7a:	b507      	push	{r0, r1, r2, lr}
 8005c7c:	4906      	ldr	r1, [pc, #24]	; (8005c98 <iprintf+0x20>)
 8005c7e:	ab04      	add	r3, sp, #16
 8005c80:	6808      	ldr	r0, [r1, #0]
 8005c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c86:	6881      	ldr	r1, [r0, #8]
 8005c88:	9301      	str	r3, [sp, #4]
 8005c8a:	f000 fb0b 	bl	80062a4 <_vfiprintf_r>
 8005c8e:	b003      	add	sp, #12
 8005c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c94:	b004      	add	sp, #16
 8005c96:	4770      	bx	lr
 8005c98:	20000080 	.word	0x20000080

08005c9c <_puts_r>:
 8005c9c:	6a03      	ldr	r3, [r0, #32]
 8005c9e:	b570      	push	{r4, r5, r6, lr}
 8005ca0:	6884      	ldr	r4, [r0, #8]
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	460e      	mov	r6, r1
 8005ca6:	b90b      	cbnz	r3, 8005cac <_puts_r+0x10>
 8005ca8:	f7ff ffb0 	bl	8005c0c <__sinit>
 8005cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cae:	07db      	lsls	r3, r3, #31
 8005cb0:	d405      	bmi.n	8005cbe <_puts_r+0x22>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	0598      	lsls	r0, r3, #22
 8005cb6:	d402      	bmi.n	8005cbe <_puts_r+0x22>
 8005cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cba:	f000 f99b 	bl	8005ff4 <__retarget_lock_acquire_recursive>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	0719      	lsls	r1, r3, #28
 8005cc2:	d513      	bpl.n	8005cec <_puts_r+0x50>
 8005cc4:	6923      	ldr	r3, [r4, #16]
 8005cc6:	b18b      	cbz	r3, 8005cec <_puts_r+0x50>
 8005cc8:	3e01      	subs	r6, #1
 8005cca:	68a3      	ldr	r3, [r4, #8]
 8005ccc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	60a3      	str	r3, [r4, #8]
 8005cd4:	b9e9      	cbnz	r1, 8005d12 <_puts_r+0x76>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da2e      	bge.n	8005d38 <_puts_r+0x9c>
 8005cda:	4622      	mov	r2, r4
 8005cdc:	210a      	movs	r1, #10
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f87b 	bl	8005dda <__swbuf_r>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d007      	beq.n	8005cf8 <_puts_r+0x5c>
 8005ce8:	250a      	movs	r5, #10
 8005cea:	e007      	b.n	8005cfc <_puts_r+0x60>
 8005cec:	4621      	mov	r1, r4
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 f8b0 	bl	8005e54 <__swsetup_r>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d0e7      	beq.n	8005cc8 <_puts_r+0x2c>
 8005cf8:	f04f 35ff 	mov.w	r5, #4294967295
 8005cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cfe:	07da      	lsls	r2, r3, #31
 8005d00:	d405      	bmi.n	8005d0e <_puts_r+0x72>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	059b      	lsls	r3, r3, #22
 8005d06:	d402      	bmi.n	8005d0e <_puts_r+0x72>
 8005d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d0a:	f000 f974 	bl	8005ff6 <__retarget_lock_release_recursive>
 8005d0e:	4628      	mov	r0, r5
 8005d10:	bd70      	pop	{r4, r5, r6, pc}
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da04      	bge.n	8005d20 <_puts_r+0x84>
 8005d16:	69a2      	ldr	r2, [r4, #24]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	dc06      	bgt.n	8005d2a <_puts_r+0x8e>
 8005d1c:	290a      	cmp	r1, #10
 8005d1e:	d004      	beq.n	8005d2a <_puts_r+0x8e>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	6022      	str	r2, [r4, #0]
 8005d26:	7019      	strb	r1, [r3, #0]
 8005d28:	e7cf      	b.n	8005cca <_puts_r+0x2e>
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f000 f854 	bl	8005dda <__swbuf_r>
 8005d32:	3001      	adds	r0, #1
 8005d34:	d1c9      	bne.n	8005cca <_puts_r+0x2e>
 8005d36:	e7df      	b.n	8005cf8 <_puts_r+0x5c>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	250a      	movs	r5, #10
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	6022      	str	r2, [r4, #0]
 8005d40:	701d      	strb	r5, [r3, #0]
 8005d42:	e7db      	b.n	8005cfc <_puts_r+0x60>

08005d44 <puts>:
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <puts+0xc>)
 8005d46:	4601      	mov	r1, r0
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	f7ff bfa7 	b.w	8005c9c <_puts_r>
 8005d4e:	bf00      	nop
 8005d50:	20000080 	.word	0x20000080

08005d54 <__sread>:
 8005d54:	b510      	push	{r4, lr}
 8005d56:	460c      	mov	r4, r1
 8005d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5c:	f000 f8fc 	bl	8005f58 <_read_r>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	bfab      	itete	ge
 8005d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d66:	89a3      	ldrhlt	r3, [r4, #12]
 8005d68:	181b      	addge	r3, r3, r0
 8005d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d6e:	bfac      	ite	ge
 8005d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d72:	81a3      	strhlt	r3, [r4, #12]
 8005d74:	bd10      	pop	{r4, pc}

08005d76 <__swrite>:
 8005d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7a:	461f      	mov	r7, r3
 8005d7c:	898b      	ldrh	r3, [r1, #12]
 8005d7e:	05db      	lsls	r3, r3, #23
 8005d80:	4605      	mov	r5, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4616      	mov	r6, r2
 8005d86:	d505      	bpl.n	8005d94 <__swrite+0x1e>
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f000 f8d0 	bl	8005f34 <_lseek_r>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	4632      	mov	r2, r6
 8005da2:	463b      	mov	r3, r7
 8005da4:	4628      	mov	r0, r5
 8005da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005daa:	f000 b8e7 	b.w	8005f7c <_write_r>

08005dae <__sseek>:
 8005dae:	b510      	push	{r4, lr}
 8005db0:	460c      	mov	r4, r1
 8005db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db6:	f000 f8bd 	bl	8005f34 <_lseek_r>
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	bf15      	itete	ne
 8005dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dca:	81a3      	strheq	r3, [r4, #12]
 8005dcc:	bf18      	it	ne
 8005dce:	81a3      	strhne	r3, [r4, #12]
 8005dd0:	bd10      	pop	{r4, pc}

08005dd2 <__sclose>:
 8005dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd6:	f000 b89d 	b.w	8005f14 <_close_r>

08005dda <__swbuf_r>:
 8005dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ddc:	460e      	mov	r6, r1
 8005dde:	4614      	mov	r4, r2
 8005de0:	4605      	mov	r5, r0
 8005de2:	b118      	cbz	r0, 8005dec <__swbuf_r+0x12>
 8005de4:	6a03      	ldr	r3, [r0, #32]
 8005de6:	b90b      	cbnz	r3, 8005dec <__swbuf_r+0x12>
 8005de8:	f7ff ff10 	bl	8005c0c <__sinit>
 8005dec:	69a3      	ldr	r3, [r4, #24]
 8005dee:	60a3      	str	r3, [r4, #8]
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	071a      	lsls	r2, r3, #28
 8005df4:	d525      	bpl.n	8005e42 <__swbuf_r+0x68>
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	b31b      	cbz	r3, 8005e42 <__swbuf_r+0x68>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	1a98      	subs	r0, r3, r2
 8005e00:	6963      	ldr	r3, [r4, #20]
 8005e02:	b2f6      	uxtb	r6, r6
 8005e04:	4283      	cmp	r3, r0
 8005e06:	4637      	mov	r7, r6
 8005e08:	dc04      	bgt.n	8005e14 <__swbuf_r+0x3a>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f000 fd79 	bl	8006904 <_fflush_r>
 8005e12:	b9e0      	cbnz	r0, 8005e4e <__swbuf_r+0x74>
 8005e14:	68a3      	ldr	r3, [r4, #8]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	60a3      	str	r3, [r4, #8]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	701e      	strb	r6, [r3, #0]
 8005e22:	6962      	ldr	r2, [r4, #20]
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d004      	beq.n	8005e34 <__swbuf_r+0x5a>
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	07db      	lsls	r3, r3, #31
 8005e2e:	d506      	bpl.n	8005e3e <__swbuf_r+0x64>
 8005e30:	2e0a      	cmp	r6, #10
 8005e32:	d104      	bne.n	8005e3e <__swbuf_r+0x64>
 8005e34:	4621      	mov	r1, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	f000 fd64 	bl	8006904 <_fflush_r>
 8005e3c:	b938      	cbnz	r0, 8005e4e <__swbuf_r+0x74>
 8005e3e:	4638      	mov	r0, r7
 8005e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e42:	4621      	mov	r1, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 f805 	bl	8005e54 <__swsetup_r>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d0d5      	beq.n	8005dfa <__swbuf_r+0x20>
 8005e4e:	f04f 37ff 	mov.w	r7, #4294967295
 8005e52:	e7f4      	b.n	8005e3e <__swbuf_r+0x64>

08005e54 <__swsetup_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4b2a      	ldr	r3, [pc, #168]	; (8005f00 <__swsetup_r+0xac>)
 8005e58:	4605      	mov	r5, r0
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	b118      	cbz	r0, 8005e68 <__swsetup_r+0x14>
 8005e60:	6a03      	ldr	r3, [r0, #32]
 8005e62:	b90b      	cbnz	r3, 8005e68 <__swsetup_r+0x14>
 8005e64:	f7ff fed2 	bl	8005c0c <__sinit>
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e6e:	0718      	lsls	r0, r3, #28
 8005e70:	d422      	bmi.n	8005eb8 <__swsetup_r+0x64>
 8005e72:	06d9      	lsls	r1, r3, #27
 8005e74:	d407      	bmi.n	8005e86 <__swsetup_r+0x32>
 8005e76:	2309      	movs	r3, #9
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e7e:	81a3      	strh	r3, [r4, #12]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	e034      	b.n	8005ef0 <__swsetup_r+0x9c>
 8005e86:	0758      	lsls	r0, r3, #29
 8005e88:	d512      	bpl.n	8005eb0 <__swsetup_r+0x5c>
 8005e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e8c:	b141      	cbz	r1, 8005ea0 <__swsetup_r+0x4c>
 8005e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e92:	4299      	cmp	r1, r3
 8005e94:	d002      	beq.n	8005e9c <__swsetup_r+0x48>
 8005e96:	4628      	mov	r0, r5
 8005e98:	f000 f8da 	bl	8006050 <_free_r>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6363      	str	r3, [r4, #52]	; 0x34
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6063      	str	r3, [r4, #4]
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f043 0308 	orr.w	r3, r3, #8
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	b94b      	cbnz	r3, 8005ed0 <__swsetup_r+0x7c>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec6:	d003      	beq.n	8005ed0 <__swsetup_r+0x7c>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fd7a 	bl	80069c4 <__smakebuf_r>
 8005ed0:	89a0      	ldrh	r0, [r4, #12]
 8005ed2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ed6:	f010 0301 	ands.w	r3, r0, #1
 8005eda:	d00a      	beq.n	8005ef2 <__swsetup_r+0x9e>
 8005edc:	2300      	movs	r3, #0
 8005ede:	60a3      	str	r3, [r4, #8]
 8005ee0:	6963      	ldr	r3, [r4, #20]
 8005ee2:	425b      	negs	r3, r3
 8005ee4:	61a3      	str	r3, [r4, #24]
 8005ee6:	6923      	ldr	r3, [r4, #16]
 8005ee8:	b943      	cbnz	r3, 8005efc <__swsetup_r+0xa8>
 8005eea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005eee:	d1c4      	bne.n	8005e7a <__swsetup_r+0x26>
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
 8005ef2:	0781      	lsls	r1, r0, #30
 8005ef4:	bf58      	it	pl
 8005ef6:	6963      	ldrpl	r3, [r4, #20]
 8005ef8:	60a3      	str	r3, [r4, #8]
 8005efa:	e7f4      	b.n	8005ee6 <__swsetup_r+0x92>
 8005efc:	2000      	movs	r0, #0
 8005efe:	e7f7      	b.n	8005ef0 <__swsetup_r+0x9c>
 8005f00:	20000080 	.word	0x20000080

08005f04 <memset>:
 8005f04:	4402      	add	r2, r0
 8005f06:	4603      	mov	r3, r0
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d100      	bne.n	8005f0e <memset+0xa>
 8005f0c:	4770      	bx	lr
 8005f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f12:	e7f9      	b.n	8005f08 <memset+0x4>

08005f14 <_close_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d06      	ldr	r5, [pc, #24]	; (8005f30 <_close_r+0x1c>)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	f7fb f920 	bl	8001164 <_close>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_close_r+0x1a>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_close_r+0x1a>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	2000ad90 	.word	0x2000ad90

08005f34 <_lseek_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d07      	ldr	r5, [pc, #28]	; (8005f54 <_lseek_r+0x20>)
 8005f38:	4604      	mov	r4, r0
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f7fb f935 	bl	80011b2 <_lseek>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_lseek_r+0x1e>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_lseek_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	2000ad90 	.word	0x2000ad90

08005f58 <_read_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d07      	ldr	r5, [pc, #28]	; (8005f78 <_read_r+0x20>)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4611      	mov	r1, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fb f8c3 	bl	80010f2 <_read>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_read_r+0x1e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_read_r+0x1e>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	2000ad90 	.word	0x2000ad90

08005f7c <_write_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d07      	ldr	r5, [pc, #28]	; (8005f9c <_write_r+0x20>)
 8005f80:	4604      	mov	r4, r0
 8005f82:	4608      	mov	r0, r1
 8005f84:	4611      	mov	r1, r2
 8005f86:	2200      	movs	r2, #0
 8005f88:	602a      	str	r2, [r5, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f7fb f8ce 	bl	800112c <_write>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_write_r+0x1e>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_write_r+0x1e>
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	2000ad90 	.word	0x2000ad90

08005fa0 <__errno>:
 8005fa0:	4b01      	ldr	r3, [pc, #4]	; (8005fa8 <__errno+0x8>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000080 	.word	0x20000080

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4d0d      	ldr	r5, [pc, #52]	; (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	; (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4d0b      	ldr	r5, [pc, #44]	; (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	; (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f000 fdba 	bl	8006b38 <_init>
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2600      	movs	r6, #0
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	08006fac 	.word	0x08006fac
 8005fe8:	08006fac 	.word	0x08006fac
 8005fec:	08006fac 	.word	0x08006fac
 8005ff0:	08006fb0 	.word	0x08006fb0

08005ff4 <__retarget_lock_acquire_recursive>:
 8005ff4:	4770      	bx	lr

08005ff6 <__retarget_lock_release_recursive>:
 8005ff6:	4770      	bx	lr

08005ff8 <memcpy>:
 8005ff8:	440a      	add	r2, r1
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006000:	d100      	bne.n	8006004 <memcpy+0xc>
 8006002:	4770      	bx	lr
 8006004:	b510      	push	{r4, lr}
 8006006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800600a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800600e:	4291      	cmp	r1, r2
 8006010:	d1f9      	bne.n	8006006 <memcpy+0xe>
 8006012:	bd10      	pop	{r4, pc}

08006014 <__assert_func>:
 8006014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006016:	4614      	mov	r4, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <__assert_func+0x2c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4605      	mov	r5, r0
 8006020:	68d8      	ldr	r0, [r3, #12]
 8006022:	b14c      	cbz	r4, 8006038 <__assert_func+0x24>
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <__assert_func+0x30>)
 8006026:	9100      	str	r1, [sp, #0]
 8006028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800602c:	4906      	ldr	r1, [pc, #24]	; (8006048 <__assert_func+0x34>)
 800602e:	462b      	mov	r3, r5
 8006030:	f000 fc90 	bl	8006954 <fiprintf>
 8006034:	f000 fd34 	bl	8006aa0 <abort>
 8006038:	4b04      	ldr	r3, [pc, #16]	; (800604c <__assert_func+0x38>)
 800603a:	461c      	mov	r4, r3
 800603c:	e7f3      	b.n	8006026 <__assert_func+0x12>
 800603e:	bf00      	nop
 8006040:	20000080 	.word	0x20000080
 8006044:	08006f33 	.word	0x08006f33
 8006048:	08006f40 	.word	0x08006f40
 800604c:	08006f6e 	.word	0x08006f6e

08006050 <_free_r>:
 8006050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006052:	2900      	cmp	r1, #0
 8006054:	d044      	beq.n	80060e0 <_free_r+0x90>
 8006056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605a:	9001      	str	r0, [sp, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f1a1 0404 	sub.w	r4, r1, #4
 8006062:	bfb8      	it	lt
 8006064:	18e4      	addlt	r4, r4, r3
 8006066:	f000 f8e7 	bl	8006238 <__malloc_lock>
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <_free_r+0x94>)
 800606c:	9801      	ldr	r0, [sp, #4]
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	b933      	cbnz	r3, 8006080 <_free_r+0x30>
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	6014      	str	r4, [r2, #0]
 8006076:	b003      	add	sp, #12
 8006078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800607c:	f000 b8e2 	b.w	8006244 <__malloc_unlock>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d908      	bls.n	8006096 <_free_r+0x46>
 8006084:	6825      	ldr	r5, [r4, #0]
 8006086:	1961      	adds	r1, r4, r5
 8006088:	428b      	cmp	r3, r1
 800608a:	bf01      	itttt	eq
 800608c:	6819      	ldreq	r1, [r3, #0]
 800608e:	685b      	ldreq	r3, [r3, #4]
 8006090:	1949      	addeq	r1, r1, r5
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	e7ed      	b.n	8006072 <_free_r+0x22>
 8006096:	461a      	mov	r2, r3
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	b10b      	cbz	r3, 80060a0 <_free_r+0x50>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d9fa      	bls.n	8006096 <_free_r+0x46>
 80060a0:	6811      	ldr	r1, [r2, #0]
 80060a2:	1855      	adds	r5, r2, r1
 80060a4:	42a5      	cmp	r5, r4
 80060a6:	d10b      	bne.n	80060c0 <_free_r+0x70>
 80060a8:	6824      	ldr	r4, [r4, #0]
 80060aa:	4421      	add	r1, r4
 80060ac:	1854      	adds	r4, r2, r1
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	d1e0      	bne.n	8006076 <_free_r+0x26>
 80060b4:	681c      	ldr	r4, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	6053      	str	r3, [r2, #4]
 80060ba:	440c      	add	r4, r1
 80060bc:	6014      	str	r4, [r2, #0]
 80060be:	e7da      	b.n	8006076 <_free_r+0x26>
 80060c0:	d902      	bls.n	80060c8 <_free_r+0x78>
 80060c2:	230c      	movs	r3, #12
 80060c4:	6003      	str	r3, [r0, #0]
 80060c6:	e7d6      	b.n	8006076 <_free_r+0x26>
 80060c8:	6825      	ldr	r5, [r4, #0]
 80060ca:	1961      	adds	r1, r4, r5
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf04      	itt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	6063      	str	r3, [r4, #4]
 80060d6:	bf04      	itt	eq
 80060d8:	1949      	addeq	r1, r1, r5
 80060da:	6021      	streq	r1, [r4, #0]
 80060dc:	6054      	str	r4, [r2, #4]
 80060de:	e7ca      	b.n	8006076 <_free_r+0x26>
 80060e0:	b003      	add	sp, #12
 80060e2:	bd30      	pop	{r4, r5, pc}
 80060e4:	2000ad98 	.word	0x2000ad98

080060e8 <malloc>:
 80060e8:	4b02      	ldr	r3, [pc, #8]	; (80060f4 <malloc+0xc>)
 80060ea:	4601      	mov	r1, r0
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	f000 b823 	b.w	8006138 <_malloc_r>
 80060f2:	bf00      	nop
 80060f4:	20000080 	.word	0x20000080

080060f8 <sbrk_aligned>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	4e0e      	ldr	r6, [pc, #56]	; (8006134 <sbrk_aligned+0x3c>)
 80060fc:	460c      	mov	r4, r1
 80060fe:	6831      	ldr	r1, [r6, #0]
 8006100:	4605      	mov	r5, r0
 8006102:	b911      	cbnz	r1, 800610a <sbrk_aligned+0x12>
 8006104:	f000 fcbc 	bl	8006a80 <_sbrk_r>
 8006108:	6030      	str	r0, [r6, #0]
 800610a:	4621      	mov	r1, r4
 800610c:	4628      	mov	r0, r5
 800610e:	f000 fcb7 	bl	8006a80 <_sbrk_r>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	d00a      	beq.n	800612c <sbrk_aligned+0x34>
 8006116:	1cc4      	adds	r4, r0, #3
 8006118:	f024 0403 	bic.w	r4, r4, #3
 800611c:	42a0      	cmp	r0, r4
 800611e:	d007      	beq.n	8006130 <sbrk_aligned+0x38>
 8006120:	1a21      	subs	r1, r4, r0
 8006122:	4628      	mov	r0, r5
 8006124:	f000 fcac 	bl	8006a80 <_sbrk_r>
 8006128:	3001      	adds	r0, #1
 800612a:	d101      	bne.n	8006130 <sbrk_aligned+0x38>
 800612c:	f04f 34ff 	mov.w	r4, #4294967295
 8006130:	4620      	mov	r0, r4
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	2000ad9c 	.word	0x2000ad9c

08006138 <_malloc_r>:
 8006138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800613c:	1ccd      	adds	r5, r1, #3
 800613e:	f025 0503 	bic.w	r5, r5, #3
 8006142:	3508      	adds	r5, #8
 8006144:	2d0c      	cmp	r5, #12
 8006146:	bf38      	it	cc
 8006148:	250c      	movcc	r5, #12
 800614a:	2d00      	cmp	r5, #0
 800614c:	4607      	mov	r7, r0
 800614e:	db01      	blt.n	8006154 <_malloc_r+0x1c>
 8006150:	42a9      	cmp	r1, r5
 8006152:	d905      	bls.n	8006160 <_malloc_r+0x28>
 8006154:	230c      	movs	r3, #12
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	2600      	movs	r6, #0
 800615a:	4630      	mov	r0, r6
 800615c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006160:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006234 <_malloc_r+0xfc>
 8006164:	f000 f868 	bl	8006238 <__malloc_lock>
 8006168:	f8d8 3000 	ldr.w	r3, [r8]
 800616c:	461c      	mov	r4, r3
 800616e:	bb5c      	cbnz	r4, 80061c8 <_malloc_r+0x90>
 8006170:	4629      	mov	r1, r5
 8006172:	4638      	mov	r0, r7
 8006174:	f7ff ffc0 	bl	80060f8 <sbrk_aligned>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	4604      	mov	r4, r0
 800617c:	d155      	bne.n	800622a <_malloc_r+0xf2>
 800617e:	f8d8 4000 	ldr.w	r4, [r8]
 8006182:	4626      	mov	r6, r4
 8006184:	2e00      	cmp	r6, #0
 8006186:	d145      	bne.n	8006214 <_malloc_r+0xdc>
 8006188:	2c00      	cmp	r4, #0
 800618a:	d048      	beq.n	800621e <_malloc_r+0xe6>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	4631      	mov	r1, r6
 8006190:	4638      	mov	r0, r7
 8006192:	eb04 0903 	add.w	r9, r4, r3
 8006196:	f000 fc73 	bl	8006a80 <_sbrk_r>
 800619a:	4581      	cmp	r9, r0
 800619c:	d13f      	bne.n	800621e <_malloc_r+0xe6>
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	1a6d      	subs	r5, r5, r1
 80061a2:	4629      	mov	r1, r5
 80061a4:	4638      	mov	r0, r7
 80061a6:	f7ff ffa7 	bl	80060f8 <sbrk_aligned>
 80061aa:	3001      	adds	r0, #1
 80061ac:	d037      	beq.n	800621e <_malloc_r+0xe6>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	442b      	add	r3, r5
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	f8d8 3000 	ldr.w	r3, [r8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d038      	beq.n	800622e <_malloc_r+0xf6>
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	42a2      	cmp	r2, r4
 80061c0:	d12b      	bne.n	800621a <_malloc_r+0xe2>
 80061c2:	2200      	movs	r2, #0
 80061c4:	605a      	str	r2, [r3, #4]
 80061c6:	e00f      	b.n	80061e8 <_malloc_r+0xb0>
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	1b52      	subs	r2, r2, r5
 80061cc:	d41f      	bmi.n	800620e <_malloc_r+0xd6>
 80061ce:	2a0b      	cmp	r2, #11
 80061d0:	d917      	bls.n	8006202 <_malloc_r+0xca>
 80061d2:	1961      	adds	r1, r4, r5
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	6025      	str	r5, [r4, #0]
 80061d8:	bf18      	it	ne
 80061da:	6059      	strne	r1, [r3, #4]
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	bf08      	it	eq
 80061e0:	f8c8 1000 	streq.w	r1, [r8]
 80061e4:	5162      	str	r2, [r4, r5]
 80061e6:	604b      	str	r3, [r1, #4]
 80061e8:	4638      	mov	r0, r7
 80061ea:	f104 060b 	add.w	r6, r4, #11
 80061ee:	f000 f829 	bl	8006244 <__malloc_unlock>
 80061f2:	f026 0607 	bic.w	r6, r6, #7
 80061f6:	1d23      	adds	r3, r4, #4
 80061f8:	1af2      	subs	r2, r6, r3
 80061fa:	d0ae      	beq.n	800615a <_malloc_r+0x22>
 80061fc:	1b9b      	subs	r3, r3, r6
 80061fe:	50a3      	str	r3, [r4, r2]
 8006200:	e7ab      	b.n	800615a <_malloc_r+0x22>
 8006202:	42a3      	cmp	r3, r4
 8006204:	6862      	ldr	r2, [r4, #4]
 8006206:	d1dd      	bne.n	80061c4 <_malloc_r+0x8c>
 8006208:	f8c8 2000 	str.w	r2, [r8]
 800620c:	e7ec      	b.n	80061e8 <_malloc_r+0xb0>
 800620e:	4623      	mov	r3, r4
 8006210:	6864      	ldr	r4, [r4, #4]
 8006212:	e7ac      	b.n	800616e <_malloc_r+0x36>
 8006214:	4634      	mov	r4, r6
 8006216:	6876      	ldr	r6, [r6, #4]
 8006218:	e7b4      	b.n	8006184 <_malloc_r+0x4c>
 800621a:	4613      	mov	r3, r2
 800621c:	e7cc      	b.n	80061b8 <_malloc_r+0x80>
 800621e:	230c      	movs	r3, #12
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	4638      	mov	r0, r7
 8006224:	f000 f80e 	bl	8006244 <__malloc_unlock>
 8006228:	e797      	b.n	800615a <_malloc_r+0x22>
 800622a:	6025      	str	r5, [r4, #0]
 800622c:	e7dc      	b.n	80061e8 <_malloc_r+0xb0>
 800622e:	605b      	str	r3, [r3, #4]
 8006230:	deff      	udf	#255	; 0xff
 8006232:	bf00      	nop
 8006234:	2000ad98 	.word	0x2000ad98

08006238 <__malloc_lock>:
 8006238:	4801      	ldr	r0, [pc, #4]	; (8006240 <__malloc_lock+0x8>)
 800623a:	f7ff bedb 	b.w	8005ff4 <__retarget_lock_acquire_recursive>
 800623e:	bf00      	nop
 8006240:	2000ad94 	.word	0x2000ad94

08006244 <__malloc_unlock>:
 8006244:	4801      	ldr	r0, [pc, #4]	; (800624c <__malloc_unlock+0x8>)
 8006246:	f7ff bed6 	b.w	8005ff6 <__retarget_lock_release_recursive>
 800624a:	bf00      	nop
 800624c:	2000ad94 	.word	0x2000ad94

08006250 <__sfputc_r>:
 8006250:	6893      	ldr	r3, [r2, #8]
 8006252:	3b01      	subs	r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	b410      	push	{r4}
 8006258:	6093      	str	r3, [r2, #8]
 800625a:	da08      	bge.n	800626e <__sfputc_r+0x1e>
 800625c:	6994      	ldr	r4, [r2, #24]
 800625e:	42a3      	cmp	r3, r4
 8006260:	db01      	blt.n	8006266 <__sfputc_r+0x16>
 8006262:	290a      	cmp	r1, #10
 8006264:	d103      	bne.n	800626e <__sfputc_r+0x1e>
 8006266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626a:	f7ff bdb6 	b.w	8005dda <__swbuf_r>
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	1c58      	adds	r0, r3, #1
 8006272:	6010      	str	r0, [r2, #0]
 8006274:	7019      	strb	r1, [r3, #0]
 8006276:	4608      	mov	r0, r1
 8006278:	f85d 4b04 	ldr.w	r4, [sp], #4
 800627c:	4770      	bx	lr

0800627e <__sfputs_r>:
 800627e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006280:	4606      	mov	r6, r0
 8006282:	460f      	mov	r7, r1
 8006284:	4614      	mov	r4, r2
 8006286:	18d5      	adds	r5, r2, r3
 8006288:	42ac      	cmp	r4, r5
 800628a:	d101      	bne.n	8006290 <__sfputs_r+0x12>
 800628c:	2000      	movs	r0, #0
 800628e:	e007      	b.n	80062a0 <__sfputs_r+0x22>
 8006290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006294:	463a      	mov	r2, r7
 8006296:	4630      	mov	r0, r6
 8006298:	f7ff ffda 	bl	8006250 <__sfputc_r>
 800629c:	1c43      	adds	r3, r0, #1
 800629e:	d1f3      	bne.n	8006288 <__sfputs_r+0xa>
 80062a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062a4 <_vfiprintf_r>:
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	460d      	mov	r5, r1
 80062aa:	b09d      	sub	sp, #116	; 0x74
 80062ac:	4614      	mov	r4, r2
 80062ae:	4698      	mov	r8, r3
 80062b0:	4606      	mov	r6, r0
 80062b2:	b118      	cbz	r0, 80062bc <_vfiprintf_r+0x18>
 80062b4:	6a03      	ldr	r3, [r0, #32]
 80062b6:	b90b      	cbnz	r3, 80062bc <_vfiprintf_r+0x18>
 80062b8:	f7ff fca8 	bl	8005c0c <__sinit>
 80062bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062be:	07d9      	lsls	r1, r3, #31
 80062c0:	d405      	bmi.n	80062ce <_vfiprintf_r+0x2a>
 80062c2:	89ab      	ldrh	r3, [r5, #12]
 80062c4:	059a      	lsls	r2, r3, #22
 80062c6:	d402      	bmi.n	80062ce <_vfiprintf_r+0x2a>
 80062c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ca:	f7ff fe93 	bl	8005ff4 <__retarget_lock_acquire_recursive>
 80062ce:	89ab      	ldrh	r3, [r5, #12]
 80062d0:	071b      	lsls	r3, r3, #28
 80062d2:	d501      	bpl.n	80062d8 <_vfiprintf_r+0x34>
 80062d4:	692b      	ldr	r3, [r5, #16]
 80062d6:	b99b      	cbnz	r3, 8006300 <_vfiprintf_r+0x5c>
 80062d8:	4629      	mov	r1, r5
 80062da:	4630      	mov	r0, r6
 80062dc:	f7ff fdba 	bl	8005e54 <__swsetup_r>
 80062e0:	b170      	cbz	r0, 8006300 <_vfiprintf_r+0x5c>
 80062e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e4:	07dc      	lsls	r4, r3, #31
 80062e6:	d504      	bpl.n	80062f2 <_vfiprintf_r+0x4e>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	b01d      	add	sp, #116	; 0x74
 80062ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f2:	89ab      	ldrh	r3, [r5, #12]
 80062f4:	0598      	lsls	r0, r3, #22
 80062f6:	d4f7      	bmi.n	80062e8 <_vfiprintf_r+0x44>
 80062f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062fa:	f7ff fe7c 	bl	8005ff6 <__retarget_lock_release_recursive>
 80062fe:	e7f3      	b.n	80062e8 <_vfiprintf_r+0x44>
 8006300:	2300      	movs	r3, #0
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	2320      	movs	r3, #32
 8006306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800630a:	f8cd 800c 	str.w	r8, [sp, #12]
 800630e:	2330      	movs	r3, #48	; 0x30
 8006310:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80064c4 <_vfiprintf_r+0x220>
 8006314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006318:	f04f 0901 	mov.w	r9, #1
 800631c:	4623      	mov	r3, r4
 800631e:	469a      	mov	sl, r3
 8006320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006324:	b10a      	cbz	r2, 800632a <_vfiprintf_r+0x86>
 8006326:	2a25      	cmp	r2, #37	; 0x25
 8006328:	d1f9      	bne.n	800631e <_vfiprintf_r+0x7a>
 800632a:	ebba 0b04 	subs.w	fp, sl, r4
 800632e:	d00b      	beq.n	8006348 <_vfiprintf_r+0xa4>
 8006330:	465b      	mov	r3, fp
 8006332:	4622      	mov	r2, r4
 8006334:	4629      	mov	r1, r5
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff ffa1 	bl	800627e <__sfputs_r>
 800633c:	3001      	adds	r0, #1
 800633e:	f000 80a9 	beq.w	8006494 <_vfiprintf_r+0x1f0>
 8006342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006344:	445a      	add	r2, fp
 8006346:	9209      	str	r2, [sp, #36]	; 0x24
 8006348:	f89a 3000 	ldrb.w	r3, [sl]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80a1 	beq.w	8006494 <_vfiprintf_r+0x1f0>
 8006352:	2300      	movs	r3, #0
 8006354:	f04f 32ff 	mov.w	r2, #4294967295
 8006358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800635c:	f10a 0a01 	add.w	sl, sl, #1
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	9307      	str	r3, [sp, #28]
 8006364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006368:	931a      	str	r3, [sp, #104]	; 0x68
 800636a:	4654      	mov	r4, sl
 800636c:	2205      	movs	r2, #5
 800636e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006372:	4854      	ldr	r0, [pc, #336]	; (80064c4 <_vfiprintf_r+0x220>)
 8006374:	f7f9 ff4c 	bl	8000210 <memchr>
 8006378:	9a04      	ldr	r2, [sp, #16]
 800637a:	b9d8      	cbnz	r0, 80063b4 <_vfiprintf_r+0x110>
 800637c:	06d1      	lsls	r1, r2, #27
 800637e:	bf44      	itt	mi
 8006380:	2320      	movmi	r3, #32
 8006382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006386:	0713      	lsls	r3, r2, #28
 8006388:	bf44      	itt	mi
 800638a:	232b      	movmi	r3, #43	; 0x2b
 800638c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006390:	f89a 3000 	ldrb.w	r3, [sl]
 8006394:	2b2a      	cmp	r3, #42	; 0x2a
 8006396:	d015      	beq.n	80063c4 <_vfiprintf_r+0x120>
 8006398:	9a07      	ldr	r2, [sp, #28]
 800639a:	4654      	mov	r4, sl
 800639c:	2000      	movs	r0, #0
 800639e:	f04f 0c0a 	mov.w	ip, #10
 80063a2:	4621      	mov	r1, r4
 80063a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a8:	3b30      	subs	r3, #48	; 0x30
 80063aa:	2b09      	cmp	r3, #9
 80063ac:	d94d      	bls.n	800644a <_vfiprintf_r+0x1a6>
 80063ae:	b1b0      	cbz	r0, 80063de <_vfiprintf_r+0x13a>
 80063b0:	9207      	str	r2, [sp, #28]
 80063b2:	e014      	b.n	80063de <_vfiprintf_r+0x13a>
 80063b4:	eba0 0308 	sub.w	r3, r0, r8
 80063b8:	fa09 f303 	lsl.w	r3, r9, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	46a2      	mov	sl, r4
 80063c2:	e7d2      	b.n	800636a <_vfiprintf_r+0xc6>
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	1d19      	adds	r1, r3, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	9103      	str	r1, [sp, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bfbb      	ittet	lt
 80063d0:	425b      	neglt	r3, r3
 80063d2:	f042 0202 	orrlt.w	r2, r2, #2
 80063d6:	9307      	strge	r3, [sp, #28]
 80063d8:	9307      	strlt	r3, [sp, #28]
 80063da:	bfb8      	it	lt
 80063dc:	9204      	strlt	r2, [sp, #16]
 80063de:	7823      	ldrb	r3, [r4, #0]
 80063e0:	2b2e      	cmp	r3, #46	; 0x2e
 80063e2:	d10c      	bne.n	80063fe <_vfiprintf_r+0x15a>
 80063e4:	7863      	ldrb	r3, [r4, #1]
 80063e6:	2b2a      	cmp	r3, #42	; 0x2a
 80063e8:	d134      	bne.n	8006454 <_vfiprintf_r+0x1b0>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	1d1a      	adds	r2, r3, #4
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	9203      	str	r2, [sp, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bfb8      	it	lt
 80063f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80063fa:	3402      	adds	r4, #2
 80063fc:	9305      	str	r3, [sp, #20]
 80063fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80064d4 <_vfiprintf_r+0x230>
 8006402:	7821      	ldrb	r1, [r4, #0]
 8006404:	2203      	movs	r2, #3
 8006406:	4650      	mov	r0, sl
 8006408:	f7f9 ff02 	bl	8000210 <memchr>
 800640c:	b138      	cbz	r0, 800641e <_vfiprintf_r+0x17a>
 800640e:	9b04      	ldr	r3, [sp, #16]
 8006410:	eba0 000a 	sub.w	r0, r0, sl
 8006414:	2240      	movs	r2, #64	; 0x40
 8006416:	4082      	lsls	r2, r0
 8006418:	4313      	orrs	r3, r2
 800641a:	3401      	adds	r4, #1
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006422:	4829      	ldr	r0, [pc, #164]	; (80064c8 <_vfiprintf_r+0x224>)
 8006424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006428:	2206      	movs	r2, #6
 800642a:	f7f9 fef1 	bl	8000210 <memchr>
 800642e:	2800      	cmp	r0, #0
 8006430:	d03f      	beq.n	80064b2 <_vfiprintf_r+0x20e>
 8006432:	4b26      	ldr	r3, [pc, #152]	; (80064cc <_vfiprintf_r+0x228>)
 8006434:	bb1b      	cbnz	r3, 800647e <_vfiprintf_r+0x1da>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	3307      	adds	r3, #7
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	3308      	adds	r3, #8
 8006440:	9303      	str	r3, [sp, #12]
 8006442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006444:	443b      	add	r3, r7
 8006446:	9309      	str	r3, [sp, #36]	; 0x24
 8006448:	e768      	b.n	800631c <_vfiprintf_r+0x78>
 800644a:	fb0c 3202 	mla	r2, ip, r2, r3
 800644e:	460c      	mov	r4, r1
 8006450:	2001      	movs	r0, #1
 8006452:	e7a6      	b.n	80063a2 <_vfiprintf_r+0xfe>
 8006454:	2300      	movs	r3, #0
 8006456:	3401      	adds	r4, #1
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	4619      	mov	r1, r3
 800645c:	f04f 0c0a 	mov.w	ip, #10
 8006460:	4620      	mov	r0, r4
 8006462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006466:	3a30      	subs	r2, #48	; 0x30
 8006468:	2a09      	cmp	r2, #9
 800646a:	d903      	bls.n	8006474 <_vfiprintf_r+0x1d0>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0c6      	beq.n	80063fe <_vfiprintf_r+0x15a>
 8006470:	9105      	str	r1, [sp, #20]
 8006472:	e7c4      	b.n	80063fe <_vfiprintf_r+0x15a>
 8006474:	fb0c 2101 	mla	r1, ip, r1, r2
 8006478:	4604      	mov	r4, r0
 800647a:	2301      	movs	r3, #1
 800647c:	e7f0      	b.n	8006460 <_vfiprintf_r+0x1bc>
 800647e:	ab03      	add	r3, sp, #12
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	462a      	mov	r2, r5
 8006484:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <_vfiprintf_r+0x22c>)
 8006486:	a904      	add	r1, sp, #16
 8006488:	4630      	mov	r0, r6
 800648a:	f3af 8000 	nop.w
 800648e:	4607      	mov	r7, r0
 8006490:	1c78      	adds	r0, r7, #1
 8006492:	d1d6      	bne.n	8006442 <_vfiprintf_r+0x19e>
 8006494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006496:	07d9      	lsls	r1, r3, #31
 8006498:	d405      	bmi.n	80064a6 <_vfiprintf_r+0x202>
 800649a:	89ab      	ldrh	r3, [r5, #12]
 800649c:	059a      	lsls	r2, r3, #22
 800649e:	d402      	bmi.n	80064a6 <_vfiprintf_r+0x202>
 80064a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064a2:	f7ff fda8 	bl	8005ff6 <__retarget_lock_release_recursive>
 80064a6:	89ab      	ldrh	r3, [r5, #12]
 80064a8:	065b      	lsls	r3, r3, #25
 80064aa:	f53f af1d 	bmi.w	80062e8 <_vfiprintf_r+0x44>
 80064ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064b0:	e71c      	b.n	80062ec <_vfiprintf_r+0x48>
 80064b2:	ab03      	add	r3, sp, #12
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	462a      	mov	r2, r5
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <_vfiprintf_r+0x22c>)
 80064ba:	a904      	add	r1, sp, #16
 80064bc:	4630      	mov	r0, r6
 80064be:	f000 f879 	bl	80065b4 <_printf_i>
 80064c2:	e7e4      	b.n	800648e <_vfiprintf_r+0x1ea>
 80064c4:	08006f6f 	.word	0x08006f6f
 80064c8:	08006f79 	.word	0x08006f79
 80064cc:	00000000 	.word	0x00000000
 80064d0:	0800627f 	.word	0x0800627f
 80064d4:	08006f75 	.word	0x08006f75

080064d8 <_printf_common>:
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064dc:	4616      	mov	r6, r2
 80064de:	4699      	mov	r9, r3
 80064e0:	688a      	ldr	r2, [r1, #8]
 80064e2:	690b      	ldr	r3, [r1, #16]
 80064e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	bfb8      	it	lt
 80064ec:	4613      	movlt	r3, r2
 80064ee:	6033      	str	r3, [r6, #0]
 80064f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064f4:	4607      	mov	r7, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	b10a      	cbz	r2, 80064fe <_printf_common+0x26>
 80064fa:	3301      	adds	r3, #1
 80064fc:	6033      	str	r3, [r6, #0]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	0699      	lsls	r1, r3, #26
 8006502:	bf42      	ittt	mi
 8006504:	6833      	ldrmi	r3, [r6, #0]
 8006506:	3302      	addmi	r3, #2
 8006508:	6033      	strmi	r3, [r6, #0]
 800650a:	6825      	ldr	r5, [r4, #0]
 800650c:	f015 0506 	ands.w	r5, r5, #6
 8006510:	d106      	bne.n	8006520 <_printf_common+0x48>
 8006512:	f104 0a19 	add.w	sl, r4, #25
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	6832      	ldr	r2, [r6, #0]
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	42ab      	cmp	r3, r5
 800651e:	dc26      	bgt.n	800656e <_printf_common+0x96>
 8006520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006524:	1e13      	subs	r3, r2, #0
 8006526:	6822      	ldr	r2, [r4, #0]
 8006528:	bf18      	it	ne
 800652a:	2301      	movne	r3, #1
 800652c:	0692      	lsls	r2, r2, #26
 800652e:	d42b      	bmi.n	8006588 <_printf_common+0xb0>
 8006530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006534:	4649      	mov	r1, r9
 8006536:	4638      	mov	r0, r7
 8006538:	47c0      	blx	r8
 800653a:	3001      	adds	r0, #1
 800653c:	d01e      	beq.n	800657c <_printf_common+0xa4>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	6922      	ldr	r2, [r4, #16]
 8006542:	f003 0306 	and.w	r3, r3, #6
 8006546:	2b04      	cmp	r3, #4
 8006548:	bf02      	ittt	eq
 800654a:	68e5      	ldreq	r5, [r4, #12]
 800654c:	6833      	ldreq	r3, [r6, #0]
 800654e:	1aed      	subeq	r5, r5, r3
 8006550:	68a3      	ldr	r3, [r4, #8]
 8006552:	bf0c      	ite	eq
 8006554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006558:	2500      	movne	r5, #0
 800655a:	4293      	cmp	r3, r2
 800655c:	bfc4      	itt	gt
 800655e:	1a9b      	subgt	r3, r3, r2
 8006560:	18ed      	addgt	r5, r5, r3
 8006562:	2600      	movs	r6, #0
 8006564:	341a      	adds	r4, #26
 8006566:	42b5      	cmp	r5, r6
 8006568:	d11a      	bne.n	80065a0 <_printf_common+0xc8>
 800656a:	2000      	movs	r0, #0
 800656c:	e008      	b.n	8006580 <_printf_common+0xa8>
 800656e:	2301      	movs	r3, #1
 8006570:	4652      	mov	r2, sl
 8006572:	4649      	mov	r1, r9
 8006574:	4638      	mov	r0, r7
 8006576:	47c0      	blx	r8
 8006578:	3001      	adds	r0, #1
 800657a:	d103      	bne.n	8006584 <_printf_common+0xac>
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006584:	3501      	adds	r5, #1
 8006586:	e7c6      	b.n	8006516 <_printf_common+0x3e>
 8006588:	18e1      	adds	r1, r4, r3
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	2030      	movs	r0, #48	; 0x30
 800658e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006592:	4422      	add	r2, r4
 8006594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800659c:	3302      	adds	r3, #2
 800659e:	e7c7      	b.n	8006530 <_printf_common+0x58>
 80065a0:	2301      	movs	r3, #1
 80065a2:	4622      	mov	r2, r4
 80065a4:	4649      	mov	r1, r9
 80065a6:	4638      	mov	r0, r7
 80065a8:	47c0      	blx	r8
 80065aa:	3001      	adds	r0, #1
 80065ac:	d0e6      	beq.n	800657c <_printf_common+0xa4>
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7d9      	b.n	8006566 <_printf_common+0x8e>
	...

080065b4 <_printf_i>:
 80065b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	7e0f      	ldrb	r7, [r1, #24]
 80065ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065bc:	2f78      	cmp	r7, #120	; 0x78
 80065be:	4691      	mov	r9, r2
 80065c0:	4680      	mov	r8, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	469a      	mov	sl, r3
 80065c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065ca:	d807      	bhi.n	80065dc <_printf_i+0x28>
 80065cc:	2f62      	cmp	r7, #98	; 0x62
 80065ce:	d80a      	bhi.n	80065e6 <_printf_i+0x32>
 80065d0:	2f00      	cmp	r7, #0
 80065d2:	f000 80d4 	beq.w	800677e <_printf_i+0x1ca>
 80065d6:	2f58      	cmp	r7, #88	; 0x58
 80065d8:	f000 80c0 	beq.w	800675c <_printf_i+0x1a8>
 80065dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065e4:	e03a      	b.n	800665c <_printf_i+0xa8>
 80065e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ea:	2b15      	cmp	r3, #21
 80065ec:	d8f6      	bhi.n	80065dc <_printf_i+0x28>
 80065ee:	a101      	add	r1, pc, #4	; (adr r1, 80065f4 <_printf_i+0x40>)
 80065f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065f4:	0800664d 	.word	0x0800664d
 80065f8:	08006661 	.word	0x08006661
 80065fc:	080065dd 	.word	0x080065dd
 8006600:	080065dd 	.word	0x080065dd
 8006604:	080065dd 	.word	0x080065dd
 8006608:	080065dd 	.word	0x080065dd
 800660c:	08006661 	.word	0x08006661
 8006610:	080065dd 	.word	0x080065dd
 8006614:	080065dd 	.word	0x080065dd
 8006618:	080065dd 	.word	0x080065dd
 800661c:	080065dd 	.word	0x080065dd
 8006620:	08006765 	.word	0x08006765
 8006624:	0800668d 	.word	0x0800668d
 8006628:	0800671f 	.word	0x0800671f
 800662c:	080065dd 	.word	0x080065dd
 8006630:	080065dd 	.word	0x080065dd
 8006634:	08006787 	.word	0x08006787
 8006638:	080065dd 	.word	0x080065dd
 800663c:	0800668d 	.word	0x0800668d
 8006640:	080065dd 	.word	0x080065dd
 8006644:	080065dd 	.word	0x080065dd
 8006648:	08006727 	.word	0x08006727
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	1d1a      	adds	r2, r3, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	602a      	str	r2, [r5, #0]
 8006654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800665c:	2301      	movs	r3, #1
 800665e:	e09f      	b.n	80067a0 <_printf_i+0x1ec>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	0607      	lsls	r7, r0, #24
 8006666:	f103 0104 	add.w	r1, r3, #4
 800666a:	6029      	str	r1, [r5, #0]
 800666c:	d501      	bpl.n	8006672 <_printf_i+0xbe>
 800666e:	681e      	ldr	r6, [r3, #0]
 8006670:	e003      	b.n	800667a <_printf_i+0xc6>
 8006672:	0646      	lsls	r6, r0, #25
 8006674:	d5fb      	bpl.n	800666e <_printf_i+0xba>
 8006676:	f9b3 6000 	ldrsh.w	r6, [r3]
 800667a:	2e00      	cmp	r6, #0
 800667c:	da03      	bge.n	8006686 <_printf_i+0xd2>
 800667e:	232d      	movs	r3, #45	; 0x2d
 8006680:	4276      	negs	r6, r6
 8006682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006686:	485a      	ldr	r0, [pc, #360]	; (80067f0 <_printf_i+0x23c>)
 8006688:	230a      	movs	r3, #10
 800668a:	e012      	b.n	80066b2 <_printf_i+0xfe>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	6820      	ldr	r0, [r4, #0]
 8006690:	1d19      	adds	r1, r3, #4
 8006692:	6029      	str	r1, [r5, #0]
 8006694:	0605      	lsls	r5, r0, #24
 8006696:	d501      	bpl.n	800669c <_printf_i+0xe8>
 8006698:	681e      	ldr	r6, [r3, #0]
 800669a:	e002      	b.n	80066a2 <_printf_i+0xee>
 800669c:	0641      	lsls	r1, r0, #25
 800669e:	d5fb      	bpl.n	8006698 <_printf_i+0xe4>
 80066a0:	881e      	ldrh	r6, [r3, #0]
 80066a2:	4853      	ldr	r0, [pc, #332]	; (80067f0 <_printf_i+0x23c>)
 80066a4:	2f6f      	cmp	r7, #111	; 0x6f
 80066a6:	bf0c      	ite	eq
 80066a8:	2308      	moveq	r3, #8
 80066aa:	230a      	movne	r3, #10
 80066ac:	2100      	movs	r1, #0
 80066ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066b2:	6865      	ldr	r5, [r4, #4]
 80066b4:	60a5      	str	r5, [r4, #8]
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	bfa2      	ittt	ge
 80066ba:	6821      	ldrge	r1, [r4, #0]
 80066bc:	f021 0104 	bicge.w	r1, r1, #4
 80066c0:	6021      	strge	r1, [r4, #0]
 80066c2:	b90e      	cbnz	r6, 80066c8 <_printf_i+0x114>
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	d04b      	beq.n	8006760 <_printf_i+0x1ac>
 80066c8:	4615      	mov	r5, r2
 80066ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80066ce:	fb03 6711 	mls	r7, r3, r1, r6
 80066d2:	5dc7      	ldrb	r7, [r0, r7]
 80066d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066d8:	4637      	mov	r7, r6
 80066da:	42bb      	cmp	r3, r7
 80066dc:	460e      	mov	r6, r1
 80066de:	d9f4      	bls.n	80066ca <_printf_i+0x116>
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d10b      	bne.n	80066fc <_printf_i+0x148>
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	07de      	lsls	r6, r3, #31
 80066e8:	d508      	bpl.n	80066fc <_printf_i+0x148>
 80066ea:	6923      	ldr	r3, [r4, #16]
 80066ec:	6861      	ldr	r1, [r4, #4]
 80066ee:	4299      	cmp	r1, r3
 80066f0:	bfde      	ittt	le
 80066f2:	2330      	movle	r3, #48	; 0x30
 80066f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066fc:	1b52      	subs	r2, r2, r5
 80066fe:	6122      	str	r2, [r4, #16]
 8006700:	f8cd a000 	str.w	sl, [sp]
 8006704:	464b      	mov	r3, r9
 8006706:	aa03      	add	r2, sp, #12
 8006708:	4621      	mov	r1, r4
 800670a:	4640      	mov	r0, r8
 800670c:	f7ff fee4 	bl	80064d8 <_printf_common>
 8006710:	3001      	adds	r0, #1
 8006712:	d14a      	bne.n	80067aa <_printf_i+0x1f6>
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	b004      	add	sp, #16
 800671a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	f043 0320 	orr.w	r3, r3, #32
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	4833      	ldr	r0, [pc, #204]	; (80067f4 <_printf_i+0x240>)
 8006728:	2778      	movs	r7, #120	; 0x78
 800672a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	6829      	ldr	r1, [r5, #0]
 8006732:	061f      	lsls	r7, r3, #24
 8006734:	f851 6b04 	ldr.w	r6, [r1], #4
 8006738:	d402      	bmi.n	8006740 <_printf_i+0x18c>
 800673a:	065f      	lsls	r7, r3, #25
 800673c:	bf48      	it	mi
 800673e:	b2b6      	uxthmi	r6, r6
 8006740:	07df      	lsls	r7, r3, #31
 8006742:	bf48      	it	mi
 8006744:	f043 0320 	orrmi.w	r3, r3, #32
 8006748:	6029      	str	r1, [r5, #0]
 800674a:	bf48      	it	mi
 800674c:	6023      	strmi	r3, [r4, #0]
 800674e:	b91e      	cbnz	r6, 8006758 <_printf_i+0x1a4>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	f023 0320 	bic.w	r3, r3, #32
 8006756:	6023      	str	r3, [r4, #0]
 8006758:	2310      	movs	r3, #16
 800675a:	e7a7      	b.n	80066ac <_printf_i+0xf8>
 800675c:	4824      	ldr	r0, [pc, #144]	; (80067f0 <_printf_i+0x23c>)
 800675e:	e7e4      	b.n	800672a <_printf_i+0x176>
 8006760:	4615      	mov	r5, r2
 8006762:	e7bd      	b.n	80066e0 <_printf_i+0x12c>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	6826      	ldr	r6, [r4, #0]
 8006768:	6961      	ldr	r1, [r4, #20]
 800676a:	1d18      	adds	r0, r3, #4
 800676c:	6028      	str	r0, [r5, #0]
 800676e:	0635      	lsls	r5, r6, #24
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	d501      	bpl.n	8006778 <_printf_i+0x1c4>
 8006774:	6019      	str	r1, [r3, #0]
 8006776:	e002      	b.n	800677e <_printf_i+0x1ca>
 8006778:	0670      	lsls	r0, r6, #25
 800677a:	d5fb      	bpl.n	8006774 <_printf_i+0x1c0>
 800677c:	8019      	strh	r1, [r3, #0]
 800677e:	2300      	movs	r3, #0
 8006780:	6123      	str	r3, [r4, #16]
 8006782:	4615      	mov	r5, r2
 8006784:	e7bc      	b.n	8006700 <_printf_i+0x14c>
 8006786:	682b      	ldr	r3, [r5, #0]
 8006788:	1d1a      	adds	r2, r3, #4
 800678a:	602a      	str	r2, [r5, #0]
 800678c:	681d      	ldr	r5, [r3, #0]
 800678e:	6862      	ldr	r2, [r4, #4]
 8006790:	2100      	movs	r1, #0
 8006792:	4628      	mov	r0, r5
 8006794:	f7f9 fd3c 	bl	8000210 <memchr>
 8006798:	b108      	cbz	r0, 800679e <_printf_i+0x1ea>
 800679a:	1b40      	subs	r0, r0, r5
 800679c:	6060      	str	r0, [r4, #4]
 800679e:	6863      	ldr	r3, [r4, #4]
 80067a0:	6123      	str	r3, [r4, #16]
 80067a2:	2300      	movs	r3, #0
 80067a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067a8:	e7aa      	b.n	8006700 <_printf_i+0x14c>
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	462a      	mov	r2, r5
 80067ae:	4649      	mov	r1, r9
 80067b0:	4640      	mov	r0, r8
 80067b2:	47d0      	blx	sl
 80067b4:	3001      	adds	r0, #1
 80067b6:	d0ad      	beq.n	8006714 <_printf_i+0x160>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	079b      	lsls	r3, r3, #30
 80067bc:	d413      	bmi.n	80067e6 <_printf_i+0x232>
 80067be:	68e0      	ldr	r0, [r4, #12]
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	4298      	cmp	r0, r3
 80067c4:	bfb8      	it	lt
 80067c6:	4618      	movlt	r0, r3
 80067c8:	e7a6      	b.n	8006718 <_printf_i+0x164>
 80067ca:	2301      	movs	r3, #1
 80067cc:	4632      	mov	r2, r6
 80067ce:	4649      	mov	r1, r9
 80067d0:	4640      	mov	r0, r8
 80067d2:	47d0      	blx	sl
 80067d4:	3001      	adds	r0, #1
 80067d6:	d09d      	beq.n	8006714 <_printf_i+0x160>
 80067d8:	3501      	adds	r5, #1
 80067da:	68e3      	ldr	r3, [r4, #12]
 80067dc:	9903      	ldr	r1, [sp, #12]
 80067de:	1a5b      	subs	r3, r3, r1
 80067e0:	42ab      	cmp	r3, r5
 80067e2:	dcf2      	bgt.n	80067ca <_printf_i+0x216>
 80067e4:	e7eb      	b.n	80067be <_printf_i+0x20a>
 80067e6:	2500      	movs	r5, #0
 80067e8:	f104 0619 	add.w	r6, r4, #25
 80067ec:	e7f5      	b.n	80067da <_printf_i+0x226>
 80067ee:	bf00      	nop
 80067f0:	08006f80 	.word	0x08006f80
 80067f4:	08006f91 	.word	0x08006f91

080067f8 <__sflush_r>:
 80067f8:	898a      	ldrh	r2, [r1, #12]
 80067fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fe:	4605      	mov	r5, r0
 8006800:	0710      	lsls	r0, r2, #28
 8006802:	460c      	mov	r4, r1
 8006804:	d458      	bmi.n	80068b8 <__sflush_r+0xc0>
 8006806:	684b      	ldr	r3, [r1, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	dc05      	bgt.n	8006818 <__sflush_r+0x20>
 800680c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	dc02      	bgt.n	8006818 <__sflush_r+0x20>
 8006812:	2000      	movs	r0, #0
 8006814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800681a:	2e00      	cmp	r6, #0
 800681c:	d0f9      	beq.n	8006812 <__sflush_r+0x1a>
 800681e:	2300      	movs	r3, #0
 8006820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006824:	682f      	ldr	r7, [r5, #0]
 8006826:	6a21      	ldr	r1, [r4, #32]
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	d032      	beq.n	8006892 <__sflush_r+0x9a>
 800682c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	075a      	lsls	r2, r3, #29
 8006832:	d505      	bpl.n	8006840 <__sflush_r+0x48>
 8006834:	6863      	ldr	r3, [r4, #4]
 8006836:	1ac0      	subs	r0, r0, r3
 8006838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800683a:	b10b      	cbz	r3, 8006840 <__sflush_r+0x48>
 800683c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800683e:	1ac0      	subs	r0, r0, r3
 8006840:	2300      	movs	r3, #0
 8006842:	4602      	mov	r2, r0
 8006844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006846:	6a21      	ldr	r1, [r4, #32]
 8006848:	4628      	mov	r0, r5
 800684a:	47b0      	blx	r6
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	d106      	bne.n	8006860 <__sflush_r+0x68>
 8006852:	6829      	ldr	r1, [r5, #0]
 8006854:	291d      	cmp	r1, #29
 8006856:	d82b      	bhi.n	80068b0 <__sflush_r+0xb8>
 8006858:	4a29      	ldr	r2, [pc, #164]	; (8006900 <__sflush_r+0x108>)
 800685a:	410a      	asrs	r2, r1
 800685c:	07d6      	lsls	r6, r2, #31
 800685e:	d427      	bmi.n	80068b0 <__sflush_r+0xb8>
 8006860:	2200      	movs	r2, #0
 8006862:	6062      	str	r2, [r4, #4]
 8006864:	04d9      	lsls	r1, r3, #19
 8006866:	6922      	ldr	r2, [r4, #16]
 8006868:	6022      	str	r2, [r4, #0]
 800686a:	d504      	bpl.n	8006876 <__sflush_r+0x7e>
 800686c:	1c42      	adds	r2, r0, #1
 800686e:	d101      	bne.n	8006874 <__sflush_r+0x7c>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b903      	cbnz	r3, 8006876 <__sflush_r+0x7e>
 8006874:	6560      	str	r0, [r4, #84]	; 0x54
 8006876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006878:	602f      	str	r7, [r5, #0]
 800687a:	2900      	cmp	r1, #0
 800687c:	d0c9      	beq.n	8006812 <__sflush_r+0x1a>
 800687e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006882:	4299      	cmp	r1, r3
 8006884:	d002      	beq.n	800688c <__sflush_r+0x94>
 8006886:	4628      	mov	r0, r5
 8006888:	f7ff fbe2 	bl	8006050 <_free_r>
 800688c:	2000      	movs	r0, #0
 800688e:	6360      	str	r0, [r4, #52]	; 0x34
 8006890:	e7c0      	b.n	8006814 <__sflush_r+0x1c>
 8006892:	2301      	movs	r3, #1
 8006894:	4628      	mov	r0, r5
 8006896:	47b0      	blx	r6
 8006898:	1c41      	adds	r1, r0, #1
 800689a:	d1c8      	bne.n	800682e <__sflush_r+0x36>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0c5      	beq.n	800682e <__sflush_r+0x36>
 80068a2:	2b1d      	cmp	r3, #29
 80068a4:	d001      	beq.n	80068aa <__sflush_r+0xb2>
 80068a6:	2b16      	cmp	r3, #22
 80068a8:	d101      	bne.n	80068ae <__sflush_r+0xb6>
 80068aa:	602f      	str	r7, [r5, #0]
 80068ac:	e7b1      	b.n	8006812 <__sflush_r+0x1a>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	e7ad      	b.n	8006814 <__sflush_r+0x1c>
 80068b8:	690f      	ldr	r7, [r1, #16]
 80068ba:	2f00      	cmp	r7, #0
 80068bc:	d0a9      	beq.n	8006812 <__sflush_r+0x1a>
 80068be:	0793      	lsls	r3, r2, #30
 80068c0:	680e      	ldr	r6, [r1, #0]
 80068c2:	bf08      	it	eq
 80068c4:	694b      	ldreq	r3, [r1, #20]
 80068c6:	600f      	str	r7, [r1, #0]
 80068c8:	bf18      	it	ne
 80068ca:	2300      	movne	r3, #0
 80068cc:	eba6 0807 	sub.w	r8, r6, r7
 80068d0:	608b      	str	r3, [r1, #8]
 80068d2:	f1b8 0f00 	cmp.w	r8, #0
 80068d6:	dd9c      	ble.n	8006812 <__sflush_r+0x1a>
 80068d8:	6a21      	ldr	r1, [r4, #32]
 80068da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068dc:	4643      	mov	r3, r8
 80068de:	463a      	mov	r2, r7
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b0      	blx	r6
 80068e4:	2800      	cmp	r0, #0
 80068e6:	dc06      	bgt.n	80068f6 <__sflush_r+0xfe>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	e78e      	b.n	8006814 <__sflush_r+0x1c>
 80068f6:	4407      	add	r7, r0
 80068f8:	eba8 0800 	sub.w	r8, r8, r0
 80068fc:	e7e9      	b.n	80068d2 <__sflush_r+0xda>
 80068fe:	bf00      	nop
 8006900:	dfbffffe 	.word	0xdfbffffe

08006904 <_fflush_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	690b      	ldr	r3, [r1, #16]
 8006908:	4605      	mov	r5, r0
 800690a:	460c      	mov	r4, r1
 800690c:	b913      	cbnz	r3, 8006914 <_fflush_r+0x10>
 800690e:	2500      	movs	r5, #0
 8006910:	4628      	mov	r0, r5
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	b118      	cbz	r0, 800691e <_fflush_r+0x1a>
 8006916:	6a03      	ldr	r3, [r0, #32]
 8006918:	b90b      	cbnz	r3, 800691e <_fflush_r+0x1a>
 800691a:	f7ff f977 	bl	8005c0c <__sinit>
 800691e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f3      	beq.n	800690e <_fflush_r+0xa>
 8006926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006928:	07d0      	lsls	r0, r2, #31
 800692a:	d404      	bmi.n	8006936 <_fflush_r+0x32>
 800692c:	0599      	lsls	r1, r3, #22
 800692e:	d402      	bmi.n	8006936 <_fflush_r+0x32>
 8006930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006932:	f7ff fb5f 	bl	8005ff4 <__retarget_lock_acquire_recursive>
 8006936:	4628      	mov	r0, r5
 8006938:	4621      	mov	r1, r4
 800693a:	f7ff ff5d 	bl	80067f8 <__sflush_r>
 800693e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006940:	07da      	lsls	r2, r3, #31
 8006942:	4605      	mov	r5, r0
 8006944:	d4e4      	bmi.n	8006910 <_fflush_r+0xc>
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	059b      	lsls	r3, r3, #22
 800694a:	d4e1      	bmi.n	8006910 <_fflush_r+0xc>
 800694c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800694e:	f7ff fb52 	bl	8005ff6 <__retarget_lock_release_recursive>
 8006952:	e7dd      	b.n	8006910 <_fflush_r+0xc>

08006954 <fiprintf>:
 8006954:	b40e      	push	{r1, r2, r3}
 8006956:	b503      	push	{r0, r1, lr}
 8006958:	4601      	mov	r1, r0
 800695a:	ab03      	add	r3, sp, #12
 800695c:	4805      	ldr	r0, [pc, #20]	; (8006974 <fiprintf+0x20>)
 800695e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	f7ff fc9d 	bl	80062a4 <_vfiprintf_r>
 800696a:	b002      	add	sp, #8
 800696c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006970:	b003      	add	sp, #12
 8006972:	4770      	bx	lr
 8006974:	20000080 	.word	0x20000080

08006978 <__swhatbuf_r>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	460c      	mov	r4, r1
 800697c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006980:	2900      	cmp	r1, #0
 8006982:	b096      	sub	sp, #88	; 0x58
 8006984:	4615      	mov	r5, r2
 8006986:	461e      	mov	r6, r3
 8006988:	da0d      	bge.n	80069a6 <__swhatbuf_r+0x2e>
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006990:	f04f 0100 	mov.w	r1, #0
 8006994:	bf0c      	ite	eq
 8006996:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800699a:	2340      	movne	r3, #64	; 0x40
 800699c:	2000      	movs	r0, #0
 800699e:	6031      	str	r1, [r6, #0]
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	b016      	add	sp, #88	; 0x58
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	466a      	mov	r2, sp
 80069a8:	f000 f848 	bl	8006a3c <_fstat_r>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	dbec      	blt.n	800698a <__swhatbuf_r+0x12>
 80069b0:	9901      	ldr	r1, [sp, #4]
 80069b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069ba:	4259      	negs	r1, r3
 80069bc:	4159      	adcs	r1, r3
 80069be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c2:	e7eb      	b.n	800699c <__swhatbuf_r+0x24>

080069c4 <__smakebuf_r>:
 80069c4:	898b      	ldrh	r3, [r1, #12]
 80069c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069c8:	079d      	lsls	r5, r3, #30
 80069ca:	4606      	mov	r6, r0
 80069cc:	460c      	mov	r4, r1
 80069ce:	d507      	bpl.n	80069e0 <__smakebuf_r+0x1c>
 80069d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	2301      	movs	r3, #1
 80069da:	6163      	str	r3, [r4, #20]
 80069dc:	b002      	add	sp, #8
 80069de:	bd70      	pop	{r4, r5, r6, pc}
 80069e0:	ab01      	add	r3, sp, #4
 80069e2:	466a      	mov	r2, sp
 80069e4:	f7ff ffc8 	bl	8006978 <__swhatbuf_r>
 80069e8:	9900      	ldr	r1, [sp, #0]
 80069ea:	4605      	mov	r5, r0
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff fba3 	bl	8006138 <_malloc_r>
 80069f2:	b948      	cbnz	r0, 8006a08 <__smakebuf_r+0x44>
 80069f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f8:	059a      	lsls	r2, r3, #22
 80069fa:	d4ef      	bmi.n	80069dc <__smakebuf_r+0x18>
 80069fc:	f023 0303 	bic.w	r3, r3, #3
 8006a00:	f043 0302 	orr.w	r3, r3, #2
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	e7e3      	b.n	80069d0 <__smakebuf_r+0xc>
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	6020      	str	r0, [r4, #0]
 8006a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	9b00      	ldr	r3, [sp, #0]
 8006a14:	6163      	str	r3, [r4, #20]
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	6120      	str	r0, [r4, #16]
 8006a1a:	b15b      	cbz	r3, 8006a34 <__smakebuf_r+0x70>
 8006a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f81d 	bl	8006a60 <_isatty_r>
 8006a26:	b128      	cbz	r0, 8006a34 <__smakebuf_r+0x70>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	431d      	orrs	r5, r3
 8006a38:	81a5      	strh	r5, [r4, #12]
 8006a3a:	e7cf      	b.n	80069dc <__smakebuf_r+0x18>

08006a3c <_fstat_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d07      	ldr	r5, [pc, #28]	; (8006a5c <_fstat_r+0x20>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	f7fa fb97 	bl	800117c <_fstat>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d102      	bne.n	8006a58 <_fstat_r+0x1c>
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	b103      	cbz	r3, 8006a58 <_fstat_r+0x1c>
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	bd38      	pop	{r3, r4, r5, pc}
 8006a5a:	bf00      	nop
 8006a5c:	2000ad90 	.word	0x2000ad90

08006a60 <_isatty_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	; (8006a7c <_isatty_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa fb96 	bl	800119c <_isatty>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_isatty_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_isatty_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	2000ad90 	.word	0x2000ad90

08006a80 <_sbrk_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d06      	ldr	r5, [pc, #24]	; (8006a9c <_sbrk_r+0x1c>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	f7fa fb9e 	bl	80011cc <_sbrk>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_sbrk_r+0x1a>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_sbrk_r+0x1a>
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	2000ad90 	.word	0x2000ad90

08006aa0 <abort>:
 8006aa0:	b508      	push	{r3, lr}
 8006aa2:	2006      	movs	r0, #6
 8006aa4:	f000 f82c 	bl	8006b00 <raise>
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	f7fa fb18 	bl	80010de <_exit>

08006aae <_raise_r>:
 8006aae:	291f      	cmp	r1, #31
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	460d      	mov	r5, r1
 8006ab6:	d904      	bls.n	8006ac2 <_raise_r+0x14>
 8006ab8:	2316      	movs	r3, #22
 8006aba:	6003      	str	r3, [r0, #0]
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	bd38      	pop	{r3, r4, r5, pc}
 8006ac2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ac4:	b112      	cbz	r2, 8006acc <_raise_r+0x1e>
 8006ac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006aca:	b94b      	cbnz	r3, 8006ae0 <_raise_r+0x32>
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 f831 	bl	8006b34 <_getpid_r>
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4601      	mov	r1, r0
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006adc:	f000 b818 	b.w	8006b10 <_kill_r>
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d00a      	beq.n	8006afa <_raise_r+0x4c>
 8006ae4:	1c59      	adds	r1, r3, #1
 8006ae6:	d103      	bne.n	8006af0 <_raise_r+0x42>
 8006ae8:	2316      	movs	r3, #22
 8006aea:	6003      	str	r3, [r0, #0]
 8006aec:	2001      	movs	r0, #1
 8006aee:	e7e7      	b.n	8006ac0 <_raise_r+0x12>
 8006af0:	2400      	movs	r4, #0
 8006af2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006af6:	4628      	mov	r0, r5
 8006af8:	4798      	blx	r3
 8006afa:	2000      	movs	r0, #0
 8006afc:	e7e0      	b.n	8006ac0 <_raise_r+0x12>
	...

08006b00 <raise>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <raise+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f7ff bfd2 	b.w	8006aae <_raise_r>
 8006b0a:	bf00      	nop
 8006b0c:	20000080 	.word	0x20000080

08006b10 <_kill_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	; (8006b30 <_kill_r+0x20>)
 8006b14:	2300      	movs	r3, #0
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f7fa face 	bl	80010be <_kill>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <_kill_r+0x1c>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	b103      	cbz	r3, 8006b2c <_kill_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd38      	pop	{r3, r4, r5, pc}
 8006b2e:	bf00      	nop
 8006b30:	2000ad90 	.word	0x2000ad90

08006b34 <_getpid_r>:
 8006b34:	f7fa babb 	b.w	80010ae <_getpid>

08006b38 <_init>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr

08006b44 <_fini>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr
