#include <stdio.h>
#include "main.h"
#include "string.h"
#include <stdlib.h>
#define MAX_MSG_SIZE 256
#include <unistd.h>
#include <arpa/inet.h>
#include "time.h"

typedef struct __attribute__((__packed__)) {
	uint32_t TestID;
	uint8_t Peripheral;
	uint8_t iter_num;
	uint8_t pattern_len;
	uint8_t str[MAX_MSG_SIZE];
}packet_from_client;


typedef struct __attribute__((__packed__)) {
	uint8_t TestID[TESTID_LEN];
	uint8_t TestResult;

}packet_to_client;

typedef enum {
	TEST_ID,
	PERIPHERAL,
	ITER_NUM,
	PATTERN_LEN,
	STR
}packet_field;

extern UART_HandleTypeDef huart3;
#define UART_DEBUG &huart3


int main(){
	uint8_t Test_ID_str[11]=0;
	uint32_t Test_ID=0;

	uint8_t message_len_str[4]=0;
	uint8_t message_len=0;
	uint8_t iter_nums_str[4]=0;
	uint8_t iter_nums=0;
	uint8_t Peripheral_num_str[6]=0;
	uint8_t Peripheral=0;
	uint8_t	str[MAX_MSG_SIZE+1]=0;
	uint8_t field_list[5]={Test_ID_str, message_len_str, iter_nums_str, Peripheral_num_str,str};
	packet_field iter_field=0;
	int iter_str=0;
	char *endptr=0;

	/* this while loop receives input from user for each packet field*/
	while(iter_field!=5){

		chosen_field=field_list[iter_field];
		if (iter_str==0){ //ready to get a enter value to specific field
			switch (iter_field){
			case (TEST_ID):
				HAL_UART_Transmit(UART_DEBUG, "Please enter Test ID:\r\n", strlen("Please enter Test ID:\r\n"), HAL_MAX_DELAY);
				break;

			case (PERIPHERAL):
				HAL_UART_Transmit(UART_DEBUG, "Please enter Peripheral name (Timer, ADC, SPI, I2C, UART):\r\n", strlen("Please enter Peripheral name (Timer, ADC, SPI, I2C, UART):\r\n"), HAL_MAX_DELAY);
				break;

			case (ITER_NUM):
				HAL_UART_Transmit(UART_DEBUG, "Please enter number of iterations to run (256 iterations tops):\r\n", strlen("Please enter number of iterations to run (256 iterations tops):\r\n"), HAL_MAX_DELAY);
				break;

			case (PATTERN_LEN):
				HAL_UART_Transmit(UART_DEBUG, "Please enter string length (256 characters tops):\r\n", strlen("Please enter string length (256 character tops):\r\n"), HAL_MAX_DELAY);
				break;

			case (STR):
				HAL_UART_Transmit(UART_DEBUG, "Please enter a message (256 characters tops):\r\n", strlen("Please enter a message (256 character tops):\r\n"), HAL_MAX_DELAY);
				break;
			default:
				break;
			}
		}
		HAL_UART_Receive(UART_DEBUG, chosen_field+iter_str, 1, HAL_MAX_DELAY);
		if (Test_ID_str[iter_str]=='\r'){// user pressed enter
			iter_field++;
			iter_str=0;
			continue;
		}
		iter_str++;


	}

	/* translation of strings to packet fields*/
	uint32_t Test_ID=(uint32_t)strtol(Test_ID_str, &endptr,10); //add error handling!
	switch (Peripheral_num_str){
	case ("ADC"):
		Peripheral=16;
		break;
	case ("Timer"):
		Peripheral=1;
		break;
	case ("I2C"):
		Peripheral=8;
		break;
	case ("SPI"):
		Peripheral=4;
		break;
	case ("UART"):
		Peripheral=2;
		break;
	default:
		break;
	}

	uint8_t Iter_num=(uint8_t)strtol(iter_nums_str, &endptr,10); //add error handling!
	uint8_t message_len=(uint8_t)strtol(message_len_str, &endptr,10); //add error handling!

	/* pack all fields to packet struct*/

	packet_from_client msg_packet={0};
	msg_packet.Peripheral=Peripheral;
	msg_packet.TestID=Test_ID;
	msg_packet.iter_num=iter_nums;
	msg_packet.pattern_len=message_len;
	strncpy(msg_packet.str, str, 257);
	/*should serialize struct to buffer before sending*/
	char serializedPacket[264]={0};
	char receivedPacket[5]={0};
	memcpy(serializedPacket, &msg_packet, sizeof(msg_packet));


	/*  need to send via udp*/
	int sockfd;
	struct sockaddr_in client_addr,server_addr;

	// Create a socket for UDP communication
	if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
		perror("Socket creation failed");
		exit(EXIT_FAILURE);
	}

	    // Configure server address
	memset(&client_addr, 0, sizeof(client_addr));
	client_addr.sin_family = AF_INET;
	client_addr.sin_port = htons(PORT);
	client_addr.sin_addr.s_addr = INADDR_ANY;
	memset(&server_addr,0,sizeof(server_addr));

	// Example message to be sent
	if (bind(sockfd, (struct sockaddr *)&client_addr, sizeof(client_addr)) == -1) {
		perror("Bind failed\r\n");
		close(sockfd);
		exit(EXIT_FAILURE);
	}
	clock_t start_time = clock();
	if (sendto(sockfd, (const char*)serializedPacket, strlen(serializedPacket), 0, (struct sockaddr *)&server_addr, sizeof(server_addr))){
		perror("Sendto failed\r\n");
		close(sockfd);
		exit(EXIT_FAILURE);
	}

	printf("UDP packet send successfully!\r\n");
	size_t bytes_received=0;
	if ( bytes_received=recfrom(sockfd,receivedPacket,sizeof(receivedPacket),0, (struct sockaddr *)&server_addr, sizeof(server_addr))){
		perror("Receiving failed!\r\n");
		close(sockfd);
		exit(EXIT_FAILURE);
	}
	// Send the message to the server
	clock_t end_time= clock();
	double elapsed_time=((double)(end_time-start_time))
	printf("UDP packet received successfully!\r\n");
	packet_to_client received_packet={0};
	memcpy(received_packet.TestID,receivedPacket,4);
	memcpy(received_packet.TestResult, receivedPacket[4],1);
	FILE *file;
	if (file=fopen("Test_Results.txt", "a")==NULL){
		perror("Error opening the file!");
		return 1;
	}
	fprintf(file,)
	

	// Close the socket
	close(sockfd);

}
