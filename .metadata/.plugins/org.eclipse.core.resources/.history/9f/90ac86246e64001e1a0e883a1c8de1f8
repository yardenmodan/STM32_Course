#include "ex_uart.h"

#include "main.h"
#include "stm32f7xx_hal.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart5;


#define UART_DEBUG &huart3				//Debug UART
#define UART_4 &huart4
#define UART_5 &huart5
#define BUFF_SIZE 12
#define SHORT_TIMEOUT 100
#define PACKET_SIZE 1

#define MESSAGE_SIZE 100
uint8_t uart3_flag_callback=0;

uint8_t uart4_flag_callback=0;
uint8_t uart5_flag_callback=0; //Flag when UART completes receiving data from user
uint8_t ex1_buff4[BUFF_SIZE]="AbraKadabra";
uint8_t ex1_buff5[BUFF_SIZE]={0};

uint8_t ex2_buff4[MESSAGE_SIZE]={0};
uint8_t ex2_buff5[MESSAGE_SIZE]={0};
uint8_t ex4_buff3[MESSAGE_SIZE]={0};


int i=0;


void ex1(void){
	int i=0;

	while(i<BUFF_SIZE){
		HAL_StatusTypeDef status;
		status = HAL_UART_Transmit(UART_4, ex1_buff4+i, PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_Transmit failed with status: %d", status);
			return;
		}

		//memset(ex1_buff4+i, 0 , PACKET_SIZE);
		status = HAL_UART_Receive(UART_5, ex1_buff5+i, PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_Receive failed with status: %d", status);
			return;
		}
		status = HAL_UART_Transmit(UART_5, ex1_buff5+i,PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_Transmit failed with status: %d", status);
			return;
		}
		memset(ex1_buff5+i, 0 , PACKET_SIZE);

		status = HAL_UART_Receive(UART_4, ex1_buff4+i, PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_Transmit failed with status: %d", status);
			return;
		}
//		status = HAL_UART_Transmit(UART_DEBUG, buff_r4, i+1, HAL_MAX_DELAY);
//		if(status != HAL_OK)
//		{
//			printf("UART_Receive failed with status: %d", status);
//			return;
//		}
//		status = HAL_UART_Transmit(UART_DEBUG, (uint8_t*)"\r\n", 3 ,HAL_MAX_DELAY);
//		if(status != HAL_OK)
//		{
//			printf("UART_Receive failed with status: %d", status);
//			return;
//		}

		i++;
	}
}



void ex2()
{

	while(i<MESSAGE_SIZE)
	{
		HAL_StatusTypeDef status = HAL_UART_Receive(UART_DEBUG, ex2_buff4+i, PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_DEBUG_Receive failed with status: %d", status);
			return;
		}


		status = HAL_UART_Transmit(UART_4, ex2_buff4+i, PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_4_Transmit failed with status: %d", status);
			return;
		}
		memset(ex2_buff4+i, 0 , PACKET_SIZE);

		status = HAL_UART_Receive(UART_5, ex2_buff5+i,PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_5_Receive failed with status: %d", status);
			return;
		}
		status = HAL_UART_Transmit(UART_5, ex2_buff5+i, PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_5_Transmit failed with status: %d", status);
			return;
		}
		memset(ex2_buff5+i, 0 , PACKET_SIZE);

		status = HAL_UART_Receive(UART_4, ex2_buff4+i, PACKET_SIZE, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_4_Receive failed with status: %d", status);
			return;
		}
		status = HAL_UART_Transmit(UART_DEBUG, ex2_buff4, i+1, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_DEBUG_Transmit failed with status: %d", status);
			return;

		}
		status = HAL_UART_Transmit(UART_DEBUG, (const uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
		if(status != HAL_OK)
		{
			printf("UART_DEBUG_Transmit failed with status: %d", status);
			return;

		}
		i++;
	}
}







void ex3()
{

	HAL_StatusTypeDef status = HAL_UARTEx_ReceiveToIdle_DMA(UART_5, ex1_buff5, 0xFFFF);			//Prepare UART to receive 10 bytes of data to buff
	if(status != HAL_OK)
	{
		printf("UART_5 Receive failed with status: %d", status);
		return;
	}
	status= HAL_UART_Transmit(UART_4 ,ex1_buff4, BUFF_SIZE, HAL_MAX_DELAY);
	if(status != HAL_OK)
	{
		printf("UART_4 Transmit failed with status: %d", status);
		return;
	}
	memset(ex1_buff4, 0 , BUFF_SIZE);

	while(1){
		if(uart5_flag_callback)								//Check if UART received 10 bytes of data (by callback definition)
		{
			printf("callback 5 flag up [%s]\n",ex1_buff5);
			uart5_flag_callback = 0;
			status = HAL_UARTEx_ReceiveToIdle_DMA(UART_4, ex1_buff4, 0xFFFF);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_4 Receive failed with status: %d", status);
			}

			status = HAL_UART_Transmit(UART_5, ex1_buff5, BUFF_SIZE,HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_5 TRANSMIT failed with status: %d", status);
			}
//setting flag back to 0

		}
		if(uart4_flag_callback)
		{
			status = HAL_UART_Transmit(UART_DEBUG, ex1_buff4, BUFF_SIZE,HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_5 TRANSMIT failed with status: %d", status);
			}
			uart4_flag_callback	=0;


		}

	}


}

void ex4()

{

	HAL_StatusTypeDef status;
	status = HAL_UARTEx_ReceiveToIdle_DMA(UART_DEBUG, ex4_buff3, 0xFFFF);			//Prepare UART to receive 10 bytes of data to buff
	if(status != HAL_OK)
	{
		printf("UART_3 Receive failed with status: %d", status);
		return;
	}

	while(1){
		if(uart3_flag_callback)								//Check if UART received 10 bytes of data (by callback definition)
		{
			printf("callback 3 flag up [%s]\n",ex4_buff3);
			uart3_flag_callback = 0;
			status = HAL_UARTEx_ReceiveToIdle_DMA(UART_5, ex2_buff5, 0xFFFF);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_4 Receive failed with status: %d", status);
			}

			status = HAL_UART_Transmit(UART_4, ex4_buff3, MESSAGE_SIZE ,HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_3 TRANSMIT failed with status: %d", status);
			}
//setting flag back to 0

		}
		if(uart4_flag_callback)
		{
			memset(ex2_buff5 ,0,MESSAGE_SIZE);

			printf("callback 4 flag up [%s]\n",ex2_buff4);
			uart4_flag_callback = 0;
			status = HAL_UART_Transmit(UART_DEBUG, ex2_buff4, MESSAGE_SIZE,HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_DEBUG Transmit failed with status: %d", status);
			}

			memset(ex2_buff4 ,0,MESSAGE_SIZE);



		}
		if(uart5_flag_callback)
		{
			memset(ex4_buff3,0,MESSAGE_SIZE);

			printf("callback 5 flag up [%s]\n",ex2_buff5);
			uart5_flag_callback = 0;
			status = HAL_UARTEx_ReceiveToIdle_DMA(UART_4, ex2_buff4, 0xFFFF);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_4 Receive failed with status: %d", status);
			}

			status = HAL_UART_Transmit(UART_5, ex2_buff5, MESSAGE_SIZE, HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_5 TRANSMIT failed with status: %d", status);
			}
			status = HAL_UART_Transmit(UART_5,  (const uint8_t*)"\r\n", 2, HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
			if(status != HAL_OK)
			{
				printf("UART_5 TRANSMIT failed with status: %d", status);
			}



		}
	}
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)

{
	if (huart==UART_DEBUG){
		uart3_flag_callback=1;
		}

	if (huart==UART_5){
		uart5_flag_callback=1;
	}

	if (huart==UART_4){
		uart4_flag_callback=1;

	}

}



void hw_main() {
	ex4();
	// ex2();
}

