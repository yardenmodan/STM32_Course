#include "ex4.h"
#define BUFF_SIZE 10
//uint8_t uart3_flag_callback = 0;
//uint8_t uart4_flag_callback=0;
//uint8_t uart5_flag_callback=0;
//
//
//void ex4()
//{
//	uint8_t buff_r3[BUFF_SIZE]={0};
//	uint8_t buff_r4[BUFF_SIZE]={0};
//	uint8_t buff_r5[BUFF_SIZE]={0};
//	HAL_StatusTypeDef status;
//	status = HAL_UART_Receive_IT(UART_DEBUG, buff_r3, BUFF_SIZE);				//Prepare UART to receive 10 bytes of data to buff
//	if(status != HAL_OK)
//	{
//		printf("UART_3 Receive failed with status: %d", status);
//		return;
//	}
//
//	while(1){
//		if(uart3_flag_callback)								//Check if UART received 10 bytes of data (by callback definition)
//		{
//			printf("callback 3 flag up [%s]\n",buff_r3);
//			uart3_flag_callback = 0;
//			status = HAL_UART_Receive_IT(UART_4, buff_r4, BUFF_SIZE);		//preparing UART to receive 10 bytes of data under interrupt mode
//			if(status != HAL_OK)
//			{
//				printf("UART_4 Receive failed with status: %d", status);
//			}
//
//			status = HAL_UART_Transmit(UART_DEBUG, buff_r3, BUFF_SIZE,HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
//			if(status != HAL_OK)
//			{
//				printf("UART_3 TRANSMIT failed with status: %d", status);
//			}
//			memset(buff_r3,0,BUFF_SIZE);
////setting flag back to 0
//
//		}
//		if(uart4_flag_callback)
//		{
//			printf("callback 4 flag up [%s]\n",buff_r4);
//			uart4_flag_callback = 0;
//			status = HAL_UART_Receive_IT(UART_5, buff_r5, BUFF_SIZE);		//preparing UART to receive 10 bytes of data under interrupt mode
//			if(status != HAL_OK)
//			{
//				printf("UART_5 Receive failed with status: %d", status);
//			}
//			status = HAL_UART_Receive_IT(UART_DEBUG, buff_r3, BUFF_SIZE);		//preparing UART to receive 10 bytes of data under interrupt mode
//			if(status != HAL_OK)
//			{
//				printf("UART_DEBUG Receive failed with status: %d", status);
//			}
//			status = HAL_UART_Transmit(UART_4, buff_r4, BUFF_SIZE,HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
//			if(status != HAL_OK)
//			{
//				printf("UART_4 TRANSMIT failed with status: %d", status);
//			}
//			memset(buff_r4,0,BUFF_SIZE);
//
//
//
//		}
//		if(uart5_flag_callback)
//		{
//			printf("callback 5 flag up [%s]\n",buff_r5);
//			uart5_flag_callback = 0;
//			status = HAL_UART_Receive_IT(UART_4, buff_r4, BUFF_SIZE);		//preparing UART to receive 10 bytes of data under interrupt mode
//			if(status != HAL_OK)
//			{
//				printf("UART_4 Receive failed with status: %d", status);
//			}
//
//			status = HAL_UART_Transmit(UART_5, buff_r5, BUFF_SIZE,HAL_MAX_DELAY);		//preparing UART to receive 10 bytes of data under interrupt mode
//			if(status != HAL_OK)
//			{
//				printf("UART_5 TRANSMIT failed with status: %d", status);
//			}
//			memset(buff_r5,0,BUFF_SIZE);
//
//
//
//		}
//	}
//
//
//}
//
///**
//  * @brief This function is called when *any* UART completes receiving X bytes.
//  */
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	if (huart==UART_DEBUG){
//		uart3_flag_callback=1;
//	}
//	if (huart==UART_5){
//		uart5_flag_callback=1;
//	}
//
//	if (huart==UART_4){
//		uart4_flag_callback=1;
//
//	}
//
//}
typedef enum {
    STATE_IDLE,
    STATE_RECEIVE_UART3,
    STATE_RECEIVE_UART4,
    STATE_RECEIVE_UART5,
    STATE_TRANSMIT_UART3,
    STATE_TRANSMIT_UART4,
    STATE_TRANSMIT_UART5
} State;

State currentState = STATE_IDLE;

void ex4()
{
    uint8_t buff_r3[BUFF_SIZE] = {0};
    uint8_t buff_r4[BUFF_SIZE] = {0};
    uint8_t buff_r5[BUFF_SIZE] = {0};

    while(1) {
        switch(currentState) {
            case STATE_IDLE:
                // Perform any tasks that need to be done in the idle state
                break;

            case STATE_RECEIVE_UART3:
                HAL_UART_Receive_IT(UART_DEBUG, buff_r3, BUFF_SIZE);
                // Transition to next state after starting receive operation
                currentState = STATE_TRANSMIT_UART3;
                break;

            case STATE_TRANSMIT_UART3:
                // Perform tasks related to transmitting data from UART3
                // Transition to next state when done
                currentState = STATE_RECEIVE_UART4;
                break;

            case STATE_RECEIVE_UART4:
                HAL_UART_Receive_IT(UART_4, buff_r4, BUFF_SIZE);
                currentState = STATE_TRANSMIT_UART4;
                break;

            case STATE_TRANSMIT_UART4:
                // Perform tasks related to transmitting data from UART4
                currentState = STATE_RECEIVE_UART5;
                break;

            case STATE_RECEIVE_UART5:
                HAL_UART_Receive_IT(UART_5, buff_r5, BUFF_SIZE);
                currentState = STATE_TRANSMIT_UART5;
                break;

            case STATE_TRANSMIT_UART5:
                // Perform tasks related to transmitting data from UART5
                currentState = STATE_RECEIVE_UART3;
                break;
        }
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart == UART_DEBUG) {
        currentState = STATE_RECEIVE_UART4;
    }

    if (huart == UART_4) {
        currentState = STATE_RECEIVE_UART5;
    }

    if (huart == UART_5) {
        currentState = STATE_RECEIVE_UART3;
    }
}

