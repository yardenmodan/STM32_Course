#include "main.h"
#include "timer_testing.h"
#include "stm32f7xx_hal.h"
#include "stm32f7xx_hal_tim.h"
#include "stm32f7xx_hal_rtc.h"
#include "stm32f7xx_hal_uart.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Testing_Program.h"


extern RTC_HandleTypeDef hrtc;
extern TIM_HandleTypeDef htim7;
extern UART_HandleTypeDef huart3;


#define UART_DEBUG &huart3
#define TIME &htim7
#define RT &hrtc
int flag=0;

void timer_testing(uint8_t* new_interval, uint32_t* return_from_test_value){
	RTC_TimeTypeDef Time;
	int interval_sec=atoi((const char*)new_interval);
	char buffer[20]={0};

	// Update current_interval and recalculate auto-reload value

	htim7.Instance->ARR = (interval_sec*72*10^6/(htim7.Init.Prescaler+1))-1; // SET TIMER ACCORDING TO USER SECONDS INPUT INTERVAL
	 /* Get the current Time */
	HAL_RTC_GetTime(RT, &Time, RTC_FORMAT_BIN);

	/////////////////

	//uint32_t prescaler = 0;

	  // Calculate timer period for 10 seconds with a 72 MHz clock
	//uint32_t timer_period = (uint32_t) ((72000000 - 1) / (10)); // Adjust for desired time interval

	  // Find suitable prescaler value (optimize for avoiding overflow)
	 // while (timer_period > 0xFFFF) {
	//	prescaler++;
	//	timer_period >>= 1; // Divide period by 2 for each prescaler increment
	 // }

	  // Configure timer with calculated values
	  //TIME.Instance->ARR = prescaler - 1; // Prescaler register (subtract 1 for actual value)
	 // htim6.Instance->ARR = timer_period - 1; // Auto-Reload Register (subtract 1 for actual value)




	  /* Get the current Date */

	/* Process the date and time values (e.g., print to console, store in variables) */
	//printf("first sample current Time: %02d:%02d:%02d\n", Time.Hours, Time.Minutes, Time.Seconds);
	uint32_t first_sample_time=Time.Hours*3600+Time.Minutes*60+Time.Seconds;
	HAL_TIM_Base_Start_IT(TIME);

	while (1){

		sprintf(buffer, "%d",htim7.Instance->CNT );
		HAL_UART_Transmit(UART_DEBUG, buffer, sizeof(buffer), HAL_MAX_DELAY);
		HAL_UART_Transmit(UART_DEBUG,"\n\r",sizeof("\n\r"),HAL_MAX_DELAY);
		memset(buffer,0,sizeof(buffer));
		if (flag){ //sample time again
			HAL_TIM_Base_Stop_IT(TIME);

			HAL_RTC_GetTime(RT, &Time, RTC_FORMAT_BIN);
			printf("second sample current Time: %02d:%02d:%02d\n", Time.Hours, Time.Minutes, Time.Seconds);

			uint32_t second_sample_time=Time.Hours*3600+Time.Minutes*60+Time.Seconds;
			uint32_t delta=second_sample_time-first_sample_time;
			printf("interval: %d\n",delta);
			flag=0;
			*return_from_test_value=delta;
			break;
		}
	}


}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim==TIME){
		flag=1;

	}

}

