#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Testing_Program.h"
#include "Parsing.h"
#include "Server.h"
#include "lwip.h"
#include "timer_testing.h"
#include "uart.h"
#include "stm32f7xx_hal_crc.h"

extern CRC_HandleTypeDef hcrc;

#define CRC &hcrc
// Define global variables

 uint8_t incoming_buffer[MAX_MSG_SIZE+7]; 	// Incoming packet buffer
 uint16_t incoming_len;
 uint8_t callback_flag;        			// Flag used to signal when a packet has been received
 ip_addr_t dest_ipaddr ;
 uint16_t dest_port ;
 struct udp_pcb *upcb;

//#include "inet.h"
//

//#include "stm32f7xx_hal.h"





/*
 *	EVB configuration:
 *	IP: 		192.168.7.2
 *	NETMASK: 	255.255.255.0 (or 192.168.7.0/24)
 *	GATEWAY: 	192.168.7.1 (not in use but required by IDE)
 *	Port:
 */




void Testing_Program(void){
	uint8_t outputSerializedPacket[5]={0};


	memset(incoming_buffer,0,MAX_MSG_SIZE+7); 	// Incoming packet buffer
	incoming_len=0;
	callback_flag=0;

	uint32_t return_from_timer_value=0;

	packet_to_client server_to_client_packet={0};
	packet_from_client client_to_server_packet={0};

	uint8_t return_from_test_value[MAX_MSG_SIZE]={0}; //returned string from test units



	printf("Start of program\r\n");
	udpServer_init();					//UDP server initialization
	while (1) {
		uint8_t testing_result= TRUE;

		MX_LWIP_Process();
		//ethernetif_input(&gnetif);		//Handles the actual reception of bytes from the network interface
		//sys_check_timeouts();			//Handle which checks timeout expiration
		if(callback_flag == 1){			// got packet
			callback_flag=0;
			Parsing(&client_to_server_packet, incoming_buffer);
			switch ((int)client_to_server_packet.Peripheral){
				case (TIMER):

					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
						timer_testing( client_to_server_packet.str,&return_from_timer_value);
						int required_time=atoi(client_to_server_packet.str);
						testing_result= ((uint32_t)required_time!=return_from_timer_value)? FALSE : TRUE ;
						if (testing_result==FALSE){

							printf("TIMER test failed!\n");
							break;


						}

					}
					break;

				case (UART):
					for (int iter=0; iter<atoi(client_to_server_packet.iter_num);iter++){
						uart_testing(client_to_server_packet.str, return_from_test_value);
						if (strlen(client_to_server_packet.str)>100){
							uint32_t crc_val_input=HAL_CRC_Calculate(CRC, client_to_server_packet.str, strlen(client_to_server_packet.str));
							uint32_t crc_val_output=HAL_CRC_Calculate(CRC, return_from_test_value, strlen(return_from_test_value));
							testing_result= (crc_val_input==crc_val_output)? TRUE : FALSE;


						}
						else{

							testing_result= (strcmp(return_from_test_value,client_to_server_packet.str)!=0)? FALSE : TRUE ;


						}
						if (testing_result==FALSE){
							break;
						}

					}
					break;
				//case (SPI):
////					for (int iter=0; iter<client_to_server_packet->iter_num;i++){
////						spi_testing(client_to_server_packet->str, return_from_test_value);
////						testing_result= (strcmp(return_from_test_value,client_to_server_packet->str)!=0)? FALSE : TRUE ;
////						if (testing_result==FALSE){
////							printf("SPI test failed!\n");
////							break;
////
////
////						}
////
////				}
				//	break;
				//case (I2C):
////					for (int iter=0; iter<client_to_server_packet->iter_num;i++){
////						i2c_testing(client_to_server_packet->str, return_from_test_value);
////						testing_result= (strcmp(return_from_test_value,client_to_server_packet->str)!=0)? FALSE : TRUE ;
////						if (testing_result==FALSE){
////							printf("I2C test failed!\n");
////							break;
////
////
////						}
////
////					}
				//	break;
				case (ADC_P):
					for (int iter=0; iter<client_to_server_packet.iter_num;iter++){
						adc_testing(client_to_server_packet.str, return_from_test_value);
						testing_result= (strcmp(return_from_test_value,client_to_server_packet.str)!=0)? FALSE : TRUE ;
						if (testing_result==FALSE){
							printf("ADC test failed!\n");
							break;


						}
//
					}
					break;
				default:
					break;
//
//

			}

			memcpy((uint32_t*)&(server_to_client_packet.TestID),(uint32_t*)&client_to_server_packet.TestID,sizeof(client_to_server_packet.TestID));
			memcpy((uint8_t*)&(server_to_client_packet.TestResult),(uint8_t*)&testing_result ,1);
			memcpy(outputSerializedPacket, &server_to_client_packet,sizeof(server_to_client_packet));
			HAL_UART_Transmit(UART_DEBUG,outputSerializedPacket,5,HAL_MAX_DELAY);
			err_t error= send_packet( upcb, (const void*)outputSerializedPacket, (u16_t) 5, (const ip_addr_t*)&dest_ipaddr, (u16_t) dest_port);
			memset((uint8_t*)incoming_buffer,0,sizeof(incoming_buffer)); // incoming buffer. stores bit string from client
			memset((packet_to_client*)&server_to_client_packet,0,sizeof(&server_to_client_packet));
			memset((packet_from_client*)&client_to_server_packet,0,sizeof(&client_to_server_packet));
			memset((uint8_t*)return_from_test_value,0,sizeof(return_from_test_value));





		}

	}
}



