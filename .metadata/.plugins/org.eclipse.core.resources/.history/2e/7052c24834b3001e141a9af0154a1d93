/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
typedef StaticQueue_t osStaticMessageQDef_t;
typedef StaticSemaphore_t osStaticSemaphoreDef_t;
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for DispatchQueue */
osMessageQueueId_t DispatchQueueHandle;
uint8_t DispatchQueueBuffer[ 1024 * sizeof( uint32_t ) ];
osStaticMessageQDef_t DispatchQueueControlBlock;
const osMessageQueueAttr_t DispatchQueue_attributes = {
  .name = "DispatchQueue",
  .cb_mem = &DispatchQueueControlBlock,
  .cb_size = sizeof(DispatchQueueControlBlock),
  .mq_mem = &DispatchQueueBuffer,
  .mq_size = sizeof(DispatchQueueBuffer)
};
/* Definitions for AmbulanceQueue */
osMessageQueueId_t AmbulanceQueueHandle;
uint8_t AmbulanceQueueBuffer[ 1024 * sizeof( uint32_t ) ];
osStaticMessageQDef_t AmbulanceQueueControlBlock;
const osMessageQueueAttr_t AmbulanceQueue_attributes = {
  .name = "AmbulanceQueue",
  .cb_mem = &AmbulanceQueueControlBlock,
  .cb_size = sizeof(AmbulanceQueueControlBlock),
  .mq_mem = &AmbulanceQueueBuffer,
  .mq_size = sizeof(AmbulanceQueueBuffer)
};
/* Definitions for PoliceQueue */
osMessageQueueId_t PoliceQueueHandle;
uint8_t PoliceQueueBuffer[ 1024 * sizeof( uint32_t ) ];
osStaticMessageQDef_t PoliceQueueControlBlock;
const osMessageQueueAttr_t PoliceQueue_attributes = {
  .name = "PoliceQueue",
  .cb_mem = &PoliceQueueControlBlock,
  .cb_size = sizeof(PoliceQueueControlBlock),
  .mq_mem = &PoliceQueueBuffer,
  .mq_size = sizeof(PoliceQueueBuffer)
};
/* Definitions for FireQueue */
osMessageQueueId_t FireQueueHandle;
uint8_t FireQueueBuffer[ 1024 * sizeof( uint32_t ) ];
osStaticMessageQDef_t FireQueueControlBlock;
const osMessageQueueAttr_t FireQueue_attributes = {
  .name = "FireQueue",
  .cb_mem = &FireQueueControlBlock,
  .cb_size = sizeof(FireQueueControlBlock),
  .mq_mem = &FireQueueBuffer,
  .mq_size = sizeof(FireQueueBuffer)
};
/* Definitions for CoronaQueue */
osMessageQueueId_t CoronaQueueHandle;
uint8_t CoronaQueueBuffer[ 1024 * sizeof( uint32_t ) ];
osStaticMessageQDef_t CoronaQueueControlBlock;
const osMessageQueueAttr_t CoronaQueue_attributes = {
  .name = "CoronaQueue",
  .cb_mem = &CoronaQueueControlBlock,
  .cb_size = sizeof(CoronaQueueControlBlock),
  .mq_mem = &CoronaQueueBuffer,
  .mq_size = sizeof(CoronaQueueBuffer)
};
/* Definitions for AmbulanceSemaphore */
osSemaphoreId_t AmbulanceSemaphoreHandle;
const osSemaphoreAttr_t AmbulanceSemaphore_attributes = {
  .name = "AmbulanceSemaphore"
};
/* Definitions for PoliceSemaphore */
osSemaphoreId_t PoliceSemaphoreHandle;
const osSemaphoreAttr_t PoliceSemaphore_attributes = {
  .name = "PoliceSemaphore"
};
/* Definitions for AmbulanceSemaphoreStatic */
osSemaphoreId_t AmbulanceSemaphoreStaticHandle;
osStaticSemaphoreDef_t Ambulance_SCB;
const osSemaphoreAttr_t AmbulanceSemaphoreStatic_attributes = {
  .name = "AmbulanceSemaphoreStatic",
  .cb_mem = &Ambulance_SCB,
  .cb_size = sizeof(Ambulance_SCB),
};
/* Definitions for PoliceSemaphoreStatic */
osSemaphoreId_t PoliceSemaphoreStaticHandle;
osStaticSemaphoreDef_t Police_SCB;
const osSemaphoreAttr_t PoliceSemaphoreStatic_attributes = {
  .name = "PoliceSemaphoreStatic",
  .cb_mem = &Police_SCB,
  .cb_size = sizeof(Police_SCB),
};
/* Definitions for FireSemaphoreStatic */
osSemaphoreId_t FireSemaphoreStaticHandle;
osStaticSemaphoreDef_t Fire_SCB;
const osSemaphoreAttr_t FireSemaphoreStatic_attributes = {
  .name = "FireSemaphoreStatic",
  .cb_mem = &Fire_SCB,
  .cb_size = sizeof(Fire_SCB),
};
/* Definitions for CoronaSemaphoreStatic */
osSemaphoreId_t CoronaSemaphoreStaticHandle;
osStaticSemaphoreDef_t Fire_SCB_new;
const osSemaphoreAttr_t CoronaSemaphoreStatic_attributes = {
  .name = "CoronaSemaphoreStatic",
  .cb_mem = &Fire_SCB_new,
  .cb_size = sizeof(Fire_SCB_new),
};
/* Definitions for TotalSemaphoreDynamic */
osSemaphoreId_t TotalSemaphoreDynamicHandle;
const osSemaphoreAttr_t TotalSemaphoreDynamic_attributes = {
  .name = "TotalSemaphoreDynamic"
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Initialize(void);
static void MPU_Config(void);
void StartDefaultTask(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AmbulanceSemaphore */
  AmbulanceSemaphoreHandle = osSemaphoreNew(4, 4, &AmbulanceSemaphore_attributes);

  /* creation of PoliceSemaphore */
  PoliceSemaphoreHandle = osSemaphoreNew(3, 3, &PoliceSemaphore_attributes);

  /* creation of AmbulanceSemaphoreStatic */
  AmbulanceSemaphoreStaticHandle = osSemaphoreNew(4, 4, &AmbulanceSemaphoreStatic_attributes);

  /* creation of PoliceSemaphoreStatic */
  PoliceSemaphoreStaticHandle = osSemaphoreNew(3, 3, &PoliceSemaphoreStatic_attributes);

  /* creation of FireSemaphoreStatic */
  FireSemaphoreStaticHandle = osSemaphoreNew(2, 2, &FireSemaphoreStatic_attributes);

  /* creation of CoronaSemaphoreStatic */
  CoronaSemaphoreStaticHandle = osSemaphoreNew(4, 4, &CoronaSemaphoreStatic_attributes);

  /* creation of TotalSemaphoreDynamic */
  TotalSemaphoreDynamicHandle = osSemaphoreNew(50, 50, &TotalSemaphoreDynamic_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of DispatchQueue */
  DispatchQueueHandle = osMessageQueueNew (1024, sizeof(uint32_t), &DispatchQueue_attributes);

  /* creation of AmbulanceQueue */
  AmbulanceQueueHandle = osMessageQueueNew (1024, sizeof(uint32_t), &AmbulanceQueue_attributes);

  /* creation of PoliceQueue */
  PoliceQueueHandle = osMessageQueueNew (1024, sizeof(uint32_t), &PoliceQueue_attributes);

  /* creation of FireQueue */
  FireQueueHandle = osMessageQueueNew (1024, sizeof(uint32_t), &FireQueue_attributes);

  /* creation of CoronaQueue */
  CoronaQueueHandle = osMessageQueueNew (1024, sizeof(uint32_t), &CoronaQueue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
